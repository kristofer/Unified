// Code generated from UnifiedParser.g4 by ANTLR 4.13.2. DO NOT EDIT.

package parser // UnifiedParser
import (
	"fmt"
	"strconv"
	"sync"

	"github.com/antlr4-go/antlr/v4"
)

// Suppress unused import errors
var _ = fmt.Printf
var _ = strconv.Itoa
var _ = sync.Once{}

type UnifiedParser struct {
	*antlr.BaseParser
}

var UnifiedParserParserStaticData struct {
	once                   sync.Once
	serializedATN          []int32
	LiteralNames           []string
	SymbolicNames          []string
	RuleNames              []string
	PredictionContextCache *antlr.PredictionContextCache
	atn                    *antlr.ATN
	decisionToDFA          []*antlr.DFA
}

func unifiedparserParserInit() {
	staticData := &UnifiedParserParserStaticData
	staticData.LiteralNames = []string{
		"", "", "", "'('", "')'", "'['", "']'", "';'", "':'", "','", "'.'",
		"'->'", "'::'", "'+'", "'-'", "'*'", "'/'", "'%'", "'&'", "'|'", "'^'",
		"'~'", "'<<'", "'>>'", "'&&'", "'||'", "'!'", "'=='", "'!='", "'<'",
		"'>'", "'<='", "'>='", "'='", "'+='", "'-='", "'*='", "'/='", "'%='",
		"'<<='", "'>>='", "'&='", "'^='", "'|='", "'?'", "'?.'", "'..'", "'..='",
		"'++'", "'--'", "'_'", "", "'import'", "'as'", "'fn'", "'struct'", "'enum'",
		"'interface'", "'impl'", "'actor'", "'type'", "'refine'", "'const'",
		"'let'", "'var'", "'mut'", "'pub'", "", "'if'", "'else'", "'loop'",
		"'while'", "'for'", "'in'", "'break'", "'continue'", "'return'", "'switch'",
		"'case'", "'where'", "'move'", "'await'", "'async'", "'try'", "'region'",
		"", "", "", "", "", "", "", "'${'",
	}
	staticData.SymbolicNames = []string{
		"", "LBRACE", "RBRACE", "LPAREN", "RPAREN", "LBRACK", "RBRACK", "SEMI",
		"COLON", "COMMA", "DOT", "ARROW", "DOUBLE_COLON", "PLUS", "MINUS", "STAR",
		"DIV", "MOD", "BIT_AND", "BIT_OR", "BIT_XOR", "BIT_NOT", "LSHIFT", "RSHIFT",
		"AND", "OR", "NOT", "EQ", "NE", "LT", "GT", "LE", "GE", "ASSIGN", "PLUS_ASSIGN",
		"MINUS_ASSIGN", "STAR_ASSIGN", "DIV_ASSIGN", "MOD_ASSIGN", "LSHIFT_ASSIGN",
		"RSHIFT_ASSIGN", "AND_ASSIGN", "XOR_ASSIGN", "OR_ASSIGN", "QUESTION",
		"NULL_COND", "RANGE", "RANGE_INCL", "INC", "DEC", "UNDERSCORE", "MODULE",
		"IMPORT", "AS", "FN", "STRUCT", "ENUM", "INTERFACE", "IMPL", "ACTOR",
		"TYPE", "REFINE", "CONST", "LET", "VAR", "MUT", "PUB", "SELF", "IF",
		"ELSE", "LOOP", "WHILE", "FOR", "IN", "BREAK", "CONTINUE", "RETURN",
		"SWITCH", "CASE", "WHERE", "MOVE", "AWAIT", "ASYNC", "TRY", "REGION",
		"Identifier", "IntLiteral", "FloatLiteral", "CharLiteral", "BoolLiteral",
		"NullLiteral", "StringLiteral", "Interpolation", "EscapeSequence", "WS",
		"COMMENT", "MULTILINE_COMMENT", "INTERPOLATION_CLOSE", "INTERPOLATION_TEXT",
		"NESTED_OPEN",
	}
	staticData.RuleNames = []string{
		"program", "item", "moduleDecl", "importDecl", "importPath", "importList",
		"functionDecl", "paramList", "parameter", "genericParams", "genericParam",
		"typeConstraint", "whereClause", "whereConstraint", "structDecl", "structMember",
		"enumDecl", "enumVariant", "enumVariantParams", "enumVariantParam",
		"interfaceDecl", "interfaceMember", "functionSig", "implDecl", "implMember",
		"actorDecl", "actorMember", "typeAlias", "constantDecl", "type", "typeList",
		"statement", "letStatement", "varStatement", "regionStatement", "exprStatement",
		"returnStatement", "ifStatement", "loopStatement", "whileStatement",
		"forStatement", "switchStatement", "caseClause", "breakStatement", "continueStatement",
		"blockStatement", "tryStatement", "pattern", "patternList", "fieldPattern",
		"fieldPatternList", "expr", "caseExpr", "primary", "lambdaExpr", "asyncExpr",
		"structExpr", "fieldInitList", "fieldInit", "listExpr", "mapExpr", "keyValue",
		"setExpr", "tupleExpr", "block", "argList", "literal", "identifier",
	}
	staticData.PredictionContextCache = antlr.NewPredictionContextCache()
	staticData.serializedATN = []int32{
		4, 1, 99, 1067, 2, 0, 7, 0, 2, 1, 7, 1, 2, 2, 7, 2, 2, 3, 7, 3, 2, 4, 7,
		4, 2, 5, 7, 5, 2, 6, 7, 6, 2, 7, 7, 7, 2, 8, 7, 8, 2, 9, 7, 9, 2, 10, 7,
		10, 2, 11, 7, 11, 2, 12, 7, 12, 2, 13, 7, 13, 2, 14, 7, 14, 2, 15, 7, 15,
		2, 16, 7, 16, 2, 17, 7, 17, 2, 18, 7, 18, 2, 19, 7, 19, 2, 20, 7, 20, 2,
		21, 7, 21, 2, 22, 7, 22, 2, 23, 7, 23, 2, 24, 7, 24, 2, 25, 7, 25, 2, 26,
		7, 26, 2, 27, 7, 27, 2, 28, 7, 28, 2, 29, 7, 29, 2, 30, 7, 30, 2, 31, 7,
		31, 2, 32, 7, 32, 2, 33, 7, 33, 2, 34, 7, 34, 2, 35, 7, 35, 2, 36, 7, 36,
		2, 37, 7, 37, 2, 38, 7, 38, 2, 39, 7, 39, 2, 40, 7, 40, 2, 41, 7, 41, 2,
		42, 7, 42, 2, 43, 7, 43, 2, 44, 7, 44, 2, 45, 7, 45, 2, 46, 7, 46, 2, 47,
		7, 47, 2, 48, 7, 48, 2, 49, 7, 49, 2, 50, 7, 50, 2, 51, 7, 51, 2, 52, 7,
		52, 2, 53, 7, 53, 2, 54, 7, 54, 2, 55, 7, 55, 2, 56, 7, 56, 2, 57, 7, 57,
		2, 58, 7, 58, 2, 59, 7, 59, 2, 60, 7, 60, 2, 61, 7, 61, 2, 62, 7, 62, 2,
		63, 7, 63, 2, 64, 7, 64, 2, 65, 7, 65, 2, 66, 7, 66, 2, 67, 7, 67, 1, 0,
		5, 0, 138, 8, 0, 10, 0, 12, 0, 141, 9, 0, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
		1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1, 153, 8, 1, 1, 2, 1, 2, 1, 2, 1, 2,
		5, 2, 159, 8, 2, 10, 2, 12, 2, 162, 9, 2, 1, 2, 1, 2, 1, 3, 1, 3, 1, 3,
		1, 3, 3, 3, 170, 8, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3, 1, 3,
		1, 3, 3, 3, 181, 8, 3, 1, 4, 1, 4, 1, 4, 5, 4, 186, 8, 4, 10, 4, 12, 4,
		189, 9, 4, 1, 5, 1, 5, 1, 5, 3, 5, 194, 8, 5, 1, 5, 1, 5, 1, 5, 1, 5, 3,
		5, 200, 8, 5, 5, 5, 202, 8, 5, 10, 5, 12, 5, 205, 9, 5, 1, 5, 3, 5, 208,
		8, 5, 1, 6, 3, 6, 211, 8, 6, 1, 6, 1, 6, 1, 6, 3, 6, 216, 8, 6, 1, 6, 1,
		6, 3, 6, 220, 8, 6, 1, 6, 1, 6, 1, 6, 3, 6, 225, 8, 6, 1, 6, 3, 6, 228,
		8, 6, 1, 6, 1, 6, 1, 7, 1, 7, 1, 7, 5, 7, 235, 8, 7, 10, 7, 12, 7, 238,
		9, 7, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8, 1, 8,
		1, 8, 1, 8, 1, 8, 3, 8, 254, 8, 8, 1, 9, 1, 9, 1, 9, 1, 9, 5, 9, 260, 8,
		9, 10, 9, 12, 9, 263, 9, 9, 1, 9, 1, 9, 1, 10, 1, 10, 1, 10, 3, 10, 270,
		8, 10, 1, 11, 1, 11, 1, 11, 5, 11, 275, 8, 11, 10, 11, 12, 11, 278, 9,
		11, 1, 12, 1, 12, 1, 12, 1, 12, 5, 12, 284, 8, 12, 10, 12, 12, 12, 287,
		9, 12, 1, 13, 1, 13, 1, 13, 1, 13, 1, 14, 3, 14, 294, 8, 14, 1, 14, 1,
		14, 1, 14, 3, 14, 299, 8, 14, 1, 14, 1, 14, 5, 14, 303, 8, 14, 10, 14,
		12, 14, 306, 9, 14, 1, 14, 1, 14, 1, 15, 3, 15, 311, 8, 15, 1, 15, 1, 15,
		1, 15, 1, 15, 1, 15, 3, 15, 318, 8, 15, 1, 16, 3, 16, 321, 8, 16, 1, 16,
		1, 16, 1, 16, 3, 16, 326, 8, 16, 1, 16, 1, 16, 1, 16, 1, 16, 5, 16, 332,
		8, 16, 10, 16, 12, 16, 335, 9, 16, 1, 16, 1, 16, 1, 17, 1, 17, 1, 17, 1,
		17, 1, 17, 3, 17, 344, 8, 17, 1, 18, 1, 18, 1, 18, 5, 18, 349, 8, 18, 10,
		18, 12, 18, 352, 9, 18, 1, 19, 1, 19, 1, 19, 3, 19, 357, 8, 19, 1, 19,
		1, 19, 1, 20, 3, 20, 362, 8, 20, 1, 20, 1, 20, 1, 20, 3, 20, 367, 8, 20,
		1, 20, 1, 20, 5, 20, 371, 8, 20, 10, 20, 12, 20, 374, 9, 20, 1, 20, 1,
		20, 1, 21, 1, 21, 1, 21, 1, 21, 1, 21, 3, 21, 383, 8, 21, 1, 22, 1, 22,
		1, 22, 3, 22, 388, 8, 22, 1, 22, 1, 22, 3, 22, 392, 8, 22, 1, 22, 1, 22,
		1, 22, 3, 22, 397, 8, 22, 1, 22, 1, 22, 1, 22, 1, 22, 1, 22, 3, 22, 404,
		8, 22, 1, 22, 1, 22, 3, 22, 408, 8, 22, 1, 22, 1, 22, 1, 22, 3, 22, 413,
		8, 22, 1, 22, 1, 22, 3, 22, 417, 8, 22, 1, 23, 1, 23, 3, 23, 421, 8, 23,
		1, 23, 1, 23, 1, 23, 1, 23, 3, 23, 427, 8, 23, 1, 23, 1, 23, 5, 23, 431,
		8, 23, 10, 23, 12, 23, 434, 9, 23, 1, 23, 1, 23, 1, 23, 1, 23, 3, 23, 440,
		8, 23, 1, 23, 1, 23, 3, 23, 444, 8, 23, 1, 23, 1, 23, 5, 23, 448, 8, 23,
		10, 23, 12, 23, 451, 9, 23, 1, 23, 1, 23, 3, 23, 455, 8, 23, 1, 24, 1,
		24, 1, 24, 1, 24, 1, 24, 1, 24, 1, 24, 3, 24, 464, 8, 24, 1, 25, 3, 25,
		467, 8, 25, 1, 25, 1, 25, 1, 25, 3, 25, 472, 8, 25, 1, 25, 1, 25, 5, 25,
		476, 8, 25, 10, 25, 12, 25, 479, 9, 25, 1, 25, 1, 25, 1, 26, 3, 26, 484,
		8, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 1, 26, 3, 26, 492, 8, 26, 1,
		26, 1, 26, 1, 26, 3, 26, 497, 8, 26, 1, 27, 3, 27, 500, 8, 27, 1, 27, 1,
		27, 1, 27, 3, 27, 505, 8, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27,
		512, 8, 27, 1, 27, 1, 27, 1, 27, 3, 27, 517, 8, 27, 1, 27, 1, 27, 1, 27,
		1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 1, 27, 3, 27, 528, 8, 27, 1, 28, 3,
		28, 531, 8, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28, 1, 28,
		1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 3, 29, 547, 8, 29, 1, 29, 1,
		29, 1, 29, 3, 29, 552, 8, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29,
		1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 3, 29, 568, 8,
		29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 1, 29, 4, 29, 576, 8, 29, 11, 29,
		12, 29, 577, 5, 29, 580, 8, 29, 10, 29, 12, 29, 583, 9, 29, 1, 30, 1, 30,
		1, 30, 5, 30, 588, 8, 30, 10, 30, 12, 30, 591, 9, 30, 1, 31, 1, 31, 1,
		31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31, 1, 31,
		1, 31, 3, 31, 607, 8, 31, 1, 32, 1, 32, 3, 32, 611, 8, 32, 1, 32, 1, 32,
		1, 32, 3, 32, 616, 8, 32, 1, 32, 1, 32, 1, 32, 1, 32, 1, 33, 1, 33, 1,
		33, 1, 33, 1, 33, 1, 33, 3, 33, 628, 8, 33, 1, 33, 1, 33, 1, 34, 1, 34,
		1, 34, 1, 34, 1, 35, 1, 35, 1, 35, 1, 36, 1, 36, 3, 36, 641, 8, 36, 1,
		36, 1, 36, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 1, 37, 5, 37,
		653, 8, 37, 10, 37, 12, 37, 656, 9, 37, 1, 37, 1, 37, 3, 37, 660, 8, 37,
		1, 38, 1, 38, 1, 38, 3, 38, 665, 8, 38, 1, 38, 1, 38, 1, 38, 1, 39, 1,
		39, 1, 39, 3, 39, 673, 8, 39, 1, 39, 1, 39, 1, 39, 1, 39, 1, 40, 1, 40,
		1, 40, 3, 40, 682, 8, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1, 40, 1,
		41, 1, 41, 1, 41, 1, 41, 5, 41, 694, 8, 41, 10, 41, 12, 41, 697, 9, 41,
		1, 41, 1, 41, 1, 42, 1, 42, 1, 42, 1, 42, 1, 42, 3, 42, 706, 8, 42, 1,
		43, 1, 43, 3, 43, 710, 8, 43, 1, 43, 1, 43, 1, 44, 1, 44, 3, 44, 716, 8,
		44, 1, 44, 1, 44, 1, 45, 1, 45, 1, 46, 1, 46, 1, 46, 1, 47, 1, 47, 1, 47,
		1, 47, 1, 47, 1, 47, 1, 47, 3, 47, 732, 8, 47, 1, 47, 1, 47, 1, 47, 1,
		47, 1, 47, 1, 47, 3, 47, 740, 8, 47, 1, 47, 1, 47, 3, 47, 744, 8, 47, 1,
		47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 1, 47, 3, 47, 753, 8, 47, 1, 47,
		3, 47, 756, 8, 47, 1, 47, 1, 47, 1, 47, 5, 47, 761, 8, 47, 10, 47, 12,
		47, 764, 9, 47, 1, 48, 1, 48, 1, 48, 5, 48, 769, 8, 48, 10, 48, 12, 48,
		772, 9, 48, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 1, 49, 3, 49, 780, 8, 49,
		1, 50, 1, 50, 1, 50, 5, 50, 785, 8, 50, 10, 50, 12, 50, 788, 9, 50, 1,
		51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51,
		1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 5, 51, 808, 8, 51, 10,
		51, 12, 51, 811, 9, 51, 1, 51, 1, 51, 3, 51, 815, 8, 51, 1, 51, 1, 51,
		1, 51, 1, 51, 5, 51, 821, 8, 51, 10, 51, 12, 51, 824, 9, 51, 1, 51, 1,
		51, 3, 51, 828, 8, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51,
		1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1,
		51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51,
		1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1,
		51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 3, 51, 877,
		8, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1, 51, 1,
		51, 3, 51, 889, 8, 51, 1, 51, 1, 51, 1, 51, 5, 51, 894, 8, 51, 10, 51,
		12, 51, 897, 9, 51, 1, 52, 1, 52, 1, 52, 1, 52, 1, 52, 1, 53, 1, 53, 1,
		53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 1, 53, 3, 53,
		916, 8, 53, 1, 54, 3, 54, 919, 8, 54, 1, 54, 1, 54, 3, 54, 923, 8, 54,
		1, 54, 1, 54, 1, 54, 3, 54, 928, 8, 54, 1, 54, 1, 54, 3, 54, 932, 8, 54,
		1, 55, 1, 55, 1, 55, 1, 56, 1, 56, 1, 56, 1, 56, 1, 56, 1, 57, 1, 57, 1,
		57, 5, 57, 945, 8, 57, 10, 57, 12, 57, 948, 9, 57, 1, 57, 3, 57, 951, 8,
		57, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 1, 58, 3, 58, 960, 8, 58,
		1, 59, 1, 59, 1, 59, 1, 59, 5, 59, 966, 8, 59, 10, 59, 12, 59, 969, 9,
		59, 3, 59, 971, 8, 59, 1, 59, 3, 59, 974, 8, 59, 1, 59, 1, 59, 1, 59, 1,
		59, 1, 59, 1, 59, 1, 59, 1, 59, 1, 59, 3, 59, 985, 8, 59, 1, 59, 1, 59,
		3, 59, 989, 8, 59, 1, 60, 1, 60, 1, 60, 1, 60, 5, 60, 995, 8, 60, 10, 60,
		12, 60, 998, 9, 60, 3, 60, 1000, 8, 60, 1, 60, 3, 60, 1003, 8, 60, 1, 60,
		1, 60, 1, 61, 1, 61, 1, 61, 1, 61, 1, 62, 1, 62, 1, 62, 1, 62, 5, 62, 1015,
		8, 62, 10, 62, 12, 62, 1018, 9, 62, 3, 62, 1020, 8, 62, 1, 62, 3, 62, 1023,
		8, 62, 1, 62, 1, 62, 1, 63, 1, 63, 1, 63, 1, 63, 5, 63, 1031, 8, 63, 10,
		63, 12, 63, 1034, 9, 63, 3, 63, 1036, 8, 63, 1, 63, 3, 63, 1039, 8, 63,
		1, 63, 1, 63, 1, 64, 1, 64, 5, 64, 1045, 8, 64, 10, 64, 12, 64, 1048, 9,
		64, 1, 64, 3, 64, 1051, 8, 64, 1, 64, 1, 64, 1, 65, 1, 65, 1, 65, 5, 65,
		1058, 8, 65, 10, 65, 12, 65, 1061, 9, 65, 1, 66, 1, 66, 1, 67, 1, 67, 1,
		67, 0, 3, 58, 94, 102, 68, 0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24,
		26, 28, 30, 32, 34, 36, 38, 40, 42, 44, 46, 48, 50, 52, 54, 56, 58, 60,
		62, 64, 66, 68, 70, 72, 74, 76, 78, 80, 82, 84, 86, 88, 90, 92, 94, 96,
		98, 100, 102, 104, 106, 108, 110, 112, 114, 116, 118, 120, 122, 124, 126,
		128, 130, 132, 134, 0, 10, 2, 0, 8, 8, 11, 11, 4, 0, 13, 14, 21, 21, 26,
		26, 48, 49, 1, 0, 15, 17, 1, 0, 13, 14, 1, 0, 22, 23, 1, 0, 29, 32, 1,
		0, 27, 28, 2, 0, 33, 43, 45, 47, 1, 0, 48, 49, 1, 0, 86, 91, 1185, 0, 139,
		1, 0, 0, 0, 2, 152, 1, 0, 0, 0, 4, 154, 1, 0, 0, 0, 6, 180, 1, 0, 0, 0,
		8, 182, 1, 0, 0, 0, 10, 207, 1, 0, 0, 0, 12, 210, 1, 0, 0, 0, 14, 231,
		1, 0, 0, 0, 16, 253, 1, 0, 0, 0, 18, 255, 1, 0, 0, 0, 20, 266, 1, 0, 0,
		0, 22, 271, 1, 0, 0, 0, 24, 279, 1, 0, 0, 0, 26, 288, 1, 0, 0, 0, 28, 293,
		1, 0, 0, 0, 30, 317, 1, 0, 0, 0, 32, 320, 1, 0, 0, 0, 34, 338, 1, 0, 0,
		0, 36, 345, 1, 0, 0, 0, 38, 356, 1, 0, 0, 0, 40, 361, 1, 0, 0, 0, 42, 382,
		1, 0, 0, 0, 44, 416, 1, 0, 0, 0, 46, 454, 1, 0, 0, 0, 48, 463, 1, 0, 0,
		0, 50, 466, 1, 0, 0, 0, 52, 496, 1, 0, 0, 0, 54, 527, 1, 0, 0, 0, 56, 530,
		1, 0, 0, 0, 58, 567, 1, 0, 0, 0, 60, 584, 1, 0, 0, 0, 62, 606, 1, 0, 0,
		0, 64, 608, 1, 0, 0, 0, 66, 621, 1, 0, 0, 0, 68, 631, 1, 0, 0, 0, 70, 635,
		1, 0, 0, 0, 72, 638, 1, 0, 0, 0, 74, 644, 1, 0, 0, 0, 76, 664, 1, 0, 0,
		0, 78, 672, 1, 0, 0, 0, 80, 681, 1, 0, 0, 0, 82, 689, 1, 0, 0, 0, 84, 700,
		1, 0, 0, 0, 86, 707, 1, 0, 0, 0, 88, 713, 1, 0, 0, 0, 90, 719, 1, 0, 0,
		0, 92, 721, 1, 0, 0, 0, 94, 755, 1, 0, 0, 0, 96, 765, 1, 0, 0, 0, 98, 779,
		1, 0, 0, 0, 100, 781, 1, 0, 0, 0, 102, 827, 1, 0, 0, 0, 104, 898, 1, 0,
		0, 0, 106, 915, 1, 0, 0, 0, 108, 918, 1, 0, 0, 0, 110, 933, 1, 0, 0, 0,
		112, 936, 1, 0, 0, 0, 114, 941, 1, 0, 0, 0, 116, 959, 1, 0, 0, 0, 118,
		988, 1, 0, 0, 0, 120, 990, 1, 0, 0, 0, 122, 1006, 1, 0, 0, 0, 124, 1010,
		1, 0, 0, 0, 126, 1026, 1, 0, 0, 0, 128, 1042, 1, 0, 0, 0, 130, 1054, 1,
		0, 0, 0, 132, 1062, 1, 0, 0, 0, 134, 1064, 1, 0, 0, 0, 136, 138, 3, 2,
		1, 0, 137, 136, 1, 0, 0, 0, 138, 141, 1, 0, 0, 0, 139, 137, 1, 0, 0, 0,
		139, 140, 1, 0, 0, 0, 140, 1, 1, 0, 0, 0, 141, 139, 1, 0, 0, 0, 142, 153,
		3, 4, 2, 0, 143, 153, 3, 12, 6, 0, 144, 153, 3, 28, 14, 0, 145, 153, 3,
		32, 16, 0, 146, 153, 3, 40, 20, 0, 147, 153, 3, 46, 23, 0, 148, 153, 3,
		50, 25, 0, 149, 153, 3, 54, 27, 0, 150, 153, 3, 6, 3, 0, 151, 153, 3, 56,
		28, 0, 152, 142, 1, 0, 0, 0, 152, 143, 1, 0, 0, 0, 152, 144, 1, 0, 0, 0,
		152, 145, 1, 0, 0, 0, 152, 146, 1, 0, 0, 0, 152, 147, 1, 0, 0, 0, 152,
		148, 1, 0, 0, 0, 152, 149, 1, 0, 0, 0, 152, 150, 1, 0, 0, 0, 152, 151,
		1, 0, 0, 0, 153, 3, 1, 0, 0, 0, 154, 155, 5, 51, 0, 0, 155, 156, 3, 134,
		67, 0, 156, 160, 5, 1, 0, 0, 157, 159, 3, 2, 1, 0, 158, 157, 1, 0, 0, 0,
		159, 162, 1, 0, 0, 0, 160, 158, 1, 0, 0, 0, 160, 161, 1, 0, 0, 0, 161,
		163, 1, 0, 0, 0, 162, 160, 1, 0, 0, 0, 163, 164, 5, 2, 0, 0, 164, 5, 1,
		0, 0, 0, 165, 166, 5, 52, 0, 0, 166, 169, 3, 8, 4, 0, 167, 168, 5, 53,
		0, 0, 168, 170, 3, 134, 67, 0, 169, 167, 1, 0, 0, 0, 169, 170, 1, 0, 0,
		0, 170, 171, 1, 0, 0, 0, 171, 172, 5, 7, 0, 0, 172, 181, 1, 0, 0, 0, 173,
		174, 5, 52, 0, 0, 174, 175, 3, 8, 4, 0, 175, 176, 5, 1, 0, 0, 176, 177,
		3, 10, 5, 0, 177, 178, 5, 2, 0, 0, 178, 179, 5, 7, 0, 0, 179, 181, 1, 0,
		0, 0, 180, 165, 1, 0, 0, 0, 180, 173, 1, 0, 0, 0, 181, 7, 1, 0, 0, 0, 182,
		187, 3, 134, 67, 0, 183, 184, 5, 10, 0, 0, 184, 186, 3, 134, 67, 0, 185,
		183, 1, 0, 0, 0, 186, 189, 1, 0, 0, 0, 187, 185, 1, 0, 0, 0, 187, 188,
		1, 0, 0, 0, 188, 9, 1, 0, 0, 0, 189, 187, 1, 0, 0, 0, 190, 193, 3, 134,
		67, 0, 191, 192, 5, 53, 0, 0, 192, 194, 3, 134, 67, 0, 193, 191, 1, 0,
		0, 0, 193, 194, 1, 0, 0, 0, 194, 203, 1, 0, 0, 0, 195, 196, 5, 9, 0, 0,
		196, 199, 3, 134, 67, 0, 197, 198, 5, 53, 0, 0, 198, 200, 3, 134, 67, 0,
		199, 197, 1, 0, 0, 0, 199, 200, 1, 0, 0, 0, 200, 202, 1, 0, 0, 0, 201,
		195, 1, 0, 0, 0, 202, 205, 1, 0, 0, 0, 203, 201, 1, 0, 0, 0, 203, 204,
		1, 0, 0, 0, 204, 208, 1, 0, 0, 0, 205, 203, 1, 0, 0, 0, 206, 208, 5, 15,
		0, 0, 207, 190, 1, 0, 0, 0, 207, 206, 1, 0, 0, 0, 208, 11, 1, 0, 0, 0,
		209, 211, 5, 66, 0, 0, 210, 209, 1, 0, 0, 0, 210, 211, 1, 0, 0, 0, 211,
		212, 1, 0, 0, 0, 212, 213, 5, 54, 0, 0, 213, 215, 3, 134, 67, 0, 214, 216,
		3, 18, 9, 0, 215, 214, 1, 0, 0, 0, 215, 216, 1, 0, 0, 0, 216, 217, 1, 0,
		0, 0, 217, 219, 5, 3, 0, 0, 218, 220, 3, 14, 7, 0, 219, 218, 1, 0, 0, 0,
		219, 220, 1, 0, 0, 0, 220, 221, 1, 0, 0, 0, 221, 224, 5, 4, 0, 0, 222,
		223, 5, 11, 0, 0, 223, 225, 3, 58, 29, 0, 224, 222, 1, 0, 0, 0, 224, 225,
		1, 0, 0, 0, 225, 227, 1, 0, 0, 0, 226, 228, 3, 24, 12, 0, 227, 226, 1,
		0, 0, 0, 227, 228, 1, 0, 0, 0, 228, 229, 1, 0, 0, 0, 229, 230, 3, 128,
		64, 0, 230, 13, 1, 0, 0, 0, 231, 236, 3, 16, 8, 0, 232, 233, 5, 9, 0, 0,
		233, 235, 3, 16, 8, 0, 234, 232, 1, 0, 0, 0, 235, 238, 1, 0, 0, 0, 236,
		234, 1, 0, 0, 0, 236, 237, 1, 0, 0, 0, 237, 15, 1, 0, 0, 0, 238, 236, 1,
		0, 0, 0, 239, 240, 3, 134, 67, 0, 240, 241, 5, 8, 0, 0, 241, 242, 3, 58,
		29, 0, 242, 254, 1, 0, 0, 0, 243, 254, 5, 67, 0, 0, 244, 245, 5, 67, 0,
		0, 245, 246, 5, 8, 0, 0, 246, 247, 5, 18, 0, 0, 247, 254, 5, 67, 0, 0,
		248, 249, 5, 67, 0, 0, 249, 250, 5, 8, 0, 0, 250, 251, 5, 18, 0, 0, 251,
		252, 5, 65, 0, 0, 252, 254, 5, 67, 0, 0, 253, 239, 1, 0, 0, 0, 253, 243,
		1, 0, 0, 0, 253, 244, 1, 0, 0, 0, 253, 248, 1, 0, 0, 0, 254, 17, 1, 0,
		0, 0, 255, 256, 5, 29, 0, 0, 256, 261, 3, 20, 10, 0, 257, 258, 5, 9, 0,
		0, 258, 260, 3, 20, 10, 0, 259, 257, 1, 0, 0, 0, 260, 263, 1, 0, 0, 0,
		261, 259, 1, 0, 0, 0, 261, 262, 1, 0, 0, 0, 262, 264, 1, 0, 0, 0, 263,
		261, 1, 0, 0, 0, 264, 265, 5, 30, 0, 0, 265, 19, 1, 0, 0, 0, 266, 269,
		3, 134, 67, 0, 267, 268, 5, 8, 0, 0, 268, 270, 3, 22, 11, 0, 269, 267,
		1, 0, 0, 0, 269, 270, 1, 0, 0, 0, 270, 21, 1, 0, 0, 0, 271, 276, 3, 58,
		29, 0, 272, 273, 5, 13, 0, 0, 273, 275, 3, 58, 29, 0, 274, 272, 1, 0, 0,
		0, 275, 278, 1, 0, 0, 0, 276, 274, 1, 0, 0, 0, 276, 277, 1, 0, 0, 0, 277,
		23, 1, 0, 0, 0, 278, 276, 1, 0, 0, 0, 279, 280, 5, 79, 0, 0, 280, 285,
		3, 26, 13, 0, 281, 282, 5, 9, 0, 0, 282, 284, 3, 26, 13, 0, 283, 281, 1,
		0, 0, 0, 284, 287, 1, 0, 0, 0, 285, 283, 1, 0, 0, 0, 285, 286, 1, 0, 0,
		0, 286, 25, 1, 0, 0, 0, 287, 285, 1, 0, 0, 0, 288, 289, 3, 58, 29, 0, 289,
		290, 5, 8, 0, 0, 290, 291, 3, 22, 11, 0, 291, 27, 1, 0, 0, 0, 292, 294,
		5, 66, 0, 0, 293, 292, 1, 0, 0, 0, 293, 294, 1, 0, 0, 0, 294, 295, 1, 0,
		0, 0, 295, 296, 5, 55, 0, 0, 296, 298, 3, 134, 67, 0, 297, 299, 3, 18,
		9, 0, 298, 297, 1, 0, 0, 0, 298, 299, 1, 0, 0, 0, 299, 300, 1, 0, 0, 0,
		300, 304, 5, 1, 0, 0, 301, 303, 3, 30, 15, 0, 302, 301, 1, 0, 0, 0, 303,
		306, 1, 0, 0, 0, 304, 302, 1, 0, 0, 0, 304, 305, 1, 0, 0, 0, 305, 307,
		1, 0, 0, 0, 306, 304, 1, 0, 0, 0, 307, 308, 5, 2, 0, 0, 308, 29, 1, 0,
		0, 0, 309, 311, 5, 66, 0, 0, 310, 309, 1, 0, 0, 0, 310, 311, 1, 0, 0, 0,
		311, 312, 1, 0, 0, 0, 312, 313, 3, 134, 67, 0, 313, 314, 5, 8, 0, 0, 314,
		315, 3, 58, 29, 0, 315, 318, 1, 0, 0, 0, 316, 318, 3, 12, 6, 0, 317, 310,
		1, 0, 0, 0, 317, 316, 1, 0, 0, 0, 318, 31, 1, 0, 0, 0, 319, 321, 5, 66,
		0, 0, 320, 319, 1, 0, 0, 0, 320, 321, 1, 0, 0, 0, 321, 322, 1, 0, 0, 0,
		322, 323, 5, 56, 0, 0, 323, 325, 3, 134, 67, 0, 324, 326, 3, 18, 9, 0,
		325, 324, 1, 0, 0, 0, 325, 326, 1, 0, 0, 0, 326, 327, 1, 0, 0, 0, 327,
		328, 5, 1, 0, 0, 328, 333, 3, 34, 17, 0, 329, 330, 5, 9, 0, 0, 330, 332,
		3, 34, 17, 0, 331, 329, 1, 0, 0, 0, 332, 335, 1, 0, 0, 0, 333, 331, 1,
		0, 0, 0, 333, 334, 1, 0, 0, 0, 334, 336, 1, 0, 0, 0, 335, 333, 1, 0, 0,
		0, 336, 337, 5, 2, 0, 0, 337, 33, 1, 0, 0, 0, 338, 343, 3, 134, 67, 0,
		339, 340, 5, 3, 0, 0, 340, 341, 3, 36, 18, 0, 341, 342, 5, 4, 0, 0, 342,
		344, 1, 0, 0, 0, 343, 339, 1, 0, 0, 0, 343, 344, 1, 0, 0, 0, 344, 35, 1,
		0, 0, 0, 345, 350, 3, 38, 19, 0, 346, 347, 5, 9, 0, 0, 347, 349, 3, 38,
		19, 0, 348, 346, 1, 0, 0, 0, 349, 352, 1, 0, 0, 0, 350, 348, 1, 0, 0, 0,
		350, 351, 1, 0, 0, 0, 351, 37, 1, 0, 0, 0, 352, 350, 1, 0, 0, 0, 353, 354,
		3, 134, 67, 0, 354, 355, 5, 8, 0, 0, 355, 357, 1, 0, 0, 0, 356, 353, 1,
		0, 0, 0, 356, 357, 1, 0, 0, 0, 357, 358, 1, 0, 0, 0, 358, 359, 3, 58, 29,
		0, 359, 39, 1, 0, 0, 0, 360, 362, 5, 66, 0, 0, 361, 360, 1, 0, 0, 0, 361,
		362, 1, 0, 0, 0, 362, 363, 1, 0, 0, 0, 363, 364, 5, 57, 0, 0, 364, 366,
		3, 134, 67, 0, 365, 367, 3, 18, 9, 0, 366, 365, 1, 0, 0, 0, 366, 367, 1,
		0, 0, 0, 367, 368, 1, 0, 0, 0, 368, 372, 5, 1, 0, 0, 369, 371, 3, 42, 21,
		0, 370, 369, 1, 0, 0, 0, 371, 374, 1, 0, 0, 0, 372, 370, 1, 0, 0, 0, 372,
		373, 1, 0, 0, 0, 373, 375, 1, 0, 0, 0, 374, 372, 1, 0, 0, 0, 375, 376,
		5, 2, 0, 0, 376, 41, 1, 0, 0, 0, 377, 383, 3, 44, 22, 0, 378, 379, 5, 60,
		0, 0, 379, 380, 3, 134, 67, 0, 380, 381, 5, 7, 0, 0, 381, 383, 1, 0, 0,
		0, 382, 377, 1, 0, 0, 0, 382, 378, 1, 0, 0, 0, 383, 43, 1, 0, 0, 0, 384,
		385, 5, 54, 0, 0, 385, 387, 3, 134, 67, 0, 386, 388, 3, 18, 9, 0, 387,
		386, 1, 0, 0, 0, 387, 388, 1, 0, 0, 0, 388, 389, 1, 0, 0, 0, 389, 391,
		5, 3, 0, 0, 390, 392, 3, 14, 7, 0, 391, 390, 1, 0, 0, 0, 391, 392, 1, 0,
		0, 0, 392, 393, 1, 0, 0, 0, 393, 396, 5, 4, 0, 0, 394, 395, 5, 11, 0, 0,
		395, 397, 3, 58, 29, 0, 396, 394, 1, 0, 0, 0, 396, 397, 1, 0, 0, 0, 397,
		398, 1, 0, 0, 0, 398, 399, 5, 7, 0, 0, 399, 417, 1, 0, 0, 0, 400, 401,
		5, 54, 0, 0, 401, 403, 3, 134, 67, 0, 402, 404, 3, 18, 9, 0, 403, 402,
		1, 0, 0, 0, 403, 404, 1, 0, 0, 0, 404, 405, 1, 0, 0, 0, 405, 407, 5, 3,
		0, 0, 406, 408, 3, 14, 7, 0, 407, 406, 1, 0, 0, 0, 407, 408, 1, 0, 0, 0,
		408, 409, 1, 0, 0, 0, 409, 412, 5, 4, 0, 0, 410, 411, 5, 11, 0, 0, 411,
		413, 3, 58, 29, 0, 412, 410, 1, 0, 0, 0, 412, 413, 1, 0, 0, 0, 413, 414,
		1, 0, 0, 0, 414, 415, 3, 128, 64, 0, 415, 417, 1, 0, 0, 0, 416, 384, 1,
		0, 0, 0, 416, 400, 1, 0, 0, 0, 417, 45, 1, 0, 0, 0, 418, 420, 5, 58, 0,
		0, 419, 421, 3, 18, 9, 0, 420, 419, 1, 0, 0, 0, 420, 421, 1, 0, 0, 0, 421,
		422, 1, 0, 0, 0, 422, 423, 3, 58, 29, 0, 423, 424, 5, 72, 0, 0, 424, 426,
		3, 58, 29, 0, 425, 427, 3, 24, 12, 0, 426, 425, 1, 0, 0, 0, 426, 427, 1,
		0, 0, 0, 427, 428, 1, 0, 0, 0, 428, 432, 5, 1, 0, 0, 429, 431, 3, 48, 24,
		0, 430, 429, 1, 0, 0, 0, 431, 434, 1, 0, 0, 0, 432, 430, 1, 0, 0, 0, 432,
		433, 1, 0, 0, 0, 433, 435, 1, 0, 0, 0, 434, 432, 1, 0, 0, 0, 435, 436,
		5, 2, 0, 0, 436, 455, 1, 0, 0, 0, 437, 439, 5, 58, 0, 0, 438, 440, 3, 18,
		9, 0, 439, 438, 1, 0, 0, 0, 439, 440, 1, 0, 0, 0, 440, 441, 1, 0, 0, 0,
		441, 443, 3, 58, 29, 0, 442, 444, 3, 24, 12, 0, 443, 442, 1, 0, 0, 0, 443,
		444, 1, 0, 0, 0, 444, 445, 1, 0, 0, 0, 445, 449, 5, 1, 0, 0, 446, 448,
		3, 48, 24, 0, 447, 446, 1, 0, 0, 0, 448, 451, 1, 0, 0, 0, 449, 447, 1,
		0, 0, 0, 449, 450, 1, 0, 0, 0, 450, 452, 1, 0, 0, 0, 451, 449, 1, 0, 0,
		0, 452, 453, 5, 2, 0, 0, 453, 455, 1, 0, 0, 0, 454, 418, 1, 0, 0, 0, 454,
		437, 1, 0, 0, 0, 455, 47, 1, 0, 0, 0, 456, 464, 3, 12, 6, 0, 457, 458,
		5, 60, 0, 0, 458, 459, 3, 134, 67, 0, 459, 460, 5, 33, 0, 0, 460, 461,
		3, 58, 29, 0, 461, 462, 5, 7, 0, 0, 462, 464, 1, 0, 0, 0, 463, 456, 1,
		0, 0, 0, 463, 457, 1, 0, 0, 0, 464, 49, 1, 0, 0, 0, 465, 467, 5, 66, 0,
		0, 466, 465, 1, 0, 0, 0, 466, 467, 1, 0, 0, 0, 467, 468, 1, 0, 0, 0, 468,
		469, 5, 59, 0, 0, 469, 471, 3, 134, 67, 0, 470, 472, 3, 18, 9, 0, 471,
		470, 1, 0, 0, 0, 471, 472, 1, 0, 0, 0, 472, 473, 1, 0, 0, 0, 473, 477,
		5, 1, 0, 0, 474, 476, 3, 52, 26, 0, 475, 474, 1, 0, 0, 0, 476, 479, 1,
		0, 0, 0, 477, 475, 1, 0, 0, 0, 477, 478, 1, 0, 0, 0, 478, 480, 1, 0, 0,
		0, 479, 477, 1, 0, 0, 0, 480, 481, 5, 2, 0, 0, 481, 51, 1, 0, 0, 0, 482,
		484, 5, 66, 0, 0, 483, 482, 1, 0, 0, 0, 483, 484, 1, 0, 0, 0, 484, 485,
		1, 0, 0, 0, 485, 486, 5, 64, 0, 0, 486, 487, 3, 134, 67, 0, 487, 488, 5,
		8, 0, 0, 488, 491, 3, 58, 29, 0, 489, 490, 5, 33, 0, 0, 490, 492, 3, 102,
		51, 0, 491, 489, 1, 0, 0, 0, 491, 492, 1, 0, 0, 0, 492, 493, 1, 0, 0, 0,
		493, 494, 5, 7, 0, 0, 494, 497, 1, 0, 0, 0, 495, 497, 3, 12, 6, 0, 496,
		483, 1, 0, 0, 0, 496, 495, 1, 0, 0, 0, 497, 53, 1, 0, 0, 0, 498, 500, 5,
		66, 0, 0, 499, 498, 1, 0, 0, 0, 499, 500, 1, 0, 0, 0, 500, 501, 1, 0, 0,
		0, 501, 502, 5, 60, 0, 0, 502, 504, 3, 134, 67, 0, 503, 505, 3, 18, 9,
		0, 504, 503, 1, 0, 0, 0, 504, 505, 1, 0, 0, 0, 505, 506, 1, 0, 0, 0, 506,
		507, 5, 33, 0, 0, 507, 508, 3, 58, 29, 0, 508, 509, 5, 7, 0, 0, 509, 528,
		1, 0, 0, 0, 510, 512, 5, 66, 0, 0, 511, 510, 1, 0, 0, 0, 511, 512, 1, 0,
		0, 0, 512, 513, 1, 0, 0, 0, 513, 514, 5, 60, 0, 0, 514, 516, 3, 134, 67,
		0, 515, 517, 3, 18, 9, 0, 516, 515, 1, 0, 0, 0, 516, 517, 1, 0, 0, 0, 517,
		518, 1, 0, 0, 0, 518, 519, 5, 33, 0, 0, 519, 520, 3, 58, 29, 0, 520, 521,
		5, 61, 0, 0, 521, 522, 5, 19, 0, 0, 522, 523, 3, 134, 67, 0, 523, 524,
		5, 19, 0, 0, 524, 525, 3, 102, 51, 0, 525, 526, 5, 7, 0, 0, 526, 528, 1,
		0, 0, 0, 527, 499, 1, 0, 0, 0, 527, 511, 1, 0, 0, 0, 528, 55, 1, 0, 0,
		0, 529, 531, 5, 66, 0, 0, 530, 529, 1, 0, 0, 0, 530, 531, 1, 0, 0, 0, 531,
		532, 1, 0, 0, 0, 532, 533, 5, 62, 0, 0, 533, 534, 3, 134, 67, 0, 534, 535,
		5, 8, 0, 0, 535, 536, 3, 58, 29, 0, 536, 537, 5, 33, 0, 0, 537, 538, 3,
		102, 51, 0, 538, 539, 5, 7, 0, 0, 539, 57, 1, 0, 0, 0, 540, 541, 6, 29,
		-1, 0, 541, 546, 3, 134, 67, 0, 542, 543, 5, 29, 0, 0, 543, 544, 3, 60,
		30, 0, 544, 545, 5, 30, 0, 0, 545, 547, 1, 0, 0, 0, 546, 542, 1, 0, 0,
		0, 546, 547, 1, 0, 0, 0, 547, 568, 1, 0, 0, 0, 548, 549, 5, 54, 0, 0, 549,
		551, 5, 3, 0, 0, 550, 552, 3, 60, 30, 0, 551, 550, 1, 0, 0, 0, 551, 552,
		1, 0, 0, 0, 552, 553, 1, 0, 0, 0, 553, 554, 5, 4, 0, 0, 554, 555, 5, 11,
		0, 0, 555, 568, 3, 58, 29, 7, 556, 557, 5, 3, 0, 0, 557, 558, 3, 60, 30,
		0, 558, 559, 5, 4, 0, 0, 559, 568, 1, 0, 0, 0, 560, 561, 5, 18, 0, 0, 561,
		568, 3, 58, 29, 5, 562, 563, 5, 18, 0, 0, 563, 564, 5, 65, 0, 0, 564, 568,
		3, 58, 29, 4, 565, 566, 5, 58, 0, 0, 566, 568, 3, 134, 67, 0, 567, 540,
		1, 0, 0, 0, 567, 548, 1, 0, 0, 0, 567, 556, 1, 0, 0, 0, 567, 560, 1, 0,
		0, 0, 567, 562, 1, 0, 0, 0, 567, 565, 1, 0, 0, 0, 568, 581, 1, 0, 0, 0,
		569, 570, 10, 3, 0, 0, 570, 571, 5, 19, 0, 0, 571, 580, 3, 58, 29, 4, 572,
		575, 10, 1, 0, 0, 573, 574, 5, 12, 0, 0, 574, 576, 3, 134, 67, 0, 575,
		573, 1, 0, 0, 0, 576, 577, 1, 0, 0, 0, 577, 575, 1, 0, 0, 0, 577, 578,
		1, 0, 0, 0, 578, 580, 1, 0, 0, 0, 579, 569, 1, 0, 0, 0, 579, 572, 1, 0,
		0, 0, 580, 583, 1, 0, 0, 0, 581, 579, 1, 0, 0, 0, 581, 582, 1, 0, 0, 0,
		582, 59, 1, 0, 0, 0, 583, 581, 1, 0, 0, 0, 584, 589, 3, 58, 29, 0, 585,
		586, 5, 9, 0, 0, 586, 588, 3, 58, 29, 0, 587, 585, 1, 0, 0, 0, 588, 591,
		1, 0, 0, 0, 589, 587, 1, 0, 0, 0, 589, 590, 1, 0, 0, 0, 590, 61, 1, 0,
		0, 0, 591, 589, 1, 0, 0, 0, 592, 607, 3, 64, 32, 0, 593, 607, 3, 66, 33,
		0, 594, 607, 3, 68, 34, 0, 595, 607, 3, 70, 35, 0, 596, 607, 3, 72, 36,
		0, 597, 607, 3, 74, 37, 0, 598, 607, 3, 76, 38, 0, 599, 607, 3, 78, 39,
		0, 600, 607, 3, 80, 40, 0, 601, 607, 3, 82, 41, 0, 602, 607, 3, 86, 43,
		0, 603, 607, 3, 88, 44, 0, 604, 607, 3, 90, 45, 0, 605, 607, 3, 92, 46,
		0, 606, 592, 1, 0, 0, 0, 606, 593, 1, 0, 0, 0, 606, 594, 1, 0, 0, 0, 606,
		595, 1, 0, 0, 0, 606, 596, 1, 0, 0, 0, 606, 597, 1, 0, 0, 0, 606, 598,
		1, 0, 0, 0, 606, 599, 1, 0, 0, 0, 606, 600, 1, 0, 0, 0, 606, 601, 1, 0,
		0, 0, 606, 602, 1, 0, 0, 0, 606, 603, 1, 0, 0, 0, 606, 604, 1, 0, 0, 0,
		606, 605, 1, 0, 0, 0, 607, 63, 1, 0, 0, 0, 608, 610, 5, 63, 0, 0, 609,
		611, 5, 65, 0, 0, 610, 609, 1, 0, 0, 0, 610, 611, 1, 0, 0, 0, 611, 612,
		1, 0, 0, 0, 612, 615, 3, 134, 67, 0, 613, 614, 5, 8, 0, 0, 614, 616, 3,
		58, 29, 0, 615, 613, 1, 0, 0, 0, 615, 616, 1, 0, 0, 0, 616, 617, 1, 0,
		0, 0, 617, 618, 5, 33, 0, 0, 618, 619, 3, 102, 51, 0, 619, 620, 5, 7, 0,
		0, 620, 65, 1, 0, 0, 0, 621, 622, 5, 64, 0, 0, 622, 623, 3, 134, 67, 0,
		623, 624, 5, 8, 0, 0, 624, 627, 3, 58, 29, 0, 625, 626, 5, 33, 0, 0, 626,
		628, 3, 102, 51, 0, 627, 625, 1, 0, 0, 0, 627, 628, 1, 0, 0, 0, 628, 629,
		1, 0, 0, 0, 629, 630, 5, 7, 0, 0, 630, 67, 1, 0, 0, 0, 631, 632, 5, 84,
		0, 0, 632, 633, 3, 134, 67, 0, 633, 634, 3, 128, 64, 0, 634, 69, 1, 0,
		0, 0, 635, 636, 3, 102, 51, 0, 636, 637, 5, 7, 0, 0, 637, 71, 1, 0, 0,
		0, 638, 640, 5, 76, 0, 0, 639, 641, 3, 102, 51, 0, 640, 639, 1, 0, 0, 0,
		640, 641, 1, 0, 0, 0, 641, 642, 1, 0, 0, 0, 642, 643, 5, 7, 0, 0, 643,
		73, 1, 0, 0, 0, 644, 645, 5, 68, 0, 0, 645, 646, 3, 102, 51, 0, 646, 654,
		3, 128, 64, 0, 647, 648, 5, 69, 0, 0, 648, 649, 5, 68, 0, 0, 649, 650,
		3, 102, 51, 0, 650, 651, 3, 128, 64, 0, 651, 653, 1, 0, 0, 0, 652, 647,
		1, 0, 0, 0, 653, 656, 1, 0, 0, 0, 654, 652, 1, 0, 0, 0, 654, 655, 1, 0,
		0, 0, 655, 659, 1, 0, 0, 0, 656, 654, 1, 0, 0, 0, 657, 658, 5, 69, 0, 0,
		658, 660, 3, 128, 64, 0, 659, 657, 1, 0, 0, 0, 659, 660, 1, 0, 0, 0, 660,
		75, 1, 0, 0, 0, 661, 662, 3, 134, 67, 0, 662, 663, 5, 8, 0, 0, 663, 665,
		1, 0, 0, 0, 664, 661, 1, 0, 0, 0, 664, 665, 1, 0, 0, 0, 665, 666, 1, 0,
		0, 0, 666, 667, 5, 70, 0, 0, 667, 668, 3, 128, 64, 0, 668, 77, 1, 0, 0,
		0, 669, 670, 3, 134, 67, 0, 670, 671, 5, 8, 0, 0, 671, 673, 1, 0, 0, 0,
		672, 669, 1, 0, 0, 0, 672, 673, 1, 0, 0, 0, 673, 674, 1, 0, 0, 0, 674,
		675, 5, 71, 0, 0, 675, 676, 3, 102, 51, 0, 676, 677, 3, 128, 64, 0, 677,
		79, 1, 0, 0, 0, 678, 679, 3, 134, 67, 0, 679, 680, 5, 8, 0, 0, 680, 682,
		1, 0, 0, 0, 681, 678, 1, 0, 0, 0, 681, 682, 1, 0, 0, 0, 682, 683, 1, 0,
		0, 0, 683, 684, 5, 72, 0, 0, 684, 685, 3, 134, 67, 0, 685, 686, 5, 73,
		0, 0, 686, 687, 3, 102, 51, 0, 687, 688, 3, 128, 64, 0, 688, 81, 1, 0,
		0, 0, 689, 690, 5, 77, 0, 0, 690, 691, 3, 102, 51, 0, 691, 695, 5, 1, 0,
		0, 692, 694, 3, 84, 42, 0, 693, 692, 1, 0, 0, 0, 694, 697, 1, 0, 0, 0,
		695, 693, 1, 0, 0, 0, 695, 696, 1, 0, 0, 0, 696, 698, 1, 0, 0, 0, 697,
		695, 1, 0, 0, 0, 698, 699, 5, 2, 0, 0, 699, 83, 1, 0, 0, 0, 700, 701, 5,
		78, 0, 0, 701, 702, 3, 94, 47, 0, 702, 705, 7, 0, 0, 0, 703, 706, 3, 62,
		31, 0, 704, 706, 3, 128, 64, 0, 705, 703, 1, 0, 0, 0, 705, 704, 1, 0, 0,
		0, 706, 85, 1, 0, 0, 0, 707, 709, 5, 74, 0, 0, 708, 710, 3, 134, 67, 0,
		709, 708, 1, 0, 0, 0, 709, 710, 1, 0, 0, 0, 710, 711, 1, 0, 0, 0, 711,
		712, 5, 7, 0, 0, 712, 87, 1, 0, 0, 0, 713, 715, 5, 75, 0, 0, 714, 716,
		3, 134, 67, 0, 715, 714, 1, 0, 0, 0, 715, 716, 1, 0, 0, 0, 716, 717, 1,
		0, 0, 0, 717, 718, 5, 7, 0, 0, 718, 89, 1, 0, 0, 0, 719, 720, 3, 128, 64,
		0, 720, 91, 1, 0, 0, 0, 721, 722, 5, 83, 0, 0, 722, 723, 3, 128, 64, 0,
		723, 93, 1, 0, 0, 0, 724, 725, 6, 47, -1, 0, 725, 756, 3, 134, 67, 0, 726,
		756, 5, 50, 0, 0, 727, 756, 3, 132, 66, 0, 728, 729, 3, 134, 67, 0, 729,
		731, 5, 3, 0, 0, 730, 732, 3, 96, 48, 0, 731, 730, 1, 0, 0, 0, 731, 732,
		1, 0, 0, 0, 732, 733, 1, 0, 0, 0, 733, 734, 5, 4, 0, 0, 734, 756, 1, 0,
		0, 0, 735, 736, 5, 63, 0, 0, 736, 739, 3, 134, 67, 0, 737, 738, 5, 8, 0,
		0, 738, 740, 3, 58, 29, 0, 739, 737, 1, 0, 0, 0, 739, 740, 1, 0, 0, 0,
		740, 743, 1, 0, 0, 0, 741, 742, 5, 68, 0, 0, 742, 744, 3, 102, 51, 0, 743,
		741, 1, 0, 0, 0, 743, 744, 1, 0, 0, 0, 744, 756, 1, 0, 0, 0, 745, 746,
		3, 134, 67, 0, 746, 747, 5, 1, 0, 0, 747, 748, 3, 100, 50, 0, 748, 749,
		5, 2, 0, 0, 749, 756, 1, 0, 0, 0, 750, 752, 5, 3, 0, 0, 751, 753, 3, 96,
		48, 0, 752, 751, 1, 0, 0, 0, 752, 753, 1, 0, 0, 0, 753, 754, 1, 0, 0, 0,
		754, 756, 5, 4, 0, 0, 755, 724, 1, 0, 0, 0, 755, 726, 1, 0, 0, 0, 755,
		727, 1, 0, 0, 0, 755, 728, 1, 0, 0, 0, 755, 735, 1, 0, 0, 0, 755, 745,
		1, 0, 0, 0, 755, 750, 1, 0, 0, 0, 756, 762, 1, 0, 0, 0, 757, 758, 10, 5,
		0, 0, 758, 759, 5, 46, 0, 0, 759, 761, 3, 94, 47, 6, 760, 757, 1, 0, 0,
		0, 761, 764, 1, 0, 0, 0, 762, 760, 1, 0, 0, 0, 762, 763, 1, 0, 0, 0, 763,
		95, 1, 0, 0, 0, 764, 762, 1, 0, 0, 0, 765, 770, 3, 94, 47, 0, 766, 767,
		5, 9, 0, 0, 767, 769, 3, 94, 47, 0, 768, 766, 1, 0, 0, 0, 769, 772, 1,
		0, 0, 0, 770, 768, 1, 0, 0, 0, 770, 771, 1, 0, 0, 0, 771, 97, 1, 0, 0,
		0, 772, 770, 1, 0, 0, 0, 773, 774, 3, 134, 67, 0, 774, 775, 5, 8, 0, 0,
		775, 776, 3, 94, 47, 0, 776, 780, 1, 0, 0, 0, 777, 780, 3, 134, 67, 0,
		778, 780, 5, 46, 0, 0, 779, 773, 1, 0, 0, 0, 779, 777, 1, 0, 0, 0, 779,
		778, 1, 0, 0, 0, 780, 99, 1, 0, 0, 0, 781, 786, 3, 98, 49, 0, 782, 783,
		5, 9, 0, 0, 783, 785, 3, 98, 49, 0, 784, 782, 1, 0, 0, 0, 785, 788, 1,
		0, 0, 0, 786, 784, 1, 0, 0, 0, 786, 787, 1, 0, 0, 0, 787, 101, 1, 0, 0,
		0, 788, 786, 1, 0, 0, 0, 789, 790, 6, 51, -1, 0, 790, 828, 3, 106, 53,
		0, 791, 792, 7, 1, 0, 0, 792, 828, 3, 102, 51, 19, 793, 794, 5, 80, 0,
		0, 794, 828, 3, 102, 51, 18, 795, 796, 5, 81, 0, 0, 796, 828, 3, 102, 51,
		17, 797, 828, 3, 108, 54, 0, 798, 828, 3, 110, 55, 0, 799, 800, 5, 68,
		0, 0, 800, 801, 3, 102, 51, 0, 801, 809, 3, 128, 64, 0, 802, 803, 5, 69,
		0, 0, 803, 804, 5, 68, 0, 0, 804, 805, 3, 102, 51, 0, 805, 806, 3, 128,
		64, 0, 806, 808, 1, 0, 0, 0, 807, 802, 1, 0, 0, 0, 808, 811, 1, 0, 0, 0,
		809, 807, 1, 0, 0, 0, 809, 810, 1, 0, 0, 0, 810, 814, 1, 0, 0, 0, 811,
		809, 1, 0, 0, 0, 812, 813, 5, 69, 0, 0, 813, 815, 3, 128, 64, 0, 814, 812,
		1, 0, 0, 0, 814, 815, 1, 0, 0, 0, 815, 828, 1, 0, 0, 0, 816, 817, 5, 77,
		0, 0, 817, 818, 3, 102, 51, 0, 818, 822, 5, 1, 0, 0, 819, 821, 3, 104,
		52, 0, 820, 819, 1, 0, 0, 0, 821, 824, 1, 0, 0, 0, 822, 820, 1, 0, 0, 0,
		822, 823, 1, 0, 0, 0, 823, 825, 1, 0, 0, 0, 824, 822, 1, 0, 0, 0, 825,
		826, 5, 2, 0, 0, 826, 828, 1, 0, 0, 0, 827, 789, 1, 0, 0, 0, 827, 791,
		1, 0, 0, 0, 827, 793, 1, 0, 0, 0, 827, 795, 1, 0, 0, 0, 827, 797, 1, 0,
		0, 0, 827, 798, 1, 0, 0, 0, 827, 799, 1, 0, 0, 0, 827, 816, 1, 0, 0, 0,
		828, 895, 1, 0, 0, 0, 829, 830, 10, 16, 0, 0, 830, 831, 7, 2, 0, 0, 831,
		894, 3, 102, 51, 17, 832, 833, 10, 15, 0, 0, 833, 834, 7, 3, 0, 0, 834,
		894, 3, 102, 51, 16, 835, 836, 10, 14, 0, 0, 836, 837, 7, 4, 0, 0, 837,
		894, 3, 102, 51, 15, 838, 839, 10, 13, 0, 0, 839, 840, 7, 5, 0, 0, 840,
		894, 3, 102, 51, 14, 841, 842, 10, 12, 0, 0, 842, 843, 7, 6, 0, 0, 843,
		894, 3, 102, 51, 13, 844, 845, 10, 11, 0, 0, 845, 846, 5, 18, 0, 0, 846,
		894, 3, 102, 51, 12, 847, 848, 10, 10, 0, 0, 848, 849, 5, 20, 0, 0, 849,
		894, 3, 102, 51, 11, 850, 851, 10, 9, 0, 0, 851, 852, 5, 19, 0, 0, 852,
		894, 3, 102, 51, 10, 853, 854, 10, 8, 0, 0, 854, 855, 5, 24, 0, 0, 855,
		894, 3, 102, 51, 9, 856, 857, 10, 7, 0, 0, 857, 858, 5, 25, 0, 0, 858,
		894, 3, 102, 51, 8, 859, 860, 10, 6, 0, 0, 860, 861, 5, 44, 0, 0, 861,
		862, 3, 102, 51, 0, 862, 863, 5, 8, 0, 0, 863, 864, 3, 102, 51, 7, 864,
		894, 1, 0, 0, 0, 865, 866, 10, 5, 0, 0, 866, 867, 7, 7, 0, 0, 867, 894,
		3, 102, 51, 6, 868, 869, 10, 24, 0, 0, 869, 870, 5, 10, 0, 0, 870, 894,
		3, 134, 67, 0, 871, 872, 10, 23, 0, 0, 872, 873, 5, 10, 0, 0, 873, 874,
		3, 134, 67, 0, 874, 876, 5, 3, 0, 0, 875, 877, 3, 130, 65, 0, 876, 875,
		1, 0, 0, 0, 876, 877, 1, 0, 0, 0, 877, 878, 1, 0, 0, 0, 878, 879, 5, 4,
		0, 0, 879, 894, 1, 0, 0, 0, 880, 881, 10, 22, 0, 0, 881, 882, 5, 5, 0,
		0, 882, 883, 3, 102, 51, 0, 883, 884, 5, 6, 0, 0, 884, 894, 1, 0, 0, 0,
		885, 886, 10, 21, 0, 0, 886, 888, 5, 3, 0, 0, 887, 889, 3, 130, 65, 0,
		888, 887, 1, 0, 0, 0, 888, 889, 1, 0, 0, 0, 889, 890, 1, 0, 0, 0, 890,
		894, 5, 4, 0, 0, 891, 892, 10, 20, 0, 0, 892, 894, 7, 8, 0, 0, 893, 829,
		1, 0, 0, 0, 893, 832, 1, 0, 0, 0, 893, 835, 1, 0, 0, 0, 893, 838, 1, 0,
		0, 0, 893, 841, 1, 0, 0, 0, 893, 844, 1, 0, 0, 0, 893, 847, 1, 0, 0, 0,
		893, 850, 1, 0, 0, 0, 893, 853, 1, 0, 0, 0, 893, 856, 1, 0, 0, 0, 893,
		859, 1, 0, 0, 0, 893, 865, 1, 0, 0, 0, 893, 868, 1, 0, 0, 0, 893, 871,
		1, 0, 0, 0, 893, 880, 1, 0, 0, 0, 893, 885, 1, 0, 0, 0, 893, 891, 1, 0,
		0, 0, 894, 897, 1, 0, 0, 0, 895, 893, 1, 0, 0, 0, 895, 896, 1, 0, 0, 0,
		896, 103, 1, 0, 0, 0, 897, 895, 1, 0, 0, 0, 898, 899, 5, 78, 0, 0, 899,
		900, 3, 94, 47, 0, 900, 901, 7, 0, 0, 0, 901, 902, 3, 102, 51, 0, 902,
		105, 1, 0, 0, 0, 903, 916, 3, 134, 67, 0, 904, 916, 3, 132, 66, 0, 905,
		906, 5, 3, 0, 0, 906, 907, 3, 102, 51, 0, 907, 908, 5, 4, 0, 0, 908, 916,
		1, 0, 0, 0, 909, 916, 3, 128, 64, 0, 910, 916, 3, 112, 56, 0, 911, 916,
		3, 118, 59, 0, 912, 916, 3, 120, 60, 0, 913, 916, 3, 124, 62, 0, 914, 916,
		3, 126, 63, 0, 915, 903, 1, 0, 0, 0, 915, 904, 1, 0, 0, 0, 915, 905, 1,
		0, 0, 0, 915, 909, 1, 0, 0, 0, 915, 910, 1, 0, 0, 0, 915, 911, 1, 0, 0,
		0, 915, 912, 1, 0, 0, 0, 915, 913, 1, 0, 0, 0, 915, 914, 1, 0, 0, 0, 916,
		107, 1, 0, 0, 0, 917, 919, 5, 80, 0, 0, 918, 917, 1, 0, 0, 0, 918, 919,
		1, 0, 0, 0, 919, 920, 1, 0, 0, 0, 920, 922, 5, 19, 0, 0, 921, 923, 3, 14,
		7, 0, 922, 921, 1, 0, 0, 0, 922, 923, 1, 0, 0, 0, 923, 924, 1, 0, 0, 0,
		924, 931, 5, 19, 0, 0, 925, 926, 5, 11, 0, 0, 926, 928, 3, 58, 29, 0, 927,
		925, 1, 0, 0, 0, 927, 928, 1, 0, 0, 0, 928, 929, 1, 0, 0, 0, 929, 932,
		3, 128, 64, 0, 930, 932, 3, 102, 51, 0, 931, 927, 1, 0, 0, 0, 931, 930,
		1, 0, 0, 0, 932, 109, 1, 0, 0, 0, 933, 934, 5, 82, 0, 0, 934, 935, 3, 128,
		64, 0, 935, 111, 1, 0, 0, 0, 936, 937, 3, 134, 67, 0, 937, 938, 5, 1, 0,
		0, 938, 939, 3, 114, 57, 0, 939, 940, 5, 2, 0, 0, 940, 113, 1, 0, 0, 0,
		941, 946, 3, 116, 58, 0, 942, 943, 5, 9, 0, 0, 943, 945, 3, 116, 58, 0,
		944, 942, 1, 0, 0, 0, 945, 948, 1, 0, 0, 0, 946, 944, 1, 0, 0, 0, 946,
		947, 1, 0, 0, 0, 947, 950, 1, 0, 0, 0, 948, 946, 1, 0, 0, 0, 949, 951,
		5, 9, 0, 0, 950, 949, 1, 0, 0, 0, 950, 951, 1, 0, 0, 0, 951, 115, 1, 0,
		0, 0, 952, 953, 3, 134, 67, 0, 953, 954, 5, 8, 0, 0, 954, 955, 3, 102,
		51, 0, 955, 960, 1, 0, 0, 0, 956, 960, 3, 134, 67, 0, 957, 958, 5, 46,
		0, 0, 958, 960, 3, 102, 51, 0, 959, 952, 1, 0, 0, 0, 959, 956, 1, 0, 0,
		0, 959, 957, 1, 0, 0, 0, 960, 117, 1, 0, 0, 0, 961, 970, 5, 5, 0, 0, 962,
		967, 3, 102, 51, 0, 963, 964, 5, 9, 0, 0, 964, 966, 3, 102, 51, 0, 965,
		963, 1, 0, 0, 0, 966, 969, 1, 0, 0, 0, 967, 965, 1, 0, 0, 0, 967, 968,
		1, 0, 0, 0, 968, 971, 1, 0, 0, 0, 969, 967, 1, 0, 0, 0, 970, 962, 1, 0,
		0, 0, 970, 971, 1, 0, 0, 0, 971, 973, 1, 0, 0, 0, 972, 974, 5, 9, 0, 0,
		973, 972, 1, 0, 0, 0, 973, 974, 1, 0, 0, 0, 974, 975, 1, 0, 0, 0, 975,
		989, 5, 6, 0, 0, 976, 977, 5, 5, 0, 0, 977, 978, 3, 102, 51, 0, 978, 979,
		5, 72, 0, 0, 979, 980, 3, 134, 67, 0, 980, 981, 5, 73, 0, 0, 981, 984,
		3, 102, 51, 0, 982, 983, 5, 68, 0, 0, 983, 985, 3, 102, 51, 0, 984, 982,
		1, 0, 0, 0, 984, 985, 1, 0, 0, 0, 985, 986, 1, 0, 0, 0, 986, 987, 5, 6,
		0, 0, 987, 989, 1, 0, 0, 0, 988, 961, 1, 0, 0, 0, 988, 976, 1, 0, 0, 0,
		989, 119, 1, 0, 0, 0, 990, 999, 5, 1, 0, 0, 991, 996, 3, 122, 61, 0, 992,
		993, 5, 9, 0, 0, 993, 995, 3, 122, 61, 0, 994, 992, 1, 0, 0, 0, 995, 998,
		1, 0, 0, 0, 996, 994, 1, 0, 0, 0, 996, 997, 1, 0, 0, 0, 997, 1000, 1, 0,
		0, 0, 998, 996, 1, 0, 0, 0, 999, 991, 1, 0, 0, 0, 999, 1000, 1, 0, 0, 0,
		1000, 1002, 1, 0, 0, 0, 1001, 1003, 5, 9, 0, 0, 1002, 1001, 1, 0, 0, 0,
		1002, 1003, 1, 0, 0, 0, 1003, 1004, 1, 0, 0, 0, 1004, 1005, 5, 2, 0, 0,
		1005, 121, 1, 0, 0, 0, 1006, 1007, 3, 102, 51, 0, 1007, 1008, 5, 8, 0,
		0, 1008, 1009, 3, 102, 51, 0, 1009, 123, 1, 0, 0, 0, 1010, 1019, 5, 1,
		0, 0, 1011, 1016, 3, 102, 51, 0, 1012, 1013, 5, 9, 0, 0, 1013, 1015, 3,
		102, 51, 0, 1014, 1012, 1, 0, 0, 0, 1015, 1018, 1, 0, 0, 0, 1016, 1014,
		1, 0, 0, 0, 1016, 1017, 1, 0, 0, 0, 1017, 1020, 1, 0, 0, 0, 1018, 1016,
		1, 0, 0, 0, 1019, 1011, 1, 0, 0, 0, 1019, 1020, 1, 0, 0, 0, 1020, 1022,
		1, 0, 0, 0, 1021, 1023, 5, 9, 0, 0, 1022, 1021, 1, 0, 0, 0, 1022, 1023,
		1, 0, 0, 0, 1023, 1024, 1, 0, 0, 0, 1024, 1025, 5, 2, 0, 0, 1025, 125,
		1, 0, 0, 0, 1026, 1035, 5, 3, 0, 0, 1027, 1032, 3, 102, 51, 0, 1028, 1029,
		5, 9, 0, 0, 1029, 1031, 3, 102, 51, 0, 1030, 1028, 1, 0, 0, 0, 1031, 1034,
		1, 0, 0, 0, 1032, 1030, 1, 0, 0, 0, 1032, 1033, 1, 0, 0, 0, 1033, 1036,
		1, 0, 0, 0, 1034, 1032, 1, 0, 0, 0, 1035, 1027, 1, 0, 0, 0, 1035, 1036,
		1, 0, 0, 0, 1036, 1038, 1, 0, 0, 0, 1037, 1039, 5, 9, 0, 0, 1038, 1037,
		1, 0, 0, 0, 1038, 1039, 1, 0, 0, 0, 1039, 1040, 1, 0, 0, 0, 1040, 1041,
		5, 4, 0, 0, 1041, 127, 1, 0, 0, 0, 1042, 1046, 5, 1, 0, 0, 1043, 1045,
		3, 62, 31, 0, 1044, 1043, 1, 0, 0, 0, 1045, 1048, 1, 0, 0, 0, 1046, 1044,
		1, 0, 0, 0, 1046, 1047, 1, 0, 0, 0, 1047, 1050, 1, 0, 0, 0, 1048, 1046,
		1, 0, 0, 0, 1049, 1051, 3, 102, 51, 0, 1050, 1049, 1, 0, 0, 0, 1050, 1051,
		1, 0, 0, 0, 1051, 1052, 1, 0, 0, 0, 1052, 1053, 5, 2, 0, 0, 1053, 129,
		1, 0, 0, 0, 1054, 1059, 3, 102, 51, 0, 1055, 1056, 5, 9, 0, 0, 1056, 1058,
		3, 102, 51, 0, 1057, 1055, 1, 0, 0, 0, 1058, 1061, 1, 0, 0, 0, 1059, 1057,
		1, 0, 0, 0, 1059, 1060, 1, 0, 0, 0, 1060, 131, 1, 0, 0, 0, 1061, 1059,
		1, 0, 0, 0, 1062, 1063, 7, 9, 0, 0, 1063, 133, 1, 0, 0, 0, 1064, 1065,
		5, 85, 0, 0, 1065, 135, 1, 0, 0, 0, 126, 139, 152, 160, 169, 180, 187,
		193, 199, 203, 207, 210, 215, 219, 224, 227, 236, 253, 261, 269, 276, 285,
		293, 298, 304, 310, 317, 320, 325, 333, 343, 350, 356, 361, 366, 372, 382,
		387, 391, 396, 403, 407, 412, 416, 420, 426, 432, 439, 443, 449, 454, 463,
		466, 471, 477, 483, 491, 496, 499, 504, 511, 516, 527, 530, 546, 551, 567,
		577, 579, 581, 589, 606, 610, 615, 627, 640, 654, 659, 664, 672, 681, 695,
		705, 709, 715, 731, 739, 743, 752, 755, 762, 770, 779, 786, 809, 814, 822,
		827, 876, 888, 893, 895, 915, 918, 922, 927, 931, 946, 950, 959, 967, 970,
		973, 984, 988, 996, 999, 1002, 1016, 1019, 1022, 1032, 1035, 1038, 1046,
		1050, 1059,
	}
	deserializer := antlr.NewATNDeserializer(nil)
	staticData.atn = deserializer.Deserialize(staticData.serializedATN)
	atn := staticData.atn
	staticData.decisionToDFA = make([]*antlr.DFA, len(atn.DecisionToState))
	decisionToDFA := staticData.decisionToDFA
	for index, state := range atn.DecisionToState {
		decisionToDFA[index] = antlr.NewDFA(state, index)
	}
}

// UnifiedParserInit initializes any static state used to implement UnifiedParser. By default the
// static state used to implement the parser is lazily initialized during the first call to
// NewUnifiedParser(). You can call this function if you wish to initialize the static state ahead
// of time.
func UnifiedParserInit() {
	staticData := &UnifiedParserParserStaticData
	staticData.once.Do(unifiedparserParserInit)
}

// NewUnifiedParser produces a new parser instance for the optional input antlr.TokenStream.
func NewUnifiedParser(input antlr.TokenStream) *UnifiedParser {
	UnifiedParserInit()
	this := new(UnifiedParser)
	this.BaseParser = antlr.NewBaseParser(input)
	staticData := &UnifiedParserParserStaticData
	this.Interpreter = antlr.NewParserATNSimulator(this, staticData.atn, staticData.decisionToDFA, staticData.PredictionContextCache)
	this.RuleNames = staticData.RuleNames
	this.LiteralNames = staticData.LiteralNames
	this.SymbolicNames = staticData.SymbolicNames
	this.GrammarFileName = "UnifiedParser.g4"

	return this
}

// UnifiedParser tokens.
const (
	UnifiedParserEOF                 = antlr.TokenEOF
	UnifiedParserLBRACE              = 1
	UnifiedParserRBRACE              = 2
	UnifiedParserLPAREN              = 3
	UnifiedParserRPAREN              = 4
	UnifiedParserLBRACK              = 5
	UnifiedParserRBRACK              = 6
	UnifiedParserSEMI                = 7
	UnifiedParserCOLON               = 8
	UnifiedParserCOMMA               = 9
	UnifiedParserDOT                 = 10
	UnifiedParserARROW               = 11
	UnifiedParserDOUBLE_COLON        = 12
	UnifiedParserPLUS                = 13
	UnifiedParserMINUS               = 14
	UnifiedParserSTAR                = 15
	UnifiedParserDIV                 = 16
	UnifiedParserMOD                 = 17
	UnifiedParserBIT_AND             = 18
	UnifiedParserBIT_OR              = 19
	UnifiedParserBIT_XOR             = 20
	UnifiedParserBIT_NOT             = 21
	UnifiedParserLSHIFT              = 22
	UnifiedParserRSHIFT              = 23
	UnifiedParserAND                 = 24
	UnifiedParserOR                  = 25
	UnifiedParserNOT                 = 26
	UnifiedParserEQ                  = 27
	UnifiedParserNE                  = 28
	UnifiedParserLT                  = 29
	UnifiedParserGT                  = 30
	UnifiedParserLE                  = 31
	UnifiedParserGE                  = 32
	UnifiedParserASSIGN              = 33
	UnifiedParserPLUS_ASSIGN         = 34
	UnifiedParserMINUS_ASSIGN        = 35
	UnifiedParserSTAR_ASSIGN         = 36
	UnifiedParserDIV_ASSIGN          = 37
	UnifiedParserMOD_ASSIGN          = 38
	UnifiedParserLSHIFT_ASSIGN       = 39
	UnifiedParserRSHIFT_ASSIGN       = 40
	UnifiedParserAND_ASSIGN          = 41
	UnifiedParserXOR_ASSIGN          = 42
	UnifiedParserOR_ASSIGN           = 43
	UnifiedParserQUESTION            = 44
	UnifiedParserNULL_COND           = 45
	UnifiedParserRANGE               = 46
	UnifiedParserRANGE_INCL          = 47
	UnifiedParserINC                 = 48
	UnifiedParserDEC                 = 49
	UnifiedParserUNDERSCORE          = 50
	UnifiedParserMODULE              = 51
	UnifiedParserIMPORT              = 52
	UnifiedParserAS                  = 53
	UnifiedParserFN                  = 54
	UnifiedParserSTRUCT              = 55
	UnifiedParserENUM                = 56
	UnifiedParserINTERFACE           = 57
	UnifiedParserIMPL                = 58
	UnifiedParserACTOR               = 59
	UnifiedParserTYPE                = 60
	UnifiedParserREFINE              = 61
	UnifiedParserCONST               = 62
	UnifiedParserLET                 = 63
	UnifiedParserVAR                 = 64
	UnifiedParserMUT                 = 65
	UnifiedParserPUB                 = 66
	UnifiedParserSELF                = 67
	UnifiedParserIF                  = 68
	UnifiedParserELSE                = 69
	UnifiedParserLOOP                = 70
	UnifiedParserWHILE               = 71
	UnifiedParserFOR                 = 72
	UnifiedParserIN                  = 73
	UnifiedParserBREAK               = 74
	UnifiedParserCONTINUE            = 75
	UnifiedParserRETURN              = 76
	UnifiedParserSWITCH              = 77
	UnifiedParserCASE                = 78
	UnifiedParserWHERE               = 79
	UnifiedParserMOVE                = 80
	UnifiedParserAWAIT               = 81
	UnifiedParserASYNC               = 82
	UnifiedParserTRY                 = 83
	UnifiedParserREGION              = 84
	UnifiedParserIdentifier          = 85
	UnifiedParserIntLiteral          = 86
	UnifiedParserFloatLiteral        = 87
	UnifiedParserCharLiteral         = 88
	UnifiedParserBoolLiteral         = 89
	UnifiedParserNullLiteral         = 90
	UnifiedParserStringLiteral       = 91
	UnifiedParserInterpolation       = 92
	UnifiedParserEscapeSequence      = 93
	UnifiedParserWS                  = 94
	UnifiedParserCOMMENT             = 95
	UnifiedParserMULTILINE_COMMENT   = 96
	UnifiedParserINTERPOLATION_CLOSE = 97
	UnifiedParserINTERPOLATION_TEXT  = 98
	UnifiedParserNESTED_OPEN         = 99
)

// UnifiedParser rules.
const (
	UnifiedParserRULE_program           = 0
	UnifiedParserRULE_item              = 1
	UnifiedParserRULE_moduleDecl        = 2
	UnifiedParserRULE_importDecl        = 3
	UnifiedParserRULE_importPath        = 4
	UnifiedParserRULE_importList        = 5
	UnifiedParserRULE_functionDecl      = 6
	UnifiedParserRULE_paramList         = 7
	UnifiedParserRULE_parameter         = 8
	UnifiedParserRULE_genericParams     = 9
	UnifiedParserRULE_genericParam      = 10
	UnifiedParserRULE_typeConstraint    = 11
	UnifiedParserRULE_whereClause       = 12
	UnifiedParserRULE_whereConstraint   = 13
	UnifiedParserRULE_structDecl        = 14
	UnifiedParserRULE_structMember      = 15
	UnifiedParserRULE_enumDecl          = 16
	UnifiedParserRULE_enumVariant       = 17
	UnifiedParserRULE_enumVariantParams = 18
	UnifiedParserRULE_enumVariantParam  = 19
	UnifiedParserRULE_interfaceDecl     = 20
	UnifiedParserRULE_interfaceMember   = 21
	UnifiedParserRULE_functionSig       = 22
	UnifiedParserRULE_implDecl          = 23
	UnifiedParserRULE_implMember        = 24
	UnifiedParserRULE_actorDecl         = 25
	UnifiedParserRULE_actorMember       = 26
	UnifiedParserRULE_typeAlias         = 27
	UnifiedParserRULE_constantDecl      = 28
	UnifiedParserRULE_type              = 29
	UnifiedParserRULE_typeList          = 30
	UnifiedParserRULE_statement         = 31
	UnifiedParserRULE_letStatement      = 32
	UnifiedParserRULE_varStatement      = 33
	UnifiedParserRULE_regionStatement   = 34
	UnifiedParserRULE_exprStatement     = 35
	UnifiedParserRULE_returnStatement   = 36
	UnifiedParserRULE_ifStatement       = 37
	UnifiedParserRULE_loopStatement     = 38
	UnifiedParserRULE_whileStatement    = 39
	UnifiedParserRULE_forStatement      = 40
	UnifiedParserRULE_switchStatement   = 41
	UnifiedParserRULE_caseClause        = 42
	UnifiedParserRULE_breakStatement    = 43
	UnifiedParserRULE_continueStatement = 44
	UnifiedParserRULE_blockStatement    = 45
	UnifiedParserRULE_tryStatement      = 46
	UnifiedParserRULE_pattern           = 47
	UnifiedParserRULE_patternList       = 48
	UnifiedParserRULE_fieldPattern      = 49
	UnifiedParserRULE_fieldPatternList  = 50
	UnifiedParserRULE_expr              = 51
	UnifiedParserRULE_caseExpr          = 52
	UnifiedParserRULE_primary           = 53
	UnifiedParserRULE_lambdaExpr        = 54
	UnifiedParserRULE_asyncExpr         = 55
	UnifiedParserRULE_structExpr        = 56
	UnifiedParserRULE_fieldInitList     = 57
	UnifiedParserRULE_fieldInit         = 58
	UnifiedParserRULE_listExpr          = 59
	UnifiedParserRULE_mapExpr           = 60
	UnifiedParserRULE_keyValue          = 61
	UnifiedParserRULE_setExpr           = 62
	UnifiedParserRULE_tupleExpr         = 63
	UnifiedParserRULE_block             = 64
	UnifiedParserRULE_argList           = 65
	UnifiedParserRULE_literal           = 66
	UnifiedParserRULE_identifier        = 67
)

// IProgramContext is an interface to support dynamic dispatch.
type IProgramContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllItem() []IItemContext
	Item(i int) IItemContext

	// IsProgramContext differentiates from other interfaces.
	IsProgramContext()
}

type ProgramContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyProgramContext() *ProgramContext {
	var p = new(ProgramContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_program
	return p
}

func InitEmptyProgramContext(p *ProgramContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_program
}

func (*ProgramContext) IsProgramContext() {}

func NewProgramContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ProgramContext {
	var p = new(ProgramContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_program

	return p
}

func (s *ProgramContext) GetParser() antlr.Parser { return s.parser }

func (s *ProgramContext) AllItem() []IItemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IItemContext); ok {
			len++
		}
	}

	tst := make([]IItemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IItemContext); ok {
			tst[i] = t.(IItemContext)
			i++
		}
	}

	return tst
}

func (s *ProgramContext) Item(i int) IItemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IItemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IItemContext)
}

func (s *ProgramContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ProgramContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ProgramContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterProgram(s)
	}
}

func (s *ProgramContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitProgram(s)
	}
}

func (s *ProgramContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitProgram(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) Program() (localctx IProgramContext) {
	localctx = NewProgramContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 0, UnifiedParserRULE_program)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(139)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-51)) & ^0x3f) == 0 && ((int64(1)<<(_la-51))&35835) != 0 {
		{
			p.SetState(136)
			p.Item()
		}

		p.SetState(141)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IItemContext is an interface to support dynamic dispatch.
type IItemContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ModuleDecl() IModuleDeclContext
	FunctionDecl() IFunctionDeclContext
	StructDecl() IStructDeclContext
	EnumDecl() IEnumDeclContext
	InterfaceDecl() IInterfaceDeclContext
	ImplDecl() IImplDeclContext
	ActorDecl() IActorDeclContext
	TypeAlias() ITypeAliasContext
	ImportDecl() IImportDeclContext
	ConstantDecl() IConstantDeclContext

	// IsItemContext differentiates from other interfaces.
	IsItemContext()
}

type ItemContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyItemContext() *ItemContext {
	var p = new(ItemContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_item
	return p
}

func InitEmptyItemContext(p *ItemContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_item
}

func (*ItemContext) IsItemContext() {}

func NewItemContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ItemContext {
	var p = new(ItemContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_item

	return p
}

func (s *ItemContext) GetParser() antlr.Parser { return s.parser }

func (s *ItemContext) ModuleDecl() IModuleDeclContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IModuleDeclContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IModuleDeclContext)
}

func (s *ItemContext) FunctionDecl() IFunctionDeclContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionDeclContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclContext)
}

func (s *ItemContext) StructDecl() IStructDeclContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructDeclContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructDeclContext)
}

func (s *ItemContext) EnumDecl() IEnumDeclContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumDeclContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumDeclContext)
}

func (s *ItemContext) InterfaceDecl() IInterfaceDeclContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceDeclContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceDeclContext)
}

func (s *ItemContext) ImplDecl() IImplDeclContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImplDeclContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImplDeclContext)
}

func (s *ItemContext) ActorDecl() IActorDeclContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IActorDeclContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IActorDeclContext)
}

func (s *ItemContext) TypeAlias() ITypeAliasContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeAliasContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeAliasContext)
}

func (s *ItemContext) ImportDecl() IImportDeclContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImportDeclContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImportDeclContext)
}

func (s *ItemContext) ConstantDecl() IConstantDeclContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IConstantDeclContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IConstantDeclContext)
}

func (s *ItemContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ItemContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ItemContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterItem(s)
	}
}

func (s *ItemContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitItem(s)
	}
}

func (s *ItemContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitItem(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) Item() (localctx IItemContext) {
	localctx = NewItemContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 2, UnifiedParserRULE_item)
	p.SetState(152)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 1, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(142)
			p.ModuleDecl()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(143)
			p.FunctionDecl()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(144)
			p.StructDecl()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(145)
			p.EnumDecl()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(146)
			p.InterfaceDecl()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(147)
			p.ImplDecl()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(148)
			p.ActorDecl()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(149)
			p.TypeAlias()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(150)
			p.ImportDecl()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(151)
			p.ConstantDecl()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IModuleDeclContext is an interface to support dynamic dispatch.
type IModuleDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	MODULE() antlr.TerminalNode
	Identifier() IIdentifierContext
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	AllItem() []IItemContext
	Item(i int) IItemContext

	// IsModuleDeclContext differentiates from other interfaces.
	IsModuleDeclContext()
}

type ModuleDeclContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyModuleDeclContext() *ModuleDeclContext {
	var p = new(ModuleDeclContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_moduleDecl
	return p
}

func InitEmptyModuleDeclContext(p *ModuleDeclContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_moduleDecl
}

func (*ModuleDeclContext) IsModuleDeclContext() {}

func NewModuleDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ModuleDeclContext {
	var p = new(ModuleDeclContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_moduleDecl

	return p
}

func (s *ModuleDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *ModuleDeclContext) MODULE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserMODULE, 0)
}

func (s *ModuleDeclContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ModuleDeclContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLBRACE, 0)
}

func (s *ModuleDeclContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRBRACE, 0)
}

func (s *ModuleDeclContext) AllItem() []IItemContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IItemContext); ok {
			len++
		}
	}

	tst := make([]IItemContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IItemContext); ok {
			tst[i] = t.(IItemContext)
			i++
		}
	}

	return tst
}

func (s *ModuleDeclContext) Item(i int) IItemContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IItemContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IItemContext)
}

func (s *ModuleDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ModuleDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ModuleDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterModuleDecl(s)
	}
}

func (s *ModuleDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitModuleDecl(s)
	}
}

func (s *ModuleDeclContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitModuleDecl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) ModuleDecl() (localctx IModuleDeclContext) {
	localctx = NewModuleDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 4, UnifiedParserRULE_moduleDecl)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(154)
		p.Match(UnifiedParserMODULE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(155)
		p.Identifier()
	}
	{
		p.SetState(156)
		p.Match(UnifiedParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(160)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-51)) & ^0x3f) == 0 && ((int64(1)<<(_la-51))&35835) != 0 {
		{
			p.SetState(157)
			p.Item()
		}

		p.SetState(162)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(163)
		p.Match(UnifiedParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IImportDeclContext is an interface to support dynamic dispatch.
type IImportDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IMPORT() antlr.TerminalNode
	ImportPath() IImportPathContext
	SEMI() antlr.TerminalNode
	AS() antlr.TerminalNode
	Identifier() IIdentifierContext
	LBRACE() antlr.TerminalNode
	ImportList() IImportListContext
	RBRACE() antlr.TerminalNode

	// IsImportDeclContext differentiates from other interfaces.
	IsImportDeclContext()
}

type ImportDeclContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportDeclContext() *ImportDeclContext {
	var p = new(ImportDeclContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_importDecl
	return p
}

func InitEmptyImportDeclContext(p *ImportDeclContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_importDecl
}

func (*ImportDeclContext) IsImportDeclContext() {}

func NewImportDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportDeclContext {
	var p = new(ImportDeclContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_importDecl

	return p
}

func (s *ImportDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportDeclContext) IMPORT() antlr.TerminalNode {
	return s.GetToken(UnifiedParserIMPORT, 0)
}

func (s *ImportDeclContext) ImportPath() IImportPathContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImportPathContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImportPathContext)
}

func (s *ImportDeclContext) SEMI() antlr.TerminalNode {
	return s.GetToken(UnifiedParserSEMI, 0)
}

func (s *ImportDeclContext) AS() antlr.TerminalNode {
	return s.GetToken(UnifiedParserAS, 0)
}

func (s *ImportDeclContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ImportDeclContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLBRACE, 0)
}

func (s *ImportDeclContext) ImportList() IImportListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImportListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImportListContext)
}

func (s *ImportDeclContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRBRACE, 0)
}

func (s *ImportDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterImportDecl(s)
	}
}

func (s *ImportDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitImportDecl(s)
	}
}

func (s *ImportDeclContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitImportDecl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) ImportDecl() (localctx IImportDeclContext) {
	localctx = NewImportDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 6, UnifiedParserRULE_importDecl)
	var _la int

	p.SetState(180)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 4, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(165)
			p.Match(UnifiedParserIMPORT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(166)
			p.ImportPath()
		}
		p.SetState(169)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == UnifiedParserAS {
			{
				p.SetState(167)
				p.Match(UnifiedParserAS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(168)
				p.Identifier()
			}

		}
		{
			p.SetState(171)
			p.Match(UnifiedParserSEMI)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(173)
			p.Match(UnifiedParserIMPORT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(174)
			p.ImportPath()
		}
		{
			p.SetState(175)
			p.Match(UnifiedParserLBRACE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(176)
			p.ImportList()
		}
		{
			p.SetState(177)
			p.Match(UnifiedParserRBRACE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(178)
			p.Match(UnifiedParserSEMI)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IImportPathContext is an interface to support dynamic dispatch.
type IImportPathContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	AllDOT() []antlr.TerminalNode
	DOT(i int) antlr.TerminalNode

	// IsImportPathContext differentiates from other interfaces.
	IsImportPathContext()
}

type ImportPathContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportPathContext() *ImportPathContext {
	var p = new(ImportPathContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_importPath
	return p
}

func InitEmptyImportPathContext(p *ImportPathContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_importPath
}

func (*ImportPathContext) IsImportPathContext() {}

func NewImportPathContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportPathContext {
	var p = new(ImportPathContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_importPath

	return p
}

func (s *ImportPathContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportPathContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *ImportPathContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ImportPathContext) AllDOT() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserDOT)
}

func (s *ImportPathContext) DOT(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserDOT, i)
}

func (s *ImportPathContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportPathContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportPathContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterImportPath(s)
	}
}

func (s *ImportPathContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitImportPath(s)
	}
}

func (s *ImportPathContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitImportPath(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) ImportPath() (localctx IImportPathContext) {
	localctx = NewImportPathContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 8, UnifiedParserRULE_importPath)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(182)
		p.Identifier()
	}
	p.SetState(187)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == UnifiedParserDOT {
		{
			p.SetState(183)
			p.Match(UnifiedParserDOT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(184)
			p.Identifier()
		}

		p.SetState(189)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IImportListContext is an interface to support dynamic dispatch.
type IImportListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	AllAS() []antlr.TerminalNode
	AS(i int) antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	STAR() antlr.TerminalNode

	// IsImportListContext differentiates from other interfaces.
	IsImportListContext()
}

type ImportListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImportListContext() *ImportListContext {
	var p = new(ImportListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_importList
	return p
}

func InitEmptyImportListContext(p *ImportListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_importList
}

func (*ImportListContext) IsImportListContext() {}

func NewImportListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImportListContext {
	var p = new(ImportListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_importList

	return p
}

func (s *ImportListContext) GetParser() antlr.Parser { return s.parser }

func (s *ImportListContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *ImportListContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ImportListContext) AllAS() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserAS)
}

func (s *ImportListContext) AS(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserAS, i)
}

func (s *ImportListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserCOMMA)
}

func (s *ImportListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOMMA, i)
}

func (s *ImportListContext) STAR() antlr.TerminalNode {
	return s.GetToken(UnifiedParserSTAR, 0)
}

func (s *ImportListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImportListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImportListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterImportList(s)
	}
}

func (s *ImportListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitImportList(s)
	}
}

func (s *ImportListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitImportList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) ImportList() (localctx IImportListContext) {
	localctx = NewImportListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 10, UnifiedParserRULE_importList)
	var _la int

	p.SetState(207)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case UnifiedParserIdentifier:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(190)
			p.Identifier()
		}
		p.SetState(193)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == UnifiedParserAS {
			{
				p.SetState(191)
				p.Match(UnifiedParserAS)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(192)
				p.Identifier()
			}

		}
		p.SetState(203)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == UnifiedParserCOMMA {
			{
				p.SetState(195)
				p.Match(UnifiedParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(196)
				p.Identifier()
			}
			p.SetState(199)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)

			if _la == UnifiedParserAS {
				{
					p.SetState(197)
					p.Match(UnifiedParserAS)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(198)
					p.Identifier()
				}

			}

			p.SetState(205)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}

	case UnifiedParserSTAR:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(206)
			p.Match(UnifiedParserSTAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunctionDeclContext is an interface to support dynamic dispatch.
type IFunctionDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FN() antlr.TerminalNode
	Identifier() IIdentifierContext
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	Block() IBlockContext
	PUB() antlr.TerminalNode
	GenericParams() IGenericParamsContext
	ParamList() IParamListContext
	ARROW() antlr.TerminalNode
	Type_() ITypeContext
	WhereClause() IWhereClauseContext

	// IsFunctionDeclContext differentiates from other interfaces.
	IsFunctionDeclContext()
}

type FunctionDeclContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionDeclContext() *FunctionDeclContext {
	var p = new(FunctionDeclContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_functionDecl
	return p
}

func InitEmptyFunctionDeclContext(p *FunctionDeclContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_functionDecl
}

func (*FunctionDeclContext) IsFunctionDeclContext() {}

func NewFunctionDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionDeclContext {
	var p = new(FunctionDeclContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_functionDecl

	return p
}

func (s *FunctionDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionDeclContext) FN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserFN, 0)
}

func (s *FunctionDeclContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *FunctionDeclContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLPAREN, 0)
}

func (s *FunctionDeclContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRPAREN, 0)
}

func (s *FunctionDeclContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *FunctionDeclContext) PUB() antlr.TerminalNode {
	return s.GetToken(UnifiedParserPUB, 0)
}

func (s *FunctionDeclContext) GenericParams() IGenericParamsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericParamsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericParamsContext)
}

func (s *FunctionDeclContext) ParamList() IParamListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParamListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParamListContext)
}

func (s *FunctionDeclContext) ARROW() antlr.TerminalNode {
	return s.GetToken(UnifiedParserARROW, 0)
}

func (s *FunctionDeclContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *FunctionDeclContext) WhereClause() IWhereClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhereClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *FunctionDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterFunctionDecl(s)
	}
}

func (s *FunctionDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitFunctionDecl(s)
	}
}

func (s *FunctionDeclContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitFunctionDecl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) FunctionDecl() (localctx IFunctionDeclContext) {
	localctx = NewFunctionDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 12, UnifiedParserRULE_functionDecl)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(210)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserPUB {
		{
			p.SetState(209)
			p.Match(UnifiedParserPUB)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(212)
		p.Match(UnifiedParserFN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(213)
		p.Identifier()
	}
	p.SetState(215)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserLT {
		{
			p.SetState(214)
			p.GenericParams()
		}

	}
	{
		p.SetState(217)
		p.Match(UnifiedParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(219)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserSELF || _la == UnifiedParserIdentifier {
		{
			p.SetState(218)
			p.ParamList()
		}

	}
	{
		p.SetState(221)
		p.Match(UnifiedParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(224)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserARROW {
		{
			p.SetState(222)
			p.Match(UnifiedParserARROW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(223)
			p.type_(0)
		}

	}
	p.SetState(227)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserWHERE {
		{
			p.SetState(226)
			p.WhereClause()
		}

	}
	{
		p.SetState(229)
		p.Block()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IParamListContext is an interface to support dynamic dispatch.
type IParamListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllParameter() []IParameterContext
	Parameter(i int) IParameterContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsParamListContext differentiates from other interfaces.
	IsParamListContext()
}

type ParamListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParamListContext() *ParamListContext {
	var p = new(ParamListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_paramList
	return p
}

func InitEmptyParamListContext(p *ParamListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_paramList
}

func (*ParamListContext) IsParamListContext() {}

func NewParamListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParamListContext {
	var p = new(ParamListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_paramList

	return p
}

func (s *ParamListContext) GetParser() antlr.Parser { return s.parser }

func (s *ParamListContext) AllParameter() []IParameterContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IParameterContext); ok {
			len++
		}
	}

	tst := make([]IParameterContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IParameterContext); ok {
			tst[i] = t.(IParameterContext)
			i++
		}
	}

	return tst
}

func (s *ParamListContext) Parameter(i int) IParameterContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParameterContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParameterContext)
}

func (s *ParamListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserCOMMA)
}

func (s *ParamListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOMMA, i)
}

func (s *ParamListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParamListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParamListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterParamList(s)
	}
}

func (s *ParamListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitParamList(s)
	}
}

func (s *ParamListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitParamList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) ParamList() (localctx IParamListContext) {
	localctx = NewParamListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 14, UnifiedParserRULE_paramList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(231)
		p.Parameter()
	}
	p.SetState(236)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == UnifiedParserCOMMA {
		{
			p.SetState(232)
			p.Match(UnifiedParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(233)
			p.Parameter()
		}

		p.SetState(238)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IParameterContext is an interface to support dynamic dispatch.
type IParameterContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	COLON() antlr.TerminalNode
	Type_() ITypeContext
	AllSELF() []antlr.TerminalNode
	SELF(i int) antlr.TerminalNode
	BIT_AND() antlr.TerminalNode
	MUT() antlr.TerminalNode

	// IsParameterContext differentiates from other interfaces.
	IsParameterContext()
}

type ParameterContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyParameterContext() *ParameterContext {
	var p = new(ParameterContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_parameter
	return p
}

func InitEmptyParameterContext(p *ParameterContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_parameter
}

func (*ParameterContext) IsParameterContext() {}

func NewParameterContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ParameterContext {
	var p = new(ParameterContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_parameter

	return p
}

func (s *ParameterContext) GetParser() antlr.Parser { return s.parser }

func (s *ParameterContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ParameterContext) COLON() antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOLON, 0)
}

func (s *ParameterContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *ParameterContext) AllSELF() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserSELF)
}

func (s *ParameterContext) SELF(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserSELF, i)
}

func (s *ParameterContext) BIT_AND() antlr.TerminalNode {
	return s.GetToken(UnifiedParserBIT_AND, 0)
}

func (s *ParameterContext) MUT() antlr.TerminalNode {
	return s.GetToken(UnifiedParserMUT, 0)
}

func (s *ParameterContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ParameterContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ParameterContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterParameter(s)
	}
}

func (s *ParameterContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitParameter(s)
	}
}

func (s *ParameterContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitParameter(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) Parameter() (localctx IParameterContext) {
	localctx = NewParameterContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 16, UnifiedParserRULE_parameter)
	p.SetState(253)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 16, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(239)
			p.Identifier()
		}
		{
			p.SetState(240)
			p.Match(UnifiedParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(241)
			p.type_(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(243)
			p.Match(UnifiedParserSELF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(244)
			p.Match(UnifiedParserSELF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(245)
			p.Match(UnifiedParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(246)
			p.Match(UnifiedParserBIT_AND)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(247)
			p.Match(UnifiedParserSELF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(248)
			p.Match(UnifiedParserSELF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(249)
			p.Match(UnifiedParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(250)
			p.Match(UnifiedParserBIT_AND)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(251)
			p.Match(UnifiedParserMUT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(252)
			p.Match(UnifiedParserSELF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGenericParamsContext is an interface to support dynamic dispatch.
type IGenericParamsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LT() antlr.TerminalNode
	AllGenericParam() []IGenericParamContext
	GenericParam(i int) IGenericParamContext
	GT() antlr.TerminalNode
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsGenericParamsContext differentiates from other interfaces.
	IsGenericParamsContext()
}

type GenericParamsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenericParamsContext() *GenericParamsContext {
	var p = new(GenericParamsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_genericParams
	return p
}

func InitEmptyGenericParamsContext(p *GenericParamsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_genericParams
}

func (*GenericParamsContext) IsGenericParamsContext() {}

func NewGenericParamsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericParamsContext {
	var p = new(GenericParamsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_genericParams

	return p
}

func (s *GenericParamsContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericParamsContext) LT() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLT, 0)
}

func (s *GenericParamsContext) AllGenericParam() []IGenericParamContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IGenericParamContext); ok {
			len++
		}
	}

	tst := make([]IGenericParamContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IGenericParamContext); ok {
			tst[i] = t.(IGenericParamContext)
			i++
		}
	}

	return tst
}

func (s *GenericParamsContext) GenericParam(i int) IGenericParamContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericParamContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericParamContext)
}

func (s *GenericParamsContext) GT() antlr.TerminalNode {
	return s.GetToken(UnifiedParserGT, 0)
}

func (s *GenericParamsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserCOMMA)
}

func (s *GenericParamsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOMMA, i)
}

func (s *GenericParamsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericParamsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericParamsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterGenericParams(s)
	}
}

func (s *GenericParamsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitGenericParams(s)
	}
}

func (s *GenericParamsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitGenericParams(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) GenericParams() (localctx IGenericParamsContext) {
	localctx = NewGenericParamsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 18, UnifiedParserRULE_genericParams)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(255)
		p.Match(UnifiedParserLT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(256)
		p.GenericParam()
	}
	p.SetState(261)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == UnifiedParserCOMMA {
		{
			p.SetState(257)
			p.Match(UnifiedParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(258)
			p.GenericParam()
		}

		p.SetState(263)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(264)
		p.Match(UnifiedParserGT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IGenericParamContext is an interface to support dynamic dispatch.
type IGenericParamContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	COLON() antlr.TerminalNode
	TypeConstraint() ITypeConstraintContext

	// IsGenericParamContext differentiates from other interfaces.
	IsGenericParamContext()
}

type GenericParamContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyGenericParamContext() *GenericParamContext {
	var p = new(GenericParamContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_genericParam
	return p
}

func InitEmptyGenericParamContext(p *GenericParamContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_genericParam
}

func (*GenericParamContext) IsGenericParamContext() {}

func NewGenericParamContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *GenericParamContext {
	var p = new(GenericParamContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_genericParam

	return p
}

func (s *GenericParamContext) GetParser() antlr.Parser { return s.parser }

func (s *GenericParamContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *GenericParamContext) COLON() antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOLON, 0)
}

func (s *GenericParamContext) TypeConstraint() ITypeConstraintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeConstraintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeConstraintContext)
}

func (s *GenericParamContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *GenericParamContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *GenericParamContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterGenericParam(s)
	}
}

func (s *GenericParamContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitGenericParam(s)
	}
}

func (s *GenericParamContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitGenericParam(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) GenericParam() (localctx IGenericParamContext) {
	localctx = NewGenericParamContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 20, UnifiedParserRULE_genericParam)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(266)
		p.Identifier()
	}
	p.SetState(269)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserCOLON {
		{
			p.SetState(267)
			p.Match(UnifiedParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(268)
			p.TypeConstraint()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeConstraintContext is an interface to support dynamic dispatch.
type ITypeConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllType_() []ITypeContext
	Type_(i int) ITypeContext
	AllPLUS() []antlr.TerminalNode
	PLUS(i int) antlr.TerminalNode

	// IsTypeConstraintContext differentiates from other interfaces.
	IsTypeConstraintContext()
}

type TypeConstraintContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeConstraintContext() *TypeConstraintContext {
	var p = new(TypeConstraintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_typeConstraint
	return p
}

func InitEmptyTypeConstraintContext(p *TypeConstraintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_typeConstraint
}

func (*TypeConstraintContext) IsTypeConstraintContext() {}

func NewTypeConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeConstraintContext {
	var p = new(TypeConstraintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_typeConstraint

	return p
}

func (s *TypeConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeConstraintContext) AllType_() []ITypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeContext); ok {
			len++
		}
	}

	tst := make([]ITypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeContext); ok {
			tst[i] = t.(ITypeContext)
			i++
		}
	}

	return tst
}

func (s *TypeConstraintContext) Type_(i int) ITypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *TypeConstraintContext) AllPLUS() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserPLUS)
}

func (s *TypeConstraintContext) PLUS(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserPLUS, i)
}

func (s *TypeConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterTypeConstraint(s)
	}
}

func (s *TypeConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitTypeConstraint(s)
	}
}

func (s *TypeConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitTypeConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) TypeConstraint() (localctx ITypeConstraintContext) {
	localctx = NewTypeConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 22, UnifiedParserRULE_typeConstraint)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(271)
		p.type_(0)
	}
	p.SetState(276)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == UnifiedParserPLUS {
		{
			p.SetState(272)
			p.Match(UnifiedParserPLUS)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(273)
			p.type_(0)
		}

		p.SetState(278)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWhereClauseContext is an interface to support dynamic dispatch.
type IWhereClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WHERE() antlr.TerminalNode
	AllWhereConstraint() []IWhereConstraintContext
	WhereConstraint(i int) IWhereConstraintContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsWhereClauseContext differentiates from other interfaces.
	IsWhereClauseContext()
}

type WhereClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhereClauseContext() *WhereClauseContext {
	var p = new(WhereClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_whereClause
	return p
}

func InitEmptyWhereClauseContext(p *WhereClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_whereClause
}

func (*WhereClauseContext) IsWhereClauseContext() {}

func NewWhereClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhereClauseContext {
	var p = new(WhereClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_whereClause

	return p
}

func (s *WhereClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *WhereClauseContext) WHERE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserWHERE, 0)
}

func (s *WhereClauseContext) AllWhereConstraint() []IWhereConstraintContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IWhereConstraintContext); ok {
			len++
		}
	}

	tst := make([]IWhereConstraintContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IWhereConstraintContext); ok {
			tst[i] = t.(IWhereConstraintContext)
			i++
		}
	}

	return tst
}

func (s *WhereClauseContext) WhereConstraint(i int) IWhereConstraintContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhereConstraintContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhereConstraintContext)
}

func (s *WhereClauseContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserCOMMA)
}

func (s *WhereClauseContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOMMA, i)
}

func (s *WhereClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhereClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhereClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterWhereClause(s)
	}
}

func (s *WhereClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitWhereClause(s)
	}
}

func (s *WhereClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitWhereClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) WhereClause() (localctx IWhereClauseContext) {
	localctx = NewWhereClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 24, UnifiedParserRULE_whereClause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(279)
		p.Match(UnifiedParserWHERE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(280)
		p.WhereConstraint()
	}
	p.SetState(285)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == UnifiedParserCOMMA {
		{
			p.SetState(281)
			p.Match(UnifiedParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(282)
			p.WhereConstraint()
		}

		p.SetState(287)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWhereConstraintContext is an interface to support dynamic dispatch.
type IWhereConstraintContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Type_() ITypeContext
	COLON() antlr.TerminalNode
	TypeConstraint() ITypeConstraintContext

	// IsWhereConstraintContext differentiates from other interfaces.
	IsWhereConstraintContext()
}

type WhereConstraintContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhereConstraintContext() *WhereConstraintContext {
	var p = new(WhereConstraintContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_whereConstraint
	return p
}

func InitEmptyWhereConstraintContext(p *WhereConstraintContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_whereConstraint
}

func (*WhereConstraintContext) IsWhereConstraintContext() {}

func NewWhereConstraintContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhereConstraintContext {
	var p = new(WhereConstraintContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_whereConstraint

	return p
}

func (s *WhereConstraintContext) GetParser() antlr.Parser { return s.parser }

func (s *WhereConstraintContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *WhereConstraintContext) COLON() antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOLON, 0)
}

func (s *WhereConstraintContext) TypeConstraint() ITypeConstraintContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeConstraintContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeConstraintContext)
}

func (s *WhereConstraintContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhereConstraintContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhereConstraintContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterWhereConstraint(s)
	}
}

func (s *WhereConstraintContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitWhereConstraint(s)
	}
}

func (s *WhereConstraintContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitWhereConstraint(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) WhereConstraint() (localctx IWhereConstraintContext) {
	localctx = NewWhereConstraintContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 26, UnifiedParserRULE_whereConstraint)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(288)
		p.type_(0)
	}
	{
		p.SetState(289)
		p.Match(UnifiedParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(290)
		p.TypeConstraint()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStructDeclContext is an interface to support dynamic dispatch.
type IStructDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	STRUCT() antlr.TerminalNode
	Identifier() IIdentifierContext
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	PUB() antlr.TerminalNode
	GenericParams() IGenericParamsContext
	AllStructMember() []IStructMemberContext
	StructMember(i int) IStructMemberContext

	// IsStructDeclContext differentiates from other interfaces.
	IsStructDeclContext()
}

type StructDeclContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructDeclContext() *StructDeclContext {
	var p = new(StructDeclContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_structDecl
	return p
}

func InitEmptyStructDeclContext(p *StructDeclContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_structDecl
}

func (*StructDeclContext) IsStructDeclContext() {}

func NewStructDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructDeclContext {
	var p = new(StructDeclContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_structDecl

	return p
}

func (s *StructDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *StructDeclContext) STRUCT() antlr.TerminalNode {
	return s.GetToken(UnifiedParserSTRUCT, 0)
}

func (s *StructDeclContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *StructDeclContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLBRACE, 0)
}

func (s *StructDeclContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRBRACE, 0)
}

func (s *StructDeclContext) PUB() antlr.TerminalNode {
	return s.GetToken(UnifiedParserPUB, 0)
}

func (s *StructDeclContext) GenericParams() IGenericParamsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericParamsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericParamsContext)
}

func (s *StructDeclContext) AllStructMember() []IStructMemberContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStructMemberContext); ok {
			len++
		}
	}

	tst := make([]IStructMemberContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStructMemberContext); ok {
			tst[i] = t.(IStructMemberContext)
			i++
		}
	}

	return tst
}

func (s *StructDeclContext) StructMember(i int) IStructMemberContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructMemberContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructMemberContext)
}

func (s *StructDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterStructDecl(s)
	}
}

func (s *StructDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitStructDecl(s)
	}
}

func (s *StructDeclContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitStructDecl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) StructDecl() (localctx IStructDeclContext) {
	localctx = NewStructDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 28, UnifiedParserRULE_structDecl)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(293)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserPUB {
		{
			p.SetState(292)
			p.Match(UnifiedParserPUB)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(295)
		p.Match(UnifiedParserSTRUCT)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(296)
		p.Identifier()
	}
	p.SetState(298)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserLT {
		{
			p.SetState(297)
			p.GenericParams()
		}

	}
	{
		p.SetState(300)
		p.Match(UnifiedParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(304)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-54)) & ^0x3f) == 0 && ((int64(1)<<(_la-54))&2147487745) != 0 {
		{
			p.SetState(301)
			p.StructMember()
		}

		p.SetState(306)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(307)
		p.Match(UnifiedParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStructMemberContext is an interface to support dynamic dispatch.
type IStructMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	COLON() antlr.TerminalNode
	Type_() ITypeContext
	PUB() antlr.TerminalNode
	FunctionDecl() IFunctionDeclContext

	// IsStructMemberContext differentiates from other interfaces.
	IsStructMemberContext()
}

type StructMemberContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructMemberContext() *StructMemberContext {
	var p = new(StructMemberContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_structMember
	return p
}

func InitEmptyStructMemberContext(p *StructMemberContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_structMember
}

func (*StructMemberContext) IsStructMemberContext() {}

func NewStructMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructMemberContext {
	var p = new(StructMemberContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_structMember

	return p
}

func (s *StructMemberContext) GetParser() antlr.Parser { return s.parser }

func (s *StructMemberContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *StructMemberContext) COLON() antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOLON, 0)
}

func (s *StructMemberContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *StructMemberContext) PUB() antlr.TerminalNode {
	return s.GetToken(UnifiedParserPUB, 0)
}

func (s *StructMemberContext) FunctionDecl() IFunctionDeclContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionDeclContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclContext)
}

func (s *StructMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructMemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructMemberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterStructMember(s)
	}
}

func (s *StructMemberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitStructMember(s)
	}
}

func (s *StructMemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitStructMember(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) StructMember() (localctx IStructMemberContext) {
	localctx = NewStructMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 30, UnifiedParserRULE_structMember)
	var _la int

	p.SetState(317)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 25, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(310)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == UnifiedParserPUB {
			{
				p.SetState(309)
				p.Match(UnifiedParserPUB)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(312)
			p.Identifier()
		}
		{
			p.SetState(313)
			p.Match(UnifiedParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(314)
			p.type_(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(316)
			p.FunctionDecl()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnumDeclContext is an interface to support dynamic dispatch.
type IEnumDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ENUM() antlr.TerminalNode
	Identifier() IIdentifierContext
	LBRACE() antlr.TerminalNode
	AllEnumVariant() []IEnumVariantContext
	EnumVariant(i int) IEnumVariantContext
	RBRACE() antlr.TerminalNode
	PUB() antlr.TerminalNode
	GenericParams() IGenericParamsContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsEnumDeclContext differentiates from other interfaces.
	IsEnumDeclContext()
}

type EnumDeclContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumDeclContext() *EnumDeclContext {
	var p = new(EnumDeclContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_enumDecl
	return p
}

func InitEmptyEnumDeclContext(p *EnumDeclContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_enumDecl
}

func (*EnumDeclContext) IsEnumDeclContext() {}

func NewEnumDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumDeclContext {
	var p = new(EnumDeclContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_enumDecl

	return p
}

func (s *EnumDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumDeclContext) ENUM() antlr.TerminalNode {
	return s.GetToken(UnifiedParserENUM, 0)
}

func (s *EnumDeclContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *EnumDeclContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLBRACE, 0)
}

func (s *EnumDeclContext) AllEnumVariant() []IEnumVariantContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEnumVariantContext); ok {
			len++
		}
	}

	tst := make([]IEnumVariantContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEnumVariantContext); ok {
			tst[i] = t.(IEnumVariantContext)
			i++
		}
	}

	return tst
}

func (s *EnumDeclContext) EnumVariant(i int) IEnumVariantContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumVariantContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumVariantContext)
}

func (s *EnumDeclContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRBRACE, 0)
}

func (s *EnumDeclContext) PUB() antlr.TerminalNode {
	return s.GetToken(UnifiedParserPUB, 0)
}

func (s *EnumDeclContext) GenericParams() IGenericParamsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericParamsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericParamsContext)
}

func (s *EnumDeclContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserCOMMA)
}

func (s *EnumDeclContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOMMA, i)
}

func (s *EnumDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterEnumDecl(s)
	}
}

func (s *EnumDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitEnumDecl(s)
	}
}

func (s *EnumDeclContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitEnumDecl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) EnumDecl() (localctx IEnumDeclContext) {
	localctx = NewEnumDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 32, UnifiedParserRULE_enumDecl)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(320)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserPUB {
		{
			p.SetState(319)
			p.Match(UnifiedParserPUB)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(322)
		p.Match(UnifiedParserENUM)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(323)
		p.Identifier()
	}
	p.SetState(325)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserLT {
		{
			p.SetState(324)
			p.GenericParams()
		}

	}
	{
		p.SetState(327)
		p.Match(UnifiedParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(328)
		p.EnumVariant()
	}
	p.SetState(333)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == UnifiedParserCOMMA {
		{
			p.SetState(329)
			p.Match(UnifiedParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(330)
			p.EnumVariant()
		}

		p.SetState(335)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(336)
		p.Match(UnifiedParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnumVariantContext is an interface to support dynamic dispatch.
type IEnumVariantContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	LPAREN() antlr.TerminalNode
	EnumVariantParams() IEnumVariantParamsContext
	RPAREN() antlr.TerminalNode

	// IsEnumVariantContext differentiates from other interfaces.
	IsEnumVariantContext()
}

type EnumVariantContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumVariantContext() *EnumVariantContext {
	var p = new(EnumVariantContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_enumVariant
	return p
}

func InitEmptyEnumVariantContext(p *EnumVariantContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_enumVariant
}

func (*EnumVariantContext) IsEnumVariantContext() {}

func NewEnumVariantContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumVariantContext {
	var p = new(EnumVariantContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_enumVariant

	return p
}

func (s *EnumVariantContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumVariantContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *EnumVariantContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLPAREN, 0)
}

func (s *EnumVariantContext) EnumVariantParams() IEnumVariantParamsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumVariantParamsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumVariantParamsContext)
}

func (s *EnumVariantContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRPAREN, 0)
}

func (s *EnumVariantContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumVariantContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumVariantContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterEnumVariant(s)
	}
}

func (s *EnumVariantContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitEnumVariant(s)
	}
}

func (s *EnumVariantContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitEnumVariant(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) EnumVariant() (localctx IEnumVariantContext) {
	localctx = NewEnumVariantContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 34, UnifiedParserRULE_enumVariant)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(338)
		p.Identifier()
	}
	p.SetState(343)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserLPAREN {
		{
			p.SetState(339)
			p.Match(UnifiedParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(340)
			p.EnumVariantParams()
		}
		{
			p.SetState(341)
			p.Match(UnifiedParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnumVariantParamsContext is an interface to support dynamic dispatch.
type IEnumVariantParamsContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllEnumVariantParam() []IEnumVariantParamContext
	EnumVariantParam(i int) IEnumVariantParamContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsEnumVariantParamsContext differentiates from other interfaces.
	IsEnumVariantParamsContext()
}

type EnumVariantParamsContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumVariantParamsContext() *EnumVariantParamsContext {
	var p = new(EnumVariantParamsContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_enumVariantParams
	return p
}

func InitEmptyEnumVariantParamsContext(p *EnumVariantParamsContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_enumVariantParams
}

func (*EnumVariantParamsContext) IsEnumVariantParamsContext() {}

func NewEnumVariantParamsContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumVariantParamsContext {
	var p = new(EnumVariantParamsContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_enumVariantParams

	return p
}

func (s *EnumVariantParamsContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumVariantParamsContext) AllEnumVariantParam() []IEnumVariantParamContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IEnumVariantParamContext); ok {
			len++
		}
	}

	tst := make([]IEnumVariantParamContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IEnumVariantParamContext); ok {
			tst[i] = t.(IEnumVariantParamContext)
			i++
		}
	}

	return tst
}

func (s *EnumVariantParamsContext) EnumVariantParam(i int) IEnumVariantParamContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IEnumVariantParamContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IEnumVariantParamContext)
}

func (s *EnumVariantParamsContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserCOMMA)
}

func (s *EnumVariantParamsContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOMMA, i)
}

func (s *EnumVariantParamsContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumVariantParamsContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumVariantParamsContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterEnumVariantParams(s)
	}
}

func (s *EnumVariantParamsContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitEnumVariantParams(s)
	}
}

func (s *EnumVariantParamsContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitEnumVariantParams(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) EnumVariantParams() (localctx IEnumVariantParamsContext) {
	localctx = NewEnumVariantParamsContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 36, UnifiedParserRULE_enumVariantParams)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(345)
		p.EnumVariantParam()
	}
	p.SetState(350)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == UnifiedParserCOMMA {
		{
			p.SetState(346)
			p.Match(UnifiedParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(347)
			p.EnumVariantParam()
		}

		p.SetState(352)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IEnumVariantParamContext is an interface to support dynamic dispatch.
type IEnumVariantParamContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Type_() ITypeContext
	Identifier() IIdentifierContext
	COLON() antlr.TerminalNode

	// IsEnumVariantParamContext differentiates from other interfaces.
	IsEnumVariantParamContext()
}

type EnumVariantParamContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyEnumVariantParamContext() *EnumVariantParamContext {
	var p = new(EnumVariantParamContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_enumVariantParam
	return p
}

func InitEmptyEnumVariantParamContext(p *EnumVariantParamContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_enumVariantParam
}

func (*EnumVariantParamContext) IsEnumVariantParamContext() {}

func NewEnumVariantParamContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *EnumVariantParamContext {
	var p = new(EnumVariantParamContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_enumVariantParam

	return p
}

func (s *EnumVariantParamContext) GetParser() antlr.Parser { return s.parser }

func (s *EnumVariantParamContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *EnumVariantParamContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *EnumVariantParamContext) COLON() antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOLON, 0)
}

func (s *EnumVariantParamContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *EnumVariantParamContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *EnumVariantParamContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterEnumVariantParam(s)
	}
}

func (s *EnumVariantParamContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitEnumVariantParam(s)
	}
}

func (s *EnumVariantParamContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitEnumVariantParam(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) EnumVariantParam() (localctx IEnumVariantParamContext) {
	localctx = NewEnumVariantParamContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 38, UnifiedParserRULE_enumVariantParam)
	p.EnterOuterAlt(localctx, 1)
	p.SetState(356)
	p.GetErrorHandler().Sync(p)

	if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 31, p.GetParserRuleContext()) == 1 {
		{
			p.SetState(353)
			p.Identifier()
		}
		{
			p.SetState(354)
			p.Match(UnifiedParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	} else if p.HasError() { // JIM
		goto errorExit
	}
	{
		p.SetState(358)
		p.type_(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInterfaceDeclContext is an interface to support dynamic dispatch.
type IInterfaceDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	INTERFACE() antlr.TerminalNode
	Identifier() IIdentifierContext
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	PUB() antlr.TerminalNode
	GenericParams() IGenericParamsContext
	AllInterfaceMember() []IInterfaceMemberContext
	InterfaceMember(i int) IInterfaceMemberContext

	// IsInterfaceDeclContext differentiates from other interfaces.
	IsInterfaceDeclContext()
}

type InterfaceDeclContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceDeclContext() *InterfaceDeclContext {
	var p = new(InterfaceDeclContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_interfaceDecl
	return p
}

func InitEmptyInterfaceDeclContext(p *InterfaceDeclContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_interfaceDecl
}

func (*InterfaceDeclContext) IsInterfaceDeclContext() {}

func NewInterfaceDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceDeclContext {
	var p = new(InterfaceDeclContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_interfaceDecl

	return p
}

func (s *InterfaceDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceDeclContext) INTERFACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserINTERFACE, 0)
}

func (s *InterfaceDeclContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *InterfaceDeclContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLBRACE, 0)
}

func (s *InterfaceDeclContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRBRACE, 0)
}

func (s *InterfaceDeclContext) PUB() antlr.TerminalNode {
	return s.GetToken(UnifiedParserPUB, 0)
}

func (s *InterfaceDeclContext) GenericParams() IGenericParamsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericParamsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericParamsContext)
}

func (s *InterfaceDeclContext) AllInterfaceMember() []IInterfaceMemberContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IInterfaceMemberContext); ok {
			len++
		}
	}

	tst := make([]IInterfaceMemberContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IInterfaceMemberContext); ok {
			tst[i] = t.(IInterfaceMemberContext)
			i++
		}
	}

	return tst
}

func (s *InterfaceDeclContext) InterfaceMember(i int) IInterfaceMemberContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IInterfaceMemberContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IInterfaceMemberContext)
}

func (s *InterfaceDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterInterfaceDecl(s)
	}
}

func (s *InterfaceDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitInterfaceDecl(s)
	}
}

func (s *InterfaceDeclContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitInterfaceDecl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) InterfaceDecl() (localctx IInterfaceDeclContext) {
	localctx = NewInterfaceDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 40, UnifiedParserRULE_interfaceDecl)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(361)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserPUB {
		{
			p.SetState(360)
			p.Match(UnifiedParserPUB)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(363)
		p.Match(UnifiedParserINTERFACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(364)
		p.Identifier()
	}
	p.SetState(366)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserLT {
		{
			p.SetState(365)
			p.GenericParams()
		}

	}
	{
		p.SetState(368)
		p.Match(UnifiedParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(372)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == UnifiedParserFN || _la == UnifiedParserTYPE {
		{
			p.SetState(369)
			p.InterfaceMember()
		}

		p.SetState(374)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(375)
		p.Match(UnifiedParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IInterfaceMemberContext is an interface to support dynamic dispatch.
type IInterfaceMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FunctionSig() IFunctionSigContext
	TYPE() antlr.TerminalNode
	Identifier() IIdentifierContext
	SEMI() antlr.TerminalNode

	// IsInterfaceMemberContext differentiates from other interfaces.
	IsInterfaceMemberContext()
}

type InterfaceMemberContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyInterfaceMemberContext() *InterfaceMemberContext {
	var p = new(InterfaceMemberContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_interfaceMember
	return p
}

func InitEmptyInterfaceMemberContext(p *InterfaceMemberContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_interfaceMember
}

func (*InterfaceMemberContext) IsInterfaceMemberContext() {}

func NewInterfaceMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *InterfaceMemberContext {
	var p = new(InterfaceMemberContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_interfaceMember

	return p
}

func (s *InterfaceMemberContext) GetParser() antlr.Parser { return s.parser }

func (s *InterfaceMemberContext) FunctionSig() IFunctionSigContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionSigContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionSigContext)
}

func (s *InterfaceMemberContext) TYPE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserTYPE, 0)
}

func (s *InterfaceMemberContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *InterfaceMemberContext) SEMI() antlr.TerminalNode {
	return s.GetToken(UnifiedParserSEMI, 0)
}

func (s *InterfaceMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *InterfaceMemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *InterfaceMemberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterInterfaceMember(s)
	}
}

func (s *InterfaceMemberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitInterfaceMember(s)
	}
}

func (s *InterfaceMemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitInterfaceMember(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) InterfaceMember() (localctx IInterfaceMemberContext) {
	localctx = NewInterfaceMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 42, UnifiedParserRULE_interfaceMember)
	p.SetState(382)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case UnifiedParserFN:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(377)
			p.FunctionSig()
		}

	case UnifiedParserTYPE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(378)
			p.Match(UnifiedParserTYPE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(379)
			p.Identifier()
		}
		{
			p.SetState(380)
			p.Match(UnifiedParserSEMI)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFunctionSigContext is an interface to support dynamic dispatch.
type IFunctionSigContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FN() antlr.TerminalNode
	Identifier() IIdentifierContext
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	SEMI() antlr.TerminalNode
	GenericParams() IGenericParamsContext
	ParamList() IParamListContext
	ARROW() antlr.TerminalNode
	Type_() ITypeContext
	Block() IBlockContext

	// IsFunctionSigContext differentiates from other interfaces.
	IsFunctionSigContext()
}

type FunctionSigContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFunctionSigContext() *FunctionSigContext {
	var p = new(FunctionSigContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_functionSig
	return p
}

func InitEmptyFunctionSigContext(p *FunctionSigContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_functionSig
}

func (*FunctionSigContext) IsFunctionSigContext() {}

func NewFunctionSigContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FunctionSigContext {
	var p = new(FunctionSigContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_functionSig

	return p
}

func (s *FunctionSigContext) GetParser() antlr.Parser { return s.parser }

func (s *FunctionSigContext) FN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserFN, 0)
}

func (s *FunctionSigContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *FunctionSigContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLPAREN, 0)
}

func (s *FunctionSigContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRPAREN, 0)
}

func (s *FunctionSigContext) SEMI() antlr.TerminalNode {
	return s.GetToken(UnifiedParserSEMI, 0)
}

func (s *FunctionSigContext) GenericParams() IGenericParamsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericParamsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericParamsContext)
}

func (s *FunctionSigContext) ParamList() IParamListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParamListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParamListContext)
}

func (s *FunctionSigContext) ARROW() antlr.TerminalNode {
	return s.GetToken(UnifiedParserARROW, 0)
}

func (s *FunctionSigContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *FunctionSigContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *FunctionSigContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FunctionSigContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FunctionSigContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterFunctionSig(s)
	}
}

func (s *FunctionSigContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitFunctionSig(s)
	}
}

func (s *FunctionSigContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitFunctionSig(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) FunctionSig() (localctx IFunctionSigContext) {
	localctx = NewFunctionSigContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 44, UnifiedParserRULE_functionSig)
	var _la int

	p.SetState(416)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 42, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(384)
			p.Match(UnifiedParserFN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(385)
			p.Identifier()
		}
		p.SetState(387)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == UnifiedParserLT {
			{
				p.SetState(386)
				p.GenericParams()
			}

		}
		{
			p.SetState(389)
			p.Match(UnifiedParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(391)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == UnifiedParserSELF || _la == UnifiedParserIdentifier {
			{
				p.SetState(390)
				p.ParamList()
			}

		}
		{
			p.SetState(393)
			p.Match(UnifiedParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(396)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == UnifiedParserARROW {
			{
				p.SetState(394)
				p.Match(UnifiedParserARROW)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(395)
				p.type_(0)
			}

		}
		{
			p.SetState(398)
			p.Match(UnifiedParserSEMI)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(400)
			p.Match(UnifiedParserFN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(401)
			p.Identifier()
		}
		p.SetState(403)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == UnifiedParserLT {
			{
				p.SetState(402)
				p.GenericParams()
			}

		}
		{
			p.SetState(405)
			p.Match(UnifiedParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(407)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == UnifiedParserSELF || _la == UnifiedParserIdentifier {
			{
				p.SetState(406)
				p.ParamList()
			}

		}
		{
			p.SetState(409)
			p.Match(UnifiedParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(412)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == UnifiedParserARROW {
			{
				p.SetState(410)
				p.Match(UnifiedParserARROW)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(411)
				p.type_(0)
			}

		}
		{
			p.SetState(414)
			p.Block()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IImplDeclContext is an interface to support dynamic dispatch.
type IImplDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IMPL() antlr.TerminalNode
	AllType_() []ITypeContext
	Type_(i int) ITypeContext
	FOR() antlr.TerminalNode
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	GenericParams() IGenericParamsContext
	WhereClause() IWhereClauseContext
	AllImplMember() []IImplMemberContext
	ImplMember(i int) IImplMemberContext

	// IsImplDeclContext differentiates from other interfaces.
	IsImplDeclContext()
}

type ImplDeclContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImplDeclContext() *ImplDeclContext {
	var p = new(ImplDeclContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_implDecl
	return p
}

func InitEmptyImplDeclContext(p *ImplDeclContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_implDecl
}

func (*ImplDeclContext) IsImplDeclContext() {}

func NewImplDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImplDeclContext {
	var p = new(ImplDeclContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_implDecl

	return p
}

func (s *ImplDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *ImplDeclContext) IMPL() antlr.TerminalNode {
	return s.GetToken(UnifiedParserIMPL, 0)
}

func (s *ImplDeclContext) AllType_() []ITypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeContext); ok {
			len++
		}
	}

	tst := make([]ITypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeContext); ok {
			tst[i] = t.(ITypeContext)
			i++
		}
	}

	return tst
}

func (s *ImplDeclContext) Type_(i int) ITypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *ImplDeclContext) FOR() antlr.TerminalNode {
	return s.GetToken(UnifiedParserFOR, 0)
}

func (s *ImplDeclContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLBRACE, 0)
}

func (s *ImplDeclContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRBRACE, 0)
}

func (s *ImplDeclContext) GenericParams() IGenericParamsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericParamsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericParamsContext)
}

func (s *ImplDeclContext) WhereClause() IWhereClauseContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhereClauseContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhereClauseContext)
}

func (s *ImplDeclContext) AllImplMember() []IImplMemberContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IImplMemberContext); ok {
			len++
		}
	}

	tst := make([]IImplMemberContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IImplMemberContext); ok {
			tst[i] = t.(IImplMemberContext)
			i++
		}
	}

	return tst
}

func (s *ImplDeclContext) ImplMember(i int) IImplMemberContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IImplMemberContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IImplMemberContext)
}

func (s *ImplDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImplDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImplDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterImplDecl(s)
	}
}

func (s *ImplDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitImplDecl(s)
	}
}

func (s *ImplDeclContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitImplDecl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) ImplDecl() (localctx IImplDeclContext) {
	localctx = NewImplDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 46, UnifiedParserRULE_implDecl)
	var _la int

	p.SetState(454)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 49, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(418)
			p.Match(UnifiedParserIMPL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(420)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == UnifiedParserLT {
			{
				p.SetState(419)
				p.GenericParams()
			}

		}
		{
			p.SetState(422)
			p.type_(0)
		}
		{
			p.SetState(423)
			p.Match(UnifiedParserFOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(424)
			p.type_(0)
		}
		p.SetState(426)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == UnifiedParserWHERE {
			{
				p.SetState(425)
				p.WhereClause()
			}

		}
		{
			p.SetState(428)
			p.Match(UnifiedParserLBRACE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(432)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for (int64((_la-54)) & ^0x3f) == 0 && ((int64(1)<<(_la-54))&4161) != 0 {
			{
				p.SetState(429)
				p.ImplMember()
			}

			p.SetState(434)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(435)
			p.Match(UnifiedParserRBRACE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(437)
			p.Match(UnifiedParserIMPL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(439)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == UnifiedParserLT {
			{
				p.SetState(438)
				p.GenericParams()
			}

		}
		{
			p.SetState(441)
			p.type_(0)
		}
		p.SetState(443)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == UnifiedParserWHERE {
			{
				p.SetState(442)
				p.WhereClause()
			}

		}
		{
			p.SetState(445)
			p.Match(UnifiedParserLBRACE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(449)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for (int64((_la-54)) & ^0x3f) == 0 && ((int64(1)<<(_la-54))&4161) != 0 {
			{
				p.SetState(446)
				p.ImplMember()
			}

			p.SetState(451)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(452)
			p.Match(UnifiedParserRBRACE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IImplMemberContext is an interface to support dynamic dispatch.
type IImplMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FunctionDecl() IFunctionDeclContext
	TYPE() antlr.TerminalNode
	Identifier() IIdentifierContext
	ASSIGN() antlr.TerminalNode
	Type_() ITypeContext
	SEMI() antlr.TerminalNode

	// IsImplMemberContext differentiates from other interfaces.
	IsImplMemberContext()
}

type ImplMemberContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyImplMemberContext() *ImplMemberContext {
	var p = new(ImplMemberContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_implMember
	return p
}

func InitEmptyImplMemberContext(p *ImplMemberContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_implMember
}

func (*ImplMemberContext) IsImplMemberContext() {}

func NewImplMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ImplMemberContext {
	var p = new(ImplMemberContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_implMember

	return p
}

func (s *ImplMemberContext) GetParser() antlr.Parser { return s.parser }

func (s *ImplMemberContext) FunctionDecl() IFunctionDeclContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionDeclContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclContext)
}

func (s *ImplMemberContext) TYPE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserTYPE, 0)
}

func (s *ImplMemberContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ImplMemberContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserASSIGN, 0)
}

func (s *ImplMemberContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *ImplMemberContext) SEMI() antlr.TerminalNode {
	return s.GetToken(UnifiedParserSEMI, 0)
}

func (s *ImplMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ImplMemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ImplMemberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterImplMember(s)
	}
}

func (s *ImplMemberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitImplMember(s)
	}
}

func (s *ImplMemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitImplMember(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) ImplMember() (localctx IImplMemberContext) {
	localctx = NewImplMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 48, UnifiedParserRULE_implMember)
	p.SetState(463)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetTokenStream().LA(1) {
	case UnifiedParserFN, UnifiedParserPUB:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(456)
			p.FunctionDecl()
		}

	case UnifiedParserTYPE:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(457)
			p.Match(UnifiedParserTYPE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(458)
			p.Identifier()
		}
		{
			p.SetState(459)
			p.Match(UnifiedParserASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(460)
			p.type_(0)
		}
		{
			p.SetState(461)
			p.Match(UnifiedParserSEMI)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	default:
		p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IActorDeclContext is an interface to support dynamic dispatch.
type IActorDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ACTOR() antlr.TerminalNode
	Identifier() IIdentifierContext
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	PUB() antlr.TerminalNode
	GenericParams() IGenericParamsContext
	AllActorMember() []IActorMemberContext
	ActorMember(i int) IActorMemberContext

	// IsActorDeclContext differentiates from other interfaces.
	IsActorDeclContext()
}

type ActorDeclContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyActorDeclContext() *ActorDeclContext {
	var p = new(ActorDeclContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_actorDecl
	return p
}

func InitEmptyActorDeclContext(p *ActorDeclContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_actorDecl
}

func (*ActorDeclContext) IsActorDeclContext() {}

func NewActorDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ActorDeclContext {
	var p = new(ActorDeclContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_actorDecl

	return p
}

func (s *ActorDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *ActorDeclContext) ACTOR() antlr.TerminalNode {
	return s.GetToken(UnifiedParserACTOR, 0)
}

func (s *ActorDeclContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ActorDeclContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLBRACE, 0)
}

func (s *ActorDeclContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRBRACE, 0)
}

func (s *ActorDeclContext) PUB() antlr.TerminalNode {
	return s.GetToken(UnifiedParserPUB, 0)
}

func (s *ActorDeclContext) GenericParams() IGenericParamsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericParamsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericParamsContext)
}

func (s *ActorDeclContext) AllActorMember() []IActorMemberContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IActorMemberContext); ok {
			len++
		}
	}

	tst := make([]IActorMemberContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IActorMemberContext); ok {
			tst[i] = t.(IActorMemberContext)
			i++
		}
	}

	return tst
}

func (s *ActorDeclContext) ActorMember(i int) IActorMemberContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IActorMemberContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IActorMemberContext)
}

func (s *ActorDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ActorDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ActorDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterActorDecl(s)
	}
}

func (s *ActorDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitActorDecl(s)
	}
}

func (s *ActorDeclContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitActorDecl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) ActorDecl() (localctx IActorDeclContext) {
	localctx = NewActorDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 50, UnifiedParserRULE_actorDecl)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(466)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserPUB {
		{
			p.SetState(465)
			p.Match(UnifiedParserPUB)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(468)
		p.Match(UnifiedParserACTOR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(469)
		p.Identifier()
	}
	p.SetState(471)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserLT {
		{
			p.SetState(470)
			p.GenericParams()
		}

	}
	{
		p.SetState(473)
		p.Match(UnifiedParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(477)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for (int64((_la-54)) & ^0x3f) == 0 && ((int64(1)<<(_la-54))&5121) != 0 {
		{
			p.SetState(474)
			p.ActorMember()
		}

		p.SetState(479)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(480)
		p.Match(UnifiedParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IActorMemberContext is an interface to support dynamic dispatch.
type IActorMemberContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VAR() antlr.TerminalNode
	Identifier() IIdentifierContext
	COLON() antlr.TerminalNode
	Type_() ITypeContext
	SEMI() antlr.TerminalNode
	PUB() antlr.TerminalNode
	ASSIGN() antlr.TerminalNode
	Expr() IExprContext
	FunctionDecl() IFunctionDeclContext

	// IsActorMemberContext differentiates from other interfaces.
	IsActorMemberContext()
}

type ActorMemberContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyActorMemberContext() *ActorMemberContext {
	var p = new(ActorMemberContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_actorMember
	return p
}

func InitEmptyActorMemberContext(p *ActorMemberContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_actorMember
}

func (*ActorMemberContext) IsActorMemberContext() {}

func NewActorMemberContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ActorMemberContext {
	var p = new(ActorMemberContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_actorMember

	return p
}

func (s *ActorMemberContext) GetParser() antlr.Parser { return s.parser }

func (s *ActorMemberContext) VAR() antlr.TerminalNode {
	return s.GetToken(UnifiedParserVAR, 0)
}

func (s *ActorMemberContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ActorMemberContext) COLON() antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOLON, 0)
}

func (s *ActorMemberContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *ActorMemberContext) SEMI() antlr.TerminalNode {
	return s.GetToken(UnifiedParserSEMI, 0)
}

func (s *ActorMemberContext) PUB() antlr.TerminalNode {
	return s.GetToken(UnifiedParserPUB, 0)
}

func (s *ActorMemberContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserASSIGN, 0)
}

func (s *ActorMemberContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ActorMemberContext) FunctionDecl() IFunctionDeclContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFunctionDeclContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFunctionDeclContext)
}

func (s *ActorMemberContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ActorMemberContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ActorMemberContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterActorMember(s)
	}
}

func (s *ActorMemberContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitActorMember(s)
	}
}

func (s *ActorMemberContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitActorMember(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) ActorMember() (localctx IActorMemberContext) {
	localctx = NewActorMemberContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 52, UnifiedParserRULE_actorMember)
	var _la int

	p.SetState(496)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 56, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(483)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == UnifiedParserPUB {
			{
				p.SetState(482)
				p.Match(UnifiedParserPUB)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(485)
			p.Match(UnifiedParserVAR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(486)
			p.Identifier()
		}
		{
			p.SetState(487)
			p.Match(UnifiedParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(488)
			p.type_(0)
		}
		p.SetState(491)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == UnifiedParserASSIGN {
			{
				p.SetState(489)
				p.Match(UnifiedParserASSIGN)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(490)
				p.expr(0)
			}

		}
		{
			p.SetState(493)
			p.Match(UnifiedParserSEMI)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(495)
			p.FunctionDecl()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeAliasContext is an interface to support dynamic dispatch.
type ITypeAliasContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TYPE() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	ASSIGN() antlr.TerminalNode
	Type_() ITypeContext
	SEMI() antlr.TerminalNode
	PUB() antlr.TerminalNode
	GenericParams() IGenericParamsContext
	REFINE() antlr.TerminalNode
	AllBIT_OR() []antlr.TerminalNode
	BIT_OR(i int) antlr.TerminalNode
	Expr() IExprContext

	// IsTypeAliasContext differentiates from other interfaces.
	IsTypeAliasContext()
}

type TypeAliasContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeAliasContext() *TypeAliasContext {
	var p = new(TypeAliasContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_typeAlias
	return p
}

func InitEmptyTypeAliasContext(p *TypeAliasContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_typeAlias
}

func (*TypeAliasContext) IsTypeAliasContext() {}

func NewTypeAliasContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeAliasContext {
	var p = new(TypeAliasContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_typeAlias

	return p
}

func (s *TypeAliasContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeAliasContext) TYPE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserTYPE, 0)
}

func (s *TypeAliasContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *TypeAliasContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TypeAliasContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserASSIGN, 0)
}

func (s *TypeAliasContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *TypeAliasContext) SEMI() antlr.TerminalNode {
	return s.GetToken(UnifiedParserSEMI, 0)
}

func (s *TypeAliasContext) PUB() antlr.TerminalNode {
	return s.GetToken(UnifiedParserPUB, 0)
}

func (s *TypeAliasContext) GenericParams() IGenericParamsContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IGenericParamsContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IGenericParamsContext)
}

func (s *TypeAliasContext) REFINE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserREFINE, 0)
}

func (s *TypeAliasContext) AllBIT_OR() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserBIT_OR)
}

func (s *TypeAliasContext) BIT_OR(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserBIT_OR, i)
}

func (s *TypeAliasContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *TypeAliasContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeAliasContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeAliasContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterTypeAlias(s)
	}
}

func (s *TypeAliasContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitTypeAlias(s)
	}
}

func (s *TypeAliasContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitTypeAlias(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) TypeAlias() (localctx ITypeAliasContext) {
	localctx = NewTypeAliasContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 54, UnifiedParserRULE_typeAlias)
	var _la int

	p.SetState(527)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 61, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		p.SetState(499)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == UnifiedParserPUB {
			{
				p.SetState(498)
				p.Match(UnifiedParserPUB)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(501)
			p.Match(UnifiedParserTYPE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(502)
			p.Identifier()
		}
		p.SetState(504)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == UnifiedParserLT {
			{
				p.SetState(503)
				p.GenericParams()
			}

		}
		{
			p.SetState(506)
			p.Match(UnifiedParserASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(507)
			p.type_(0)
		}
		{
			p.SetState(508)
			p.Match(UnifiedParserSEMI)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		p.SetState(511)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == UnifiedParserPUB {
			{
				p.SetState(510)
				p.Match(UnifiedParserPUB)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(513)
			p.Match(UnifiedParserTYPE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(514)
			p.Identifier()
		}
		p.SetState(516)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == UnifiedParserLT {
			{
				p.SetState(515)
				p.GenericParams()
			}

		}
		{
			p.SetState(518)
			p.Match(UnifiedParserASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(519)
			p.type_(0)
		}
		{
			p.SetState(520)
			p.Match(UnifiedParserREFINE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(521)
			p.Match(UnifiedParserBIT_OR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(522)
			p.Identifier()
		}
		{
			p.SetState(523)
			p.Match(UnifiedParserBIT_OR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(524)
			p.expr(0)
		}
		{
			p.SetState(525)
			p.Match(UnifiedParserSEMI)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IConstantDeclContext is an interface to support dynamic dispatch.
type IConstantDeclContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CONST() antlr.TerminalNode
	Identifier() IIdentifierContext
	COLON() antlr.TerminalNode
	Type_() ITypeContext
	ASSIGN() antlr.TerminalNode
	Expr() IExprContext
	SEMI() antlr.TerminalNode
	PUB() antlr.TerminalNode

	// IsConstantDeclContext differentiates from other interfaces.
	IsConstantDeclContext()
}

type ConstantDeclContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyConstantDeclContext() *ConstantDeclContext {
	var p = new(ConstantDeclContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_constantDecl
	return p
}

func InitEmptyConstantDeclContext(p *ConstantDeclContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_constantDecl
}

func (*ConstantDeclContext) IsConstantDeclContext() {}

func NewConstantDeclContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ConstantDeclContext {
	var p = new(ConstantDeclContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_constantDecl

	return p
}

func (s *ConstantDeclContext) GetParser() antlr.Parser { return s.parser }

func (s *ConstantDeclContext) CONST() antlr.TerminalNode {
	return s.GetToken(UnifiedParserCONST, 0)
}

func (s *ConstantDeclContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ConstantDeclContext) COLON() antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOLON, 0)
}

func (s *ConstantDeclContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *ConstantDeclContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserASSIGN, 0)
}

func (s *ConstantDeclContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ConstantDeclContext) SEMI() antlr.TerminalNode {
	return s.GetToken(UnifiedParserSEMI, 0)
}

func (s *ConstantDeclContext) PUB() antlr.TerminalNode {
	return s.GetToken(UnifiedParserPUB, 0)
}

func (s *ConstantDeclContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ConstantDeclContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ConstantDeclContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterConstantDecl(s)
	}
}

func (s *ConstantDeclContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitConstantDecl(s)
	}
}

func (s *ConstantDeclContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitConstantDecl(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) ConstantDecl() (localctx IConstantDeclContext) {
	localctx = NewConstantDeclContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 56, UnifiedParserRULE_constantDecl)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(530)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserPUB {
		{
			p.SetState(529)
			p.Match(UnifiedParserPUB)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(532)
		p.Match(UnifiedParserCONST)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(533)
		p.Identifier()
	}
	{
		p.SetState(534)
		p.Match(UnifiedParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(535)
		p.type_(0)
	}
	{
		p.SetState(536)
		p.Match(UnifiedParserASSIGN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(537)
		p.expr(0)
	}
	{
		p.SetState(538)
		p.Match(UnifiedParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeContext is an interface to support dynamic dispatch.
type ITypeContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	LT() antlr.TerminalNode
	TypeList() ITypeListContext
	GT() antlr.TerminalNode
	FN() antlr.TerminalNode
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	ARROW() antlr.TerminalNode
	AllType_() []ITypeContext
	Type_(i int) ITypeContext
	BIT_AND() antlr.TerminalNode
	MUT() antlr.TerminalNode
	IMPL() antlr.TerminalNode
	BIT_OR() antlr.TerminalNode
	AllDOUBLE_COLON() []antlr.TerminalNode
	DOUBLE_COLON(i int) antlr.TerminalNode

	// IsTypeContext differentiates from other interfaces.
	IsTypeContext()
}

type TypeContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeContext() *TypeContext {
	var p = new(TypeContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_type
	return p
}

func InitEmptyTypeContext(p *TypeContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_type
}

func (*TypeContext) IsTypeContext() {}

func NewTypeContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeContext {
	var p = new(TypeContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_type

	return p
}

func (s *TypeContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *TypeContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *TypeContext) LT() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLT, 0)
}

func (s *TypeContext) TypeList() ITypeListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeListContext)
}

func (s *TypeContext) GT() antlr.TerminalNode {
	return s.GetToken(UnifiedParserGT, 0)
}

func (s *TypeContext) FN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserFN, 0)
}

func (s *TypeContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLPAREN, 0)
}

func (s *TypeContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRPAREN, 0)
}

func (s *TypeContext) ARROW() antlr.TerminalNode {
	return s.GetToken(UnifiedParserARROW, 0)
}

func (s *TypeContext) AllType_() []ITypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeContext); ok {
			len++
		}
	}

	tst := make([]ITypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeContext); ok {
			tst[i] = t.(ITypeContext)
			i++
		}
	}

	return tst
}

func (s *TypeContext) Type_(i int) ITypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *TypeContext) BIT_AND() antlr.TerminalNode {
	return s.GetToken(UnifiedParserBIT_AND, 0)
}

func (s *TypeContext) MUT() antlr.TerminalNode {
	return s.GetToken(UnifiedParserMUT, 0)
}

func (s *TypeContext) IMPL() antlr.TerminalNode {
	return s.GetToken(UnifiedParserIMPL, 0)
}

func (s *TypeContext) BIT_OR() antlr.TerminalNode {
	return s.GetToken(UnifiedParserBIT_OR, 0)
}

func (s *TypeContext) AllDOUBLE_COLON() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserDOUBLE_COLON)
}

func (s *TypeContext) DOUBLE_COLON(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserDOUBLE_COLON, i)
}

func (s *TypeContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterType(s)
	}
}

func (s *TypeContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitType(s)
	}
}

func (s *TypeContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitType(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) Type_() (localctx ITypeContext) {
	return p.type_(0)
}

func (p *UnifiedParser) type_(_p int) (localctx ITypeContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewTypeContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx ITypeContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 58
	p.EnterRecursionRule(localctx, 58, UnifiedParserRULE_type, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(567)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 65, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(541)
			p.Identifier()
		}
		p.SetState(546)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 63, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(542)
				p.Match(UnifiedParserLT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(543)
				p.TypeList()
			}
			{
				p.SetState(544)
				p.Match(UnifiedParserGT)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 2:
		{
			p.SetState(548)
			p.Match(UnifiedParserFN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(549)
			p.Match(UnifiedParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(551)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&306244774661455880) != 0) || _la == UnifiedParserIdentifier {
			{
				p.SetState(550)
				p.TypeList()
			}

		}
		{
			p.SetState(553)
			p.Match(UnifiedParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(554)
			p.Match(UnifiedParserARROW)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(555)
			p.type_(7)
		}

	case 3:
		{
			p.SetState(556)
			p.Match(UnifiedParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(557)
			p.TypeList()
		}
		{
			p.SetState(558)
			p.Match(UnifiedParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		{
			p.SetState(560)
			p.Match(UnifiedParserBIT_AND)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(561)
			p.type_(5)
		}

	case 5:
		{
			p.SetState(562)
			p.Match(UnifiedParserBIT_AND)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(563)
			p.Match(UnifiedParserMUT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(564)
			p.type_(4)
		}

	case 6:
		{
			p.SetState(565)
			p.Match(UnifiedParserIMPL)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(566)
			p.Identifier()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(581)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 68, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(579)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 67, p.GetParserRuleContext()) {
			case 1:
				localctx = NewTypeContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, UnifiedParserRULE_type)
				p.SetState(569)

				if !(p.Precpred(p.GetParserRuleContext(), 3)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 3)", ""))
					goto errorExit
				}
				{
					p.SetState(570)
					p.Match(UnifiedParserBIT_OR)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(571)
					p.type_(4)
				}

			case 2:
				localctx = NewTypeContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, UnifiedParserRULE_type)
				p.SetState(572)

				if !(p.Precpred(p.GetParserRuleContext(), 1)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 1)", ""))
					goto errorExit
				}
				p.SetState(575)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_alt = 1
				for ok := true; ok; ok = _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
					switch _alt {
					case 1:
						{
							p.SetState(573)
							p.Match(UnifiedParserDOUBLE_COLON)
							if p.HasError() {
								// Recognition error - abort rule
								goto errorExit
							}
						}
						{
							p.SetState(574)
							p.Identifier()
						}

					default:
						p.SetError(antlr.NewNoViableAltException(p, nil, nil, nil, nil, nil))
						goto errorExit
					}

					p.SetState(577)
					p.GetErrorHandler().Sync(p)
					_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 66, p.GetParserRuleContext())
					if p.HasError() {
						goto errorExit
					}
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(583)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 68, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITypeListContext is an interface to support dynamic dispatch.
type ITypeListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllType_() []ITypeContext
	Type_(i int) ITypeContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsTypeListContext differentiates from other interfaces.
	IsTypeListContext()
}

type TypeListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTypeListContext() *TypeListContext {
	var p = new(TypeListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_typeList
	return p
}

func InitEmptyTypeListContext(p *TypeListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_typeList
}

func (*TypeListContext) IsTypeListContext() {}

func NewTypeListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TypeListContext {
	var p = new(TypeListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_typeList

	return p
}

func (s *TypeListContext) GetParser() antlr.Parser { return s.parser }

func (s *TypeListContext) AllType_() []ITypeContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ITypeContext); ok {
			len++
		}
	}

	tst := make([]ITypeContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ITypeContext); ok {
			tst[i] = t.(ITypeContext)
			i++
		}
	}

	return tst
}

func (s *TypeListContext) Type_(i int) ITypeContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *TypeListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserCOMMA)
}

func (s *TypeListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOMMA, i)
}

func (s *TypeListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TypeListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TypeListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterTypeList(s)
	}
}

func (s *TypeListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitTypeList(s)
	}
}

func (s *TypeListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitTypeList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) TypeList() (localctx ITypeListContext) {
	localctx = NewTypeListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 60, UnifiedParserRULE_typeList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(584)
		p.type_(0)
	}
	p.SetState(589)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == UnifiedParserCOMMA {
		{
			p.SetState(585)
			p.Match(UnifiedParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(586)
			p.type_(0)
		}

		p.SetState(591)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStatementContext is an interface to support dynamic dispatch.
type IStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LetStatement() ILetStatementContext
	VarStatement() IVarStatementContext
	RegionStatement() IRegionStatementContext
	ExprStatement() IExprStatementContext
	ReturnStatement() IReturnStatementContext
	IfStatement() IIfStatementContext
	LoopStatement() ILoopStatementContext
	WhileStatement() IWhileStatementContext
	ForStatement() IForStatementContext
	SwitchStatement() ISwitchStatementContext
	BreakStatement() IBreakStatementContext
	ContinueStatement() IContinueStatementContext
	BlockStatement() IBlockStatementContext
	TryStatement() ITryStatementContext

	// IsStatementContext differentiates from other interfaces.
	IsStatementContext()
}

type StatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStatementContext() *StatementContext {
	var p = new(StatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_statement
	return p
}

func InitEmptyStatementContext(p *StatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_statement
}

func (*StatementContext) IsStatementContext() {}

func NewStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StatementContext {
	var p = new(StatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_statement

	return p
}

func (s *StatementContext) GetParser() antlr.Parser { return s.parser }

func (s *StatementContext) LetStatement() ILetStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILetStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILetStatementContext)
}

func (s *StatementContext) VarStatement() IVarStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IVarStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IVarStatementContext)
}

func (s *StatementContext) RegionStatement() IRegionStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IRegionStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IRegionStatementContext)
}

func (s *StatementContext) ExprStatement() IExprStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprStatementContext)
}

func (s *StatementContext) ReturnStatement() IReturnStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IReturnStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IReturnStatementContext)
}

func (s *StatementContext) IfStatement() IIfStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIfStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIfStatementContext)
}

func (s *StatementContext) LoopStatement() ILoopStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILoopStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILoopStatementContext)
}

func (s *StatementContext) WhileStatement() IWhileStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IWhileStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IWhileStatementContext)
}

func (s *StatementContext) ForStatement() IForStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IForStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IForStatementContext)
}

func (s *StatementContext) SwitchStatement() ISwitchStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISwitchStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISwitchStatementContext)
}

func (s *StatementContext) BreakStatement() IBreakStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBreakStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBreakStatementContext)
}

func (s *StatementContext) ContinueStatement() IContinueStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IContinueStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IContinueStatementContext)
}

func (s *StatementContext) BlockStatement() IBlockStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockStatementContext)
}

func (s *StatementContext) TryStatement() ITryStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITryStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITryStatementContext)
}

func (s *StatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterStatement(s)
	}
}

func (s *StatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitStatement(s)
	}
}

func (s *StatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) Statement() (localctx IStatementContext) {
	localctx = NewStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 62, UnifiedParserRULE_statement)
	p.SetState(606)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 70, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(592)
			p.LetStatement()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(593)
			p.VarStatement()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(594)
			p.RegionStatement()
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(595)
			p.ExprStatement()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(596)
			p.ReturnStatement()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(597)
			p.IfStatement()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(598)
			p.LoopStatement()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(599)
			p.WhileStatement()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(600)
			p.ForStatement()
		}

	case 10:
		p.EnterOuterAlt(localctx, 10)
		{
			p.SetState(601)
			p.SwitchStatement()
		}

	case 11:
		p.EnterOuterAlt(localctx, 11)
		{
			p.SetState(602)
			p.BreakStatement()
		}

	case 12:
		p.EnterOuterAlt(localctx, 12)
		{
			p.SetState(603)
			p.ContinueStatement()
		}

	case 13:
		p.EnterOuterAlt(localctx, 13)
		{
			p.SetState(604)
			p.BlockStatement()
		}

	case 14:
		p.EnterOuterAlt(localctx, 14)
		{
			p.SetState(605)
			p.TryStatement()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILetStatementContext is an interface to support dynamic dispatch.
type ILetStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LET() antlr.TerminalNode
	Identifier() IIdentifierContext
	ASSIGN() antlr.TerminalNode
	Expr() IExprContext
	SEMI() antlr.TerminalNode
	MUT() antlr.TerminalNode
	COLON() antlr.TerminalNode
	Type_() ITypeContext

	// IsLetStatementContext differentiates from other interfaces.
	IsLetStatementContext()
}

type LetStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLetStatementContext() *LetStatementContext {
	var p = new(LetStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_letStatement
	return p
}

func InitEmptyLetStatementContext(p *LetStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_letStatement
}

func (*LetStatementContext) IsLetStatementContext() {}

func NewLetStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LetStatementContext {
	var p = new(LetStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_letStatement

	return p
}

func (s *LetStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LetStatementContext) LET() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLET, 0)
}

func (s *LetStatementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *LetStatementContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserASSIGN, 0)
}

func (s *LetStatementContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *LetStatementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(UnifiedParserSEMI, 0)
}

func (s *LetStatementContext) MUT() antlr.TerminalNode {
	return s.GetToken(UnifiedParserMUT, 0)
}

func (s *LetStatementContext) COLON() antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOLON, 0)
}

func (s *LetStatementContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *LetStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LetStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LetStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterLetStatement(s)
	}
}

func (s *LetStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitLetStatement(s)
	}
}

func (s *LetStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitLetStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) LetStatement() (localctx ILetStatementContext) {
	localctx = NewLetStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 64, UnifiedParserRULE_letStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(608)
		p.Match(UnifiedParserLET)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(610)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserMUT {
		{
			p.SetState(609)
			p.Match(UnifiedParserMUT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(612)
		p.Identifier()
	}
	p.SetState(615)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserCOLON {
		{
			p.SetState(613)
			p.Match(UnifiedParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(614)
			p.type_(0)
		}

	}
	{
		p.SetState(617)
		p.Match(UnifiedParserASSIGN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(618)
		p.expr(0)
	}
	{
		p.SetState(619)
		p.Match(UnifiedParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IVarStatementContext is an interface to support dynamic dispatch.
type IVarStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	VAR() antlr.TerminalNode
	Identifier() IIdentifierContext
	COLON() antlr.TerminalNode
	Type_() ITypeContext
	SEMI() antlr.TerminalNode
	ASSIGN() antlr.TerminalNode
	Expr() IExprContext

	// IsVarStatementContext differentiates from other interfaces.
	IsVarStatementContext()
}

type VarStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyVarStatementContext() *VarStatementContext {
	var p = new(VarStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_varStatement
	return p
}

func InitEmptyVarStatementContext(p *VarStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_varStatement
}

func (*VarStatementContext) IsVarStatementContext() {}

func NewVarStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *VarStatementContext {
	var p = new(VarStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_varStatement

	return p
}

func (s *VarStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *VarStatementContext) VAR() antlr.TerminalNode {
	return s.GetToken(UnifiedParserVAR, 0)
}

func (s *VarStatementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *VarStatementContext) COLON() antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOLON, 0)
}

func (s *VarStatementContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *VarStatementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(UnifiedParserSEMI, 0)
}

func (s *VarStatementContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserASSIGN, 0)
}

func (s *VarStatementContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *VarStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *VarStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *VarStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterVarStatement(s)
	}
}

func (s *VarStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitVarStatement(s)
	}
}

func (s *VarStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitVarStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) VarStatement() (localctx IVarStatementContext) {
	localctx = NewVarStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 66, UnifiedParserRULE_varStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(621)
		p.Match(UnifiedParserVAR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(622)
		p.Identifier()
	}
	{
		p.SetState(623)
		p.Match(UnifiedParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(624)
		p.type_(0)
	}
	p.SetState(627)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserASSIGN {
		{
			p.SetState(625)
			p.Match(UnifiedParserASSIGN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(626)
			p.expr(0)
		}

	}
	{
		p.SetState(629)
		p.Match(UnifiedParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IRegionStatementContext is an interface to support dynamic dispatch.
type IRegionStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	REGION() antlr.TerminalNode
	Identifier() IIdentifierContext
	Block() IBlockContext

	// IsRegionStatementContext differentiates from other interfaces.
	IsRegionStatementContext()
}

type RegionStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyRegionStatementContext() *RegionStatementContext {
	var p = new(RegionStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_regionStatement
	return p
}

func InitEmptyRegionStatementContext(p *RegionStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_regionStatement
}

func (*RegionStatementContext) IsRegionStatementContext() {}

func NewRegionStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *RegionStatementContext {
	var p = new(RegionStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_regionStatement

	return p
}

func (s *RegionStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *RegionStatementContext) REGION() antlr.TerminalNode {
	return s.GetToken(UnifiedParserREGION, 0)
}

func (s *RegionStatementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *RegionStatementContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *RegionStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *RegionStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *RegionStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterRegionStatement(s)
	}
}

func (s *RegionStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitRegionStatement(s)
	}
}

func (s *RegionStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitRegionStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) RegionStatement() (localctx IRegionStatementContext) {
	localctx = NewRegionStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 68, UnifiedParserRULE_regionStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(631)
		p.Match(UnifiedParserREGION)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(632)
		p.Identifier()
	}
	{
		p.SetState(633)
		p.Block()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExprStatementContext is an interface to support dynamic dispatch.
type IExprStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Expr() IExprContext
	SEMI() antlr.TerminalNode

	// IsExprStatementContext differentiates from other interfaces.
	IsExprStatementContext()
}

type ExprStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprStatementContext() *ExprStatementContext {
	var p = new(ExprStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_exprStatement
	return p
}

func InitEmptyExprStatementContext(p *ExprStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_exprStatement
}

func (*ExprStatementContext) IsExprStatementContext() {}

func NewExprStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprStatementContext {
	var p = new(ExprStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_exprStatement

	return p
}

func (s *ExprStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprStatementContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprStatementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(UnifiedParserSEMI, 0)
}

func (s *ExprStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExprStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterExprStatement(s)
	}
}

func (s *ExprStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitExprStatement(s)
	}
}

func (s *ExprStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitExprStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) ExprStatement() (localctx IExprStatementContext) {
	localctx = NewExprStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 70, UnifiedParserRULE_exprStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(635)
		p.expr(0)
	}
	{
		p.SetState(636)
		p.Match(UnifiedParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IReturnStatementContext is an interface to support dynamic dispatch.
type IReturnStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	RETURN() antlr.TerminalNode
	SEMI() antlr.TerminalNode
	Expr() IExprContext

	// IsReturnStatementContext differentiates from other interfaces.
	IsReturnStatementContext()
}

type ReturnStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyReturnStatementContext() *ReturnStatementContext {
	var p = new(ReturnStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_returnStatement
	return p
}

func InitEmptyReturnStatementContext(p *ReturnStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_returnStatement
}

func (*ReturnStatementContext) IsReturnStatementContext() {}

func NewReturnStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ReturnStatementContext {
	var p = new(ReturnStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_returnStatement

	return p
}

func (s *ReturnStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ReturnStatementContext) RETURN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRETURN, 0)
}

func (s *ReturnStatementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(UnifiedParserSEMI, 0)
}

func (s *ReturnStatementContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ReturnStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ReturnStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ReturnStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterReturnStatement(s)
	}
}

func (s *ReturnStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitReturnStatement(s)
	}
}

func (s *ReturnStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitReturnStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) ReturnStatement() (localctx IReturnStatementContext) {
	localctx = NewReturnStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 72, UnifiedParserRULE_returnStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(638)
		p.Match(UnifiedParserRETURN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(640)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&844424999886890) != 0) || ((int64((_la-68)) & ^0x3f) == 0 && ((int64(1)<<(_la-68))&16675329) != 0) {
		{
			p.SetState(639)
			p.expr(0)
		}

	}
	{
		p.SetState(642)
		p.Match(UnifiedParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIfStatementContext is an interface to support dynamic dispatch.
type IIfStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllIF() []antlr.TerminalNode
	IF(i int) antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	AllBlock() []IBlockContext
	Block(i int) IBlockContext
	AllELSE() []antlr.TerminalNode
	ELSE(i int) antlr.TerminalNode

	// IsIfStatementContext differentiates from other interfaces.
	IsIfStatementContext()
}

type IfStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIfStatementContext() *IfStatementContext {
	var p = new(IfStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_ifStatement
	return p
}

func InitEmptyIfStatementContext(p *IfStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_ifStatement
}

func (*IfStatementContext) IsIfStatementContext() {}

func NewIfStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IfStatementContext {
	var p = new(IfStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_ifStatement

	return p
}

func (s *IfStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *IfStatementContext) AllIF() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserIF)
}

func (s *IfStatementContext) IF(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserIF, i)
}

func (s *IfStatementContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *IfStatementContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *IfStatementContext) AllBlock() []IBlockContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBlockContext); ok {
			len++
		}
	}

	tst := make([]IBlockContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBlockContext); ok {
			tst[i] = t.(IBlockContext)
			i++
		}
	}

	return tst
}

func (s *IfStatementContext) Block(i int) IBlockContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *IfStatementContext) AllELSE() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserELSE)
}

func (s *IfStatementContext) ELSE(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserELSE, i)
}

func (s *IfStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IfStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IfStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterIfStatement(s)
	}
}

func (s *IfStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitIfStatement(s)
	}
}

func (s *IfStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitIfStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) IfStatement() (localctx IIfStatementContext) {
	localctx = NewIfStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 74, UnifiedParserRULE_ifStatement)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(644)
		p.Match(UnifiedParserIF)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(645)
		p.expr(0)
	}
	{
		p.SetState(646)
		p.Block()
	}
	p.SetState(654)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 75, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(647)
				p.Match(UnifiedParserELSE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(648)
				p.Match(UnifiedParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(649)
				p.expr(0)
			}
			{
				p.SetState(650)
				p.Block()
			}

		}
		p.SetState(656)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 75, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(659)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserELSE {
		{
			p.SetState(657)
			p.Match(UnifiedParserELSE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(658)
			p.Block()
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILoopStatementContext is an interface to support dynamic dispatch.
type ILoopStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LOOP() antlr.TerminalNode
	Block() IBlockContext
	Identifier() IIdentifierContext
	COLON() antlr.TerminalNode

	// IsLoopStatementContext differentiates from other interfaces.
	IsLoopStatementContext()
}

type LoopStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLoopStatementContext() *LoopStatementContext {
	var p = new(LoopStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_loopStatement
	return p
}

func InitEmptyLoopStatementContext(p *LoopStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_loopStatement
}

func (*LoopStatementContext) IsLoopStatementContext() {}

func NewLoopStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LoopStatementContext {
	var p = new(LoopStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_loopStatement

	return p
}

func (s *LoopStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *LoopStatementContext) LOOP() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLOOP, 0)
}

func (s *LoopStatementContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *LoopStatementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *LoopStatementContext) COLON() antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOLON, 0)
}

func (s *LoopStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LoopStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LoopStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterLoopStatement(s)
	}
}

func (s *LoopStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitLoopStatement(s)
	}
}

func (s *LoopStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitLoopStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) LoopStatement() (localctx ILoopStatementContext) {
	localctx = NewLoopStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 76, UnifiedParserRULE_loopStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(664)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserIdentifier {
		{
			p.SetState(661)
			p.Identifier()
		}
		{
			p.SetState(662)
			p.Match(UnifiedParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(666)
		p.Match(UnifiedParserLOOP)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(667)
		p.Block()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IWhileStatementContext is an interface to support dynamic dispatch.
type IWhileStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	WHILE() antlr.TerminalNode
	Expr() IExprContext
	Block() IBlockContext
	Identifier() IIdentifierContext
	COLON() antlr.TerminalNode

	// IsWhileStatementContext differentiates from other interfaces.
	IsWhileStatementContext()
}

type WhileStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyWhileStatementContext() *WhileStatementContext {
	var p = new(WhileStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_whileStatement
	return p
}

func InitEmptyWhileStatementContext(p *WhileStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_whileStatement
}

func (*WhileStatementContext) IsWhileStatementContext() {}

func NewWhileStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *WhileStatementContext {
	var p = new(WhileStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_whileStatement

	return p
}

func (s *WhileStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *WhileStatementContext) WHILE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserWHILE, 0)
}

func (s *WhileStatementContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *WhileStatementContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *WhileStatementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *WhileStatementContext) COLON() antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOLON, 0)
}

func (s *WhileStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *WhileStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *WhileStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterWhileStatement(s)
	}
}

func (s *WhileStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitWhileStatement(s)
	}
}

func (s *WhileStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitWhileStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) WhileStatement() (localctx IWhileStatementContext) {
	localctx = NewWhileStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 78, UnifiedParserRULE_whileStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(672)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserIdentifier {
		{
			p.SetState(669)
			p.Identifier()
		}
		{
			p.SetState(670)
			p.Match(UnifiedParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(674)
		p.Match(UnifiedParserWHILE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(675)
		p.expr(0)
	}
	{
		p.SetState(676)
		p.Block()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IForStatementContext is an interface to support dynamic dispatch.
type IForStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	FOR() antlr.TerminalNode
	AllIdentifier() []IIdentifierContext
	Identifier(i int) IIdentifierContext
	IN() antlr.TerminalNode
	Expr() IExprContext
	Block() IBlockContext
	COLON() antlr.TerminalNode

	// IsForStatementContext differentiates from other interfaces.
	IsForStatementContext()
}

type ForStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyForStatementContext() *ForStatementContext {
	var p = new(ForStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_forStatement
	return p
}

func InitEmptyForStatementContext(p *ForStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_forStatement
}

func (*ForStatementContext) IsForStatementContext() {}

func NewForStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ForStatementContext {
	var p = new(ForStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_forStatement

	return p
}

func (s *ForStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ForStatementContext) FOR() antlr.TerminalNode {
	return s.GetToken(UnifiedParserFOR, 0)
}

func (s *ForStatementContext) AllIdentifier() []IIdentifierContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IIdentifierContext); ok {
			len++
		}
	}

	tst := make([]IIdentifierContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IIdentifierContext); ok {
			tst[i] = t.(IIdentifierContext)
			i++
		}
	}

	return tst
}

func (s *ForStatementContext) Identifier(i int) IIdentifierContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ForStatementContext) IN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserIN, 0)
}

func (s *ForStatementContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ForStatementContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ForStatementContext) COLON() antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOLON, 0)
}

func (s *ForStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ForStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ForStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterForStatement(s)
	}
}

func (s *ForStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitForStatement(s)
	}
}

func (s *ForStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitForStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) ForStatement() (localctx IForStatementContext) {
	localctx = NewForStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 80, UnifiedParserRULE_forStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(681)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserIdentifier {
		{
			p.SetState(678)
			p.Identifier()
		}
		{
			p.SetState(679)
			p.Match(UnifiedParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(683)
		p.Match(UnifiedParserFOR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(684)
		p.Identifier()
	}
	{
		p.SetState(685)
		p.Match(UnifiedParserIN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(686)
		p.expr(0)
	}
	{
		p.SetState(687)
		p.Block()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISwitchStatementContext is an interface to support dynamic dispatch.
type ISwitchStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	SWITCH() antlr.TerminalNode
	Expr() IExprContext
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	AllCaseClause() []ICaseClauseContext
	CaseClause(i int) ICaseClauseContext

	// IsSwitchStatementContext differentiates from other interfaces.
	IsSwitchStatementContext()
}

type SwitchStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySwitchStatementContext() *SwitchStatementContext {
	var p = new(SwitchStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_switchStatement
	return p
}

func InitEmptySwitchStatementContext(p *SwitchStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_switchStatement
}

func (*SwitchStatementContext) IsSwitchStatementContext() {}

func NewSwitchStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SwitchStatementContext {
	var p = new(SwitchStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_switchStatement

	return p
}

func (s *SwitchStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *SwitchStatementContext) SWITCH() antlr.TerminalNode {
	return s.GetToken(UnifiedParserSWITCH, 0)
}

func (s *SwitchStatementContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SwitchStatementContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLBRACE, 0)
}

func (s *SwitchStatementContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRBRACE, 0)
}

func (s *SwitchStatementContext) AllCaseClause() []ICaseClauseContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICaseClauseContext); ok {
			len++
		}
	}

	tst := make([]ICaseClauseContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICaseClauseContext); ok {
			tst[i] = t.(ICaseClauseContext)
			i++
		}
	}

	return tst
}

func (s *SwitchStatementContext) CaseClause(i int) ICaseClauseContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICaseClauseContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICaseClauseContext)
}

func (s *SwitchStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SwitchStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SwitchStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterSwitchStatement(s)
	}
}

func (s *SwitchStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitSwitchStatement(s)
	}
}

func (s *SwitchStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitSwitchStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) SwitchStatement() (localctx ISwitchStatementContext) {
	localctx = NewSwitchStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 82, UnifiedParserRULE_switchStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(689)
		p.Match(UnifiedParserSWITCH)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(690)
		p.expr(0)
	}
	{
		p.SetState(691)
		p.Match(UnifiedParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(695)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == UnifiedParserCASE {
		{
			p.SetState(692)
			p.CaseClause()
		}

		p.SetState(697)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}
	{
		p.SetState(698)
		p.Match(UnifiedParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICaseClauseContext is an interface to support dynamic dispatch.
type ICaseClauseContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CASE() antlr.TerminalNode
	Pattern() IPatternContext
	ARROW() antlr.TerminalNode
	COLON() antlr.TerminalNode
	Statement() IStatementContext
	Block() IBlockContext

	// IsCaseClauseContext differentiates from other interfaces.
	IsCaseClauseContext()
}

type CaseClauseContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseClauseContext() *CaseClauseContext {
	var p = new(CaseClauseContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_caseClause
	return p
}

func InitEmptyCaseClauseContext(p *CaseClauseContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_caseClause
}

func (*CaseClauseContext) IsCaseClauseContext() {}

func NewCaseClauseContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseClauseContext {
	var p = new(CaseClauseContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_caseClause

	return p
}

func (s *CaseClauseContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseClauseContext) CASE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserCASE, 0)
}

func (s *CaseClauseContext) Pattern() IPatternContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *CaseClauseContext) ARROW() antlr.TerminalNode {
	return s.GetToken(UnifiedParserARROW, 0)
}

func (s *CaseClauseContext) COLON() antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOLON, 0)
}

func (s *CaseClauseContext) Statement() IStatementContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *CaseClauseContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *CaseClauseContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseClauseContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseClauseContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterCaseClause(s)
	}
}

func (s *CaseClauseContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitCaseClause(s)
	}
}

func (s *CaseClauseContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitCaseClause(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) CaseClause() (localctx ICaseClauseContext) {
	localctx = NewCaseClauseContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 84, UnifiedParserRULE_caseClause)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(700)
		p.Match(UnifiedParserCASE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(701)
		p.pattern(0)
	}
	{
		p.SetState(702)
		_la = p.GetTokenStream().LA(1)

		if !(_la == UnifiedParserCOLON || _la == UnifiedParserARROW) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	p.SetState(705)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 81, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(703)
			p.Statement()
		}

	case 2:
		{
			p.SetState(704)
			p.Block()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBreakStatementContext is an interface to support dynamic dispatch.
type IBreakStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	BREAK() antlr.TerminalNode
	SEMI() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsBreakStatementContext differentiates from other interfaces.
	IsBreakStatementContext()
}

type BreakStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBreakStatementContext() *BreakStatementContext {
	var p = new(BreakStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_breakStatement
	return p
}

func InitEmptyBreakStatementContext(p *BreakStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_breakStatement
}

func (*BreakStatementContext) IsBreakStatementContext() {}

func NewBreakStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BreakStatementContext {
	var p = new(BreakStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_breakStatement

	return p
}

func (s *BreakStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BreakStatementContext) BREAK() antlr.TerminalNode {
	return s.GetToken(UnifiedParserBREAK, 0)
}

func (s *BreakStatementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(UnifiedParserSEMI, 0)
}

func (s *BreakStatementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *BreakStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BreakStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BreakStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterBreakStatement(s)
	}
}

func (s *BreakStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitBreakStatement(s)
	}
}

func (s *BreakStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitBreakStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) BreakStatement() (localctx IBreakStatementContext) {
	localctx = NewBreakStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 86, UnifiedParserRULE_breakStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(707)
		p.Match(UnifiedParserBREAK)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(709)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserIdentifier {
		{
			p.SetState(708)
			p.Identifier()
		}

	}
	{
		p.SetState(711)
		p.Match(UnifiedParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IContinueStatementContext is an interface to support dynamic dispatch.
type IContinueStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CONTINUE() antlr.TerminalNode
	SEMI() antlr.TerminalNode
	Identifier() IIdentifierContext

	// IsContinueStatementContext differentiates from other interfaces.
	IsContinueStatementContext()
}

type ContinueStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyContinueStatementContext() *ContinueStatementContext {
	var p = new(ContinueStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_continueStatement
	return p
}

func InitEmptyContinueStatementContext(p *ContinueStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_continueStatement
}

func (*ContinueStatementContext) IsContinueStatementContext() {}

func NewContinueStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ContinueStatementContext {
	var p = new(ContinueStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_continueStatement

	return p
}

func (s *ContinueStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *ContinueStatementContext) CONTINUE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserCONTINUE, 0)
}

func (s *ContinueStatementContext) SEMI() antlr.TerminalNode {
	return s.GetToken(UnifiedParserSEMI, 0)
}

func (s *ContinueStatementContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ContinueStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ContinueStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ContinueStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterContinueStatement(s)
	}
}

func (s *ContinueStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitContinueStatement(s)
	}
}

func (s *ContinueStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitContinueStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) ContinueStatement() (localctx IContinueStatementContext) {
	localctx = NewContinueStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 88, UnifiedParserRULE_continueStatement)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(713)
		p.Match(UnifiedParserCONTINUE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(715)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserIdentifier {
		{
			p.SetState(714)
			p.Identifier()
		}

	}
	{
		p.SetState(717)
		p.Match(UnifiedParserSEMI)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBlockStatementContext is an interface to support dynamic dispatch.
type IBlockStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Block() IBlockContext

	// IsBlockStatementContext differentiates from other interfaces.
	IsBlockStatementContext()
}

type BlockStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockStatementContext() *BlockStatementContext {
	var p = new(BlockStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_blockStatement
	return p
}

func InitEmptyBlockStatementContext(p *BlockStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_blockStatement
}

func (*BlockStatementContext) IsBlockStatementContext() {}

func NewBlockStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockStatementContext {
	var p = new(BlockStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_blockStatement

	return p
}

func (s *BlockStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockStatementContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *BlockStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterBlockStatement(s)
	}
}

func (s *BlockStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitBlockStatement(s)
	}
}

func (s *BlockStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitBlockStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) BlockStatement() (localctx IBlockStatementContext) {
	localctx = NewBlockStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 90, UnifiedParserRULE_blockStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(719)
		p.Block()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITryStatementContext is an interface to support dynamic dispatch.
type ITryStatementContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	TRY() antlr.TerminalNode
	Block() IBlockContext

	// IsTryStatementContext differentiates from other interfaces.
	IsTryStatementContext()
}

type TryStatementContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTryStatementContext() *TryStatementContext {
	var p = new(TryStatementContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_tryStatement
	return p
}

func InitEmptyTryStatementContext(p *TryStatementContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_tryStatement
}

func (*TryStatementContext) IsTryStatementContext() {}

func NewTryStatementContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TryStatementContext {
	var p = new(TryStatementContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_tryStatement

	return p
}

func (s *TryStatementContext) GetParser() antlr.Parser { return s.parser }

func (s *TryStatementContext) TRY() antlr.TerminalNode {
	return s.GetToken(UnifiedParserTRY, 0)
}

func (s *TryStatementContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *TryStatementContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TryStatementContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TryStatementContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterTryStatement(s)
	}
}

func (s *TryStatementContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitTryStatement(s)
	}
}

func (s *TryStatementContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitTryStatement(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) TryStatement() (localctx ITryStatementContext) {
	localctx = NewTryStatementContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 92, UnifiedParserRULE_tryStatement)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(721)
		p.Match(UnifiedParserTRY)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(722)
		p.Block()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPatternContext is an interface to support dynamic dispatch.
type IPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	UNDERSCORE() antlr.TerminalNode
	Literal() ILiteralContext
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	PatternList() IPatternListContext
	LET() antlr.TerminalNode
	COLON() antlr.TerminalNode
	Type_() ITypeContext
	IF() antlr.TerminalNode
	Expr() IExprContext
	LBRACE() antlr.TerminalNode
	FieldPatternList() IFieldPatternListContext
	RBRACE() antlr.TerminalNode
	AllPattern() []IPatternContext
	Pattern(i int) IPatternContext
	RANGE() antlr.TerminalNode

	// IsPatternContext differentiates from other interfaces.
	IsPatternContext()
}

type PatternContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPatternContext() *PatternContext {
	var p = new(PatternContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_pattern
	return p
}

func InitEmptyPatternContext(p *PatternContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_pattern
}

func (*PatternContext) IsPatternContext() {}

func NewPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PatternContext {
	var p = new(PatternContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_pattern

	return p
}

func (s *PatternContext) GetParser() antlr.Parser { return s.parser }

func (s *PatternContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PatternContext) UNDERSCORE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserUNDERSCORE, 0)
}

func (s *PatternContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *PatternContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLPAREN, 0)
}

func (s *PatternContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRPAREN, 0)
}

func (s *PatternContext) PatternList() IPatternListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternListContext)
}

func (s *PatternContext) LET() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLET, 0)
}

func (s *PatternContext) COLON() antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOLON, 0)
}

func (s *PatternContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *PatternContext) IF() antlr.TerminalNode {
	return s.GetToken(UnifiedParserIF, 0)
}

func (s *PatternContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *PatternContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLBRACE, 0)
}

func (s *PatternContext) FieldPatternList() IFieldPatternListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldPatternListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldPatternListContext)
}

func (s *PatternContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRBRACE, 0)
}

func (s *PatternContext) AllPattern() []IPatternContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPatternContext); ok {
			len++
		}
	}

	tst := make([]IPatternContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPatternContext); ok {
			tst[i] = t.(IPatternContext)
			i++
		}
	}

	return tst
}

func (s *PatternContext) Pattern(i int) IPatternContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *PatternContext) RANGE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRANGE, 0)
}

func (s *PatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PatternContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterPattern(s)
	}
}

func (s *PatternContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitPattern(s)
	}
}

func (s *PatternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitPattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) Pattern() (localctx IPatternContext) {
	return p.pattern(0)
}

func (p *UnifiedParser) pattern(_p int) (localctx IPatternContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewPatternContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IPatternContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 94
	p.EnterRecursionRule(localctx, 94, UnifiedParserRULE_pattern, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(755)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 88, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(725)
			p.Identifier()
		}

	case 2:
		{
			p.SetState(726)
			p.Match(UnifiedParserUNDERSCORE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 3:
		{
			p.SetState(727)
			p.Literal()
		}

	case 4:
		{
			p.SetState(728)
			p.Identifier()
		}
		{
			p.SetState(729)
			p.Match(UnifiedParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(731)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-9222246136947933176) != 0) || ((int64((_la-85)) & ^0x3f) == 0 && ((int64(1)<<(_la-85))&127) != 0) {
			{
				p.SetState(730)
				p.PatternList()
			}

		}
		{
			p.SetState(733)
			p.Match(UnifiedParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 5:
		{
			p.SetState(735)
			p.Match(UnifiedParserLET)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(736)
			p.Identifier()
		}
		p.SetState(739)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 85, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(737)
				p.Match(UnifiedParserCOLON)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(738)
				p.type_(0)
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}
		p.SetState(743)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 86, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(741)
				p.Match(UnifiedParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(742)
				p.expr(0)
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 6:
		{
			p.SetState(745)
			p.Identifier()
		}
		{
			p.SetState(746)
			p.Match(UnifiedParserLBRACE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(747)
			p.FieldPatternList()
		}
		{
			p.SetState(748)
			p.Match(UnifiedParserRBRACE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 7:
		{
			p.SetState(750)
			p.Match(UnifiedParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(752)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&-9222246136947933176) != 0) || ((int64((_la-85)) & ^0x3f) == 0 && ((int64(1)<<(_la-85))&127) != 0) {
			{
				p.SetState(751)
				p.PatternList()
			}

		}
		{
			p.SetState(754)
			p.Match(UnifiedParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(762)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 89, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			localctx = NewPatternContext(p, _parentctx, _parentState)
			p.PushNewRecursionContext(localctx, _startState, UnifiedParserRULE_pattern)
			p.SetState(757)

			if !(p.Precpred(p.GetParserRuleContext(), 5)) {
				p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
				goto errorExit
			}
			{
				p.SetState(758)
				p.Match(UnifiedParserRANGE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(759)
				p.pattern(6)
			}

		}
		p.SetState(764)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 89, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPatternListContext is an interface to support dynamic dispatch.
type IPatternListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllPattern() []IPatternContext
	Pattern(i int) IPatternContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsPatternListContext differentiates from other interfaces.
	IsPatternListContext()
}

type PatternListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPatternListContext() *PatternListContext {
	var p = new(PatternListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_patternList
	return p
}

func InitEmptyPatternListContext(p *PatternListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_patternList
}

func (*PatternListContext) IsPatternListContext() {}

func NewPatternListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PatternListContext {
	var p = new(PatternListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_patternList

	return p
}

func (s *PatternListContext) GetParser() antlr.Parser { return s.parser }

func (s *PatternListContext) AllPattern() []IPatternContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IPatternContext); ok {
			len++
		}
	}

	tst := make([]IPatternContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IPatternContext); ok {
			tst[i] = t.(IPatternContext)
			i++
		}
	}

	return tst
}

func (s *PatternListContext) Pattern(i int) IPatternContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *PatternListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserCOMMA)
}

func (s *PatternListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOMMA, i)
}

func (s *PatternListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PatternListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PatternListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterPatternList(s)
	}
}

func (s *PatternListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitPatternList(s)
	}
}

func (s *PatternListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitPatternList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) PatternList() (localctx IPatternListContext) {
	localctx = NewPatternListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 96, UnifiedParserRULE_patternList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(765)
		p.pattern(0)
	}
	p.SetState(770)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == UnifiedParserCOMMA {
		{
			p.SetState(766)
			p.Match(UnifiedParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(767)
			p.pattern(0)
		}

		p.SetState(772)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFieldPatternContext is an interface to support dynamic dispatch.
type IFieldPatternContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	COLON() antlr.TerminalNode
	Pattern() IPatternContext
	RANGE() antlr.TerminalNode

	// IsFieldPatternContext differentiates from other interfaces.
	IsFieldPatternContext()
}

type FieldPatternContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldPatternContext() *FieldPatternContext {
	var p = new(FieldPatternContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_fieldPattern
	return p
}

func InitEmptyFieldPatternContext(p *FieldPatternContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_fieldPattern
}

func (*FieldPatternContext) IsFieldPatternContext() {}

func NewFieldPatternContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldPatternContext {
	var p = new(FieldPatternContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_fieldPattern

	return p
}

func (s *FieldPatternContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldPatternContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *FieldPatternContext) COLON() antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOLON, 0)
}

func (s *FieldPatternContext) Pattern() IPatternContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *FieldPatternContext) RANGE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRANGE, 0)
}

func (s *FieldPatternContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldPatternContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldPatternContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterFieldPattern(s)
	}
}

func (s *FieldPatternContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitFieldPattern(s)
	}
}

func (s *FieldPatternContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitFieldPattern(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) FieldPattern() (localctx IFieldPatternContext) {
	localctx = NewFieldPatternContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 98, UnifiedParserRULE_fieldPattern)
	p.SetState(779)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 91, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(773)
			p.Identifier()
		}
		{
			p.SetState(774)
			p.Match(UnifiedParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(775)
			p.pattern(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(777)
			p.Identifier()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(778)
			p.Match(UnifiedParserRANGE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFieldPatternListContext is an interface to support dynamic dispatch.
type IFieldPatternListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllFieldPattern() []IFieldPatternContext
	FieldPattern(i int) IFieldPatternContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsFieldPatternListContext differentiates from other interfaces.
	IsFieldPatternListContext()
}

type FieldPatternListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldPatternListContext() *FieldPatternListContext {
	var p = new(FieldPatternListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_fieldPatternList
	return p
}

func InitEmptyFieldPatternListContext(p *FieldPatternListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_fieldPatternList
}

func (*FieldPatternListContext) IsFieldPatternListContext() {}

func NewFieldPatternListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldPatternListContext {
	var p = new(FieldPatternListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_fieldPatternList

	return p
}

func (s *FieldPatternListContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldPatternListContext) AllFieldPattern() []IFieldPatternContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFieldPatternContext); ok {
			len++
		}
	}

	tst := make([]IFieldPatternContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFieldPatternContext); ok {
			tst[i] = t.(IFieldPatternContext)
			i++
		}
	}

	return tst
}

func (s *FieldPatternListContext) FieldPattern(i int) IFieldPatternContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldPatternContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldPatternContext)
}

func (s *FieldPatternListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserCOMMA)
}

func (s *FieldPatternListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOMMA, i)
}

func (s *FieldPatternListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldPatternListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldPatternListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterFieldPatternList(s)
	}
}

func (s *FieldPatternListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitFieldPatternList(s)
	}
}

func (s *FieldPatternListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitFieldPatternList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) FieldPatternList() (localctx IFieldPatternListContext) {
	localctx = NewFieldPatternListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 100, UnifiedParserRULE_fieldPatternList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(781)
		p.FieldPattern()
	}
	p.SetState(786)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == UnifiedParserCOMMA {
		{
			p.SetState(782)
			p.Match(UnifiedParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(783)
			p.FieldPattern()
		}

		p.SetState(788)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IExprContext is an interface to support dynamic dispatch.
type IExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Primary() IPrimaryContext
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	INC() antlr.TerminalNode
	DEC() antlr.TerminalNode
	PLUS() antlr.TerminalNode
	MINUS() antlr.TerminalNode
	NOT() antlr.TerminalNode
	BIT_NOT() antlr.TerminalNode
	MOVE() antlr.TerminalNode
	AWAIT() antlr.TerminalNode
	LambdaExpr() ILambdaExprContext
	AsyncExpr() IAsyncExprContext
	AllIF() []antlr.TerminalNode
	IF(i int) antlr.TerminalNode
	AllBlock() []IBlockContext
	Block(i int) IBlockContext
	AllELSE() []antlr.TerminalNode
	ELSE(i int) antlr.TerminalNode
	SWITCH() antlr.TerminalNode
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	AllCaseExpr() []ICaseExprContext
	CaseExpr(i int) ICaseExprContext
	STAR() antlr.TerminalNode
	DIV() antlr.TerminalNode
	MOD() antlr.TerminalNode
	LSHIFT() antlr.TerminalNode
	RSHIFT() antlr.TerminalNode
	LT() antlr.TerminalNode
	LE() antlr.TerminalNode
	GT() antlr.TerminalNode
	GE() antlr.TerminalNode
	EQ() antlr.TerminalNode
	NE() antlr.TerminalNode
	BIT_AND() antlr.TerminalNode
	BIT_XOR() antlr.TerminalNode
	BIT_OR() antlr.TerminalNode
	AND() antlr.TerminalNode
	OR() antlr.TerminalNode
	QUESTION() antlr.TerminalNode
	COLON() antlr.TerminalNode
	ASSIGN() antlr.TerminalNode
	PLUS_ASSIGN() antlr.TerminalNode
	MINUS_ASSIGN() antlr.TerminalNode
	STAR_ASSIGN() antlr.TerminalNode
	DIV_ASSIGN() antlr.TerminalNode
	MOD_ASSIGN() antlr.TerminalNode
	LSHIFT_ASSIGN() antlr.TerminalNode
	RSHIFT_ASSIGN() antlr.TerminalNode
	AND_ASSIGN() antlr.TerminalNode
	XOR_ASSIGN() antlr.TerminalNode
	OR_ASSIGN() antlr.TerminalNode
	RANGE() antlr.TerminalNode
	RANGE_INCL() antlr.TerminalNode
	NULL_COND() antlr.TerminalNode
	DOT() antlr.TerminalNode
	Identifier() IIdentifierContext
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	ArgList() IArgListContext
	LBRACK() antlr.TerminalNode
	RBRACK() antlr.TerminalNode

	// IsExprContext differentiates from other interfaces.
	IsExprContext()
}

type ExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyExprContext() *ExprContext {
	var p = new(ExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_expr
	return p
}

func InitEmptyExprContext(p *ExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_expr
}

func (*ExprContext) IsExprContext() {}

func NewExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ExprContext {
	var p = new(ExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_expr

	return p
}

func (s *ExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ExprContext) Primary() IPrimaryContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPrimaryContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPrimaryContext)
}

func (s *ExprContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ExprContext) INC() antlr.TerminalNode {
	return s.GetToken(UnifiedParserINC, 0)
}

func (s *ExprContext) DEC() antlr.TerminalNode {
	return s.GetToken(UnifiedParserDEC, 0)
}

func (s *ExprContext) PLUS() antlr.TerminalNode {
	return s.GetToken(UnifiedParserPLUS, 0)
}

func (s *ExprContext) MINUS() antlr.TerminalNode {
	return s.GetToken(UnifiedParserMINUS, 0)
}

func (s *ExprContext) NOT() antlr.TerminalNode {
	return s.GetToken(UnifiedParserNOT, 0)
}

func (s *ExprContext) BIT_NOT() antlr.TerminalNode {
	return s.GetToken(UnifiedParserBIT_NOT, 0)
}

func (s *ExprContext) MOVE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserMOVE, 0)
}

func (s *ExprContext) AWAIT() antlr.TerminalNode {
	return s.GetToken(UnifiedParserAWAIT, 0)
}

func (s *ExprContext) LambdaExpr() ILambdaExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILambdaExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILambdaExprContext)
}

func (s *ExprContext) AsyncExpr() IAsyncExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IAsyncExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IAsyncExprContext)
}

func (s *ExprContext) AllIF() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserIF)
}

func (s *ExprContext) IF(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserIF, i)
}

func (s *ExprContext) AllBlock() []IBlockContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IBlockContext); ok {
			len++
		}
	}

	tst := make([]IBlockContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IBlockContext); ok {
			tst[i] = t.(IBlockContext)
			i++
		}
	}

	return tst
}

func (s *ExprContext) Block(i int) IBlockContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *ExprContext) AllELSE() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserELSE)
}

func (s *ExprContext) ELSE(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserELSE, i)
}

func (s *ExprContext) SWITCH() antlr.TerminalNode {
	return s.GetToken(UnifiedParserSWITCH, 0)
}

func (s *ExprContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLBRACE, 0)
}

func (s *ExprContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRBRACE, 0)
}

func (s *ExprContext) AllCaseExpr() []ICaseExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(ICaseExprContext); ok {
			len++
		}
	}

	tst := make([]ICaseExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(ICaseExprContext); ok {
			tst[i] = t.(ICaseExprContext)
			i++
		}
	}

	return tst
}

func (s *ExprContext) CaseExpr(i int) ICaseExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ICaseExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(ICaseExprContext)
}

func (s *ExprContext) STAR() antlr.TerminalNode {
	return s.GetToken(UnifiedParserSTAR, 0)
}

func (s *ExprContext) DIV() antlr.TerminalNode {
	return s.GetToken(UnifiedParserDIV, 0)
}

func (s *ExprContext) MOD() antlr.TerminalNode {
	return s.GetToken(UnifiedParserMOD, 0)
}

func (s *ExprContext) LSHIFT() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLSHIFT, 0)
}

func (s *ExprContext) RSHIFT() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRSHIFT, 0)
}

func (s *ExprContext) LT() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLT, 0)
}

func (s *ExprContext) LE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLE, 0)
}

func (s *ExprContext) GT() antlr.TerminalNode {
	return s.GetToken(UnifiedParserGT, 0)
}

func (s *ExprContext) GE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserGE, 0)
}

func (s *ExprContext) EQ() antlr.TerminalNode {
	return s.GetToken(UnifiedParserEQ, 0)
}

func (s *ExprContext) NE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserNE, 0)
}

func (s *ExprContext) BIT_AND() antlr.TerminalNode {
	return s.GetToken(UnifiedParserBIT_AND, 0)
}

func (s *ExprContext) BIT_XOR() antlr.TerminalNode {
	return s.GetToken(UnifiedParserBIT_XOR, 0)
}

func (s *ExprContext) BIT_OR() antlr.TerminalNode {
	return s.GetToken(UnifiedParserBIT_OR, 0)
}

func (s *ExprContext) AND() antlr.TerminalNode {
	return s.GetToken(UnifiedParserAND, 0)
}

func (s *ExprContext) OR() antlr.TerminalNode {
	return s.GetToken(UnifiedParserOR, 0)
}

func (s *ExprContext) QUESTION() antlr.TerminalNode {
	return s.GetToken(UnifiedParserQUESTION, 0)
}

func (s *ExprContext) COLON() antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOLON, 0)
}

func (s *ExprContext) ASSIGN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserASSIGN, 0)
}

func (s *ExprContext) PLUS_ASSIGN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserPLUS_ASSIGN, 0)
}

func (s *ExprContext) MINUS_ASSIGN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserMINUS_ASSIGN, 0)
}

func (s *ExprContext) STAR_ASSIGN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserSTAR_ASSIGN, 0)
}

func (s *ExprContext) DIV_ASSIGN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserDIV_ASSIGN, 0)
}

func (s *ExprContext) MOD_ASSIGN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserMOD_ASSIGN, 0)
}

func (s *ExprContext) LSHIFT_ASSIGN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLSHIFT_ASSIGN, 0)
}

func (s *ExprContext) RSHIFT_ASSIGN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRSHIFT_ASSIGN, 0)
}

func (s *ExprContext) AND_ASSIGN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserAND_ASSIGN, 0)
}

func (s *ExprContext) XOR_ASSIGN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserXOR_ASSIGN, 0)
}

func (s *ExprContext) OR_ASSIGN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserOR_ASSIGN, 0)
}

func (s *ExprContext) RANGE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRANGE, 0)
}

func (s *ExprContext) RANGE_INCL() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRANGE_INCL, 0)
}

func (s *ExprContext) NULL_COND() antlr.TerminalNode {
	return s.GetToken(UnifiedParserNULL_COND, 0)
}

func (s *ExprContext) DOT() antlr.TerminalNode {
	return s.GetToken(UnifiedParserDOT, 0)
}

func (s *ExprContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ExprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLPAREN, 0)
}

func (s *ExprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRPAREN, 0)
}

func (s *ExprContext) ArgList() IArgListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IArgListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IArgListContext)
}

func (s *ExprContext) LBRACK() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLBRACK, 0)
}

func (s *ExprContext) RBRACK() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRBRACK, 0)
}

func (s *ExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterExpr(s)
	}
}

func (s *ExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitExpr(s)
	}
}

func (s *ExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) Expr() (localctx IExprContext) {
	return p.expr(0)
}

func (p *UnifiedParser) expr(_p int) (localctx IExprContext) {
	var _parentctx antlr.ParserRuleContext = p.GetParserRuleContext()

	_parentState := p.GetState()
	localctx = NewExprContext(p, p.GetParserRuleContext(), _parentState)
	var _prevctx IExprContext = localctx
	var _ antlr.ParserRuleContext = _prevctx // TODO: To prevent unused variable warning.
	_startState := 102
	p.EnterRecursionRule(localctx, 102, UnifiedParserRULE_expr, _p)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(827)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 96, p.GetParserRuleContext()) {
	case 1:
		{
			p.SetState(790)
			p.Primary()
		}

	case 2:
		{
			p.SetState(791)
			_la = p.GetTokenStream().LA(1)

			if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&844424999362560) != 0) {
				p.GetErrorHandler().RecoverInline(p)
			} else {
				p.GetErrorHandler().ReportMatch(p)
				p.Consume()
			}
		}
		{
			p.SetState(792)
			p.expr(19)
		}

	case 3:
		{
			p.SetState(793)
			p.Match(UnifiedParserMOVE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(794)
			p.expr(18)
		}

	case 4:
		{
			p.SetState(795)
			p.Match(UnifiedParserAWAIT)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(796)
			p.expr(17)
		}

	case 5:
		{
			p.SetState(797)
			p.LambdaExpr()
		}

	case 6:
		{
			p.SetState(798)
			p.AsyncExpr()
		}

	case 7:
		{
			p.SetState(799)
			p.Match(UnifiedParserIF)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(800)
			p.expr(0)
		}
		{
			p.SetState(801)
			p.Block()
		}
		p.SetState(809)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 93, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(802)
					p.Match(UnifiedParserELSE)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(803)
					p.Match(UnifiedParserIF)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(804)
					p.expr(0)
				}
				{
					p.SetState(805)
					p.Block()
				}

			}
			p.SetState(811)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 93, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}
		p.SetState(814)
		p.GetErrorHandler().Sync(p)

		if p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 94, p.GetParserRuleContext()) == 1 {
			{
				p.SetState(812)
				p.Match(UnifiedParserELSE)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(813)
				p.Block()
			}

		} else if p.HasError() { // JIM
			goto errorExit
		}

	case 8:
		{
			p.SetState(816)
			p.Match(UnifiedParserSWITCH)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(817)
			p.expr(0)
		}
		{
			p.SetState(818)
			p.Match(UnifiedParserLBRACE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(822)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		for _la == UnifiedParserCASE {
			{
				p.SetState(819)
				p.CaseExpr()
			}

			p.SetState(824)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_la = p.GetTokenStream().LA(1)
		}
		{
			p.SetState(825)
			p.Match(UnifiedParserRBRACE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}
	p.GetParserRuleContext().SetStop(p.GetTokenStream().LT(-1))
	p.SetState(895)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 100, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			if p.GetParseListeners() != nil {
				p.TriggerExitRuleEvent()
			}
			_prevctx = localctx
			p.SetState(893)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}

			switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 99, p.GetParserRuleContext()) {
			case 1:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, UnifiedParserRULE_expr)
				p.SetState(829)

				if !(p.Precpred(p.GetParserRuleContext(), 16)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 16)", ""))
					goto errorExit
				}
				{
					p.SetState(830)
					_la = p.GetTokenStream().LA(1)

					if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&229376) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(831)
					p.expr(17)
				}

			case 2:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, UnifiedParserRULE_expr)
				p.SetState(832)

				if !(p.Precpred(p.GetParserRuleContext(), 15)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 15)", ""))
					goto errorExit
				}
				{
					p.SetState(833)
					_la = p.GetTokenStream().LA(1)

					if !(_la == UnifiedParserPLUS || _la == UnifiedParserMINUS) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(834)
					p.expr(16)
				}

			case 3:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, UnifiedParserRULE_expr)
				p.SetState(835)

				if !(p.Precpred(p.GetParserRuleContext(), 14)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 14)", ""))
					goto errorExit
				}
				{
					p.SetState(836)
					_la = p.GetTokenStream().LA(1)

					if !(_la == UnifiedParserLSHIFT || _la == UnifiedParserRSHIFT) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(837)
					p.expr(15)
				}

			case 4:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, UnifiedParserRULE_expr)
				p.SetState(838)

				if !(p.Precpred(p.GetParserRuleContext(), 13)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 13)", ""))
					goto errorExit
				}
				{
					p.SetState(839)
					_la = p.GetTokenStream().LA(1)

					if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&8053063680) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(840)
					p.expr(14)
				}

			case 5:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, UnifiedParserRULE_expr)
				p.SetState(841)

				if !(p.Precpred(p.GetParserRuleContext(), 12)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 12)", ""))
					goto errorExit
				}
				{
					p.SetState(842)
					_la = p.GetTokenStream().LA(1)

					if !(_la == UnifiedParserEQ || _la == UnifiedParserNE) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(843)
					p.expr(13)
				}

			case 6:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, UnifiedParserRULE_expr)
				p.SetState(844)

				if !(p.Precpred(p.GetParserRuleContext(), 11)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 11)", ""))
					goto errorExit
				}
				{
					p.SetState(845)
					p.Match(UnifiedParserBIT_AND)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(846)
					p.expr(12)
				}

			case 7:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, UnifiedParserRULE_expr)
				p.SetState(847)

				if !(p.Precpred(p.GetParserRuleContext(), 10)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 10)", ""))
					goto errorExit
				}
				{
					p.SetState(848)
					p.Match(UnifiedParserBIT_XOR)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(849)
					p.expr(11)
				}

			case 8:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, UnifiedParserRULE_expr)
				p.SetState(850)

				if !(p.Precpred(p.GetParserRuleContext(), 9)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 9)", ""))
					goto errorExit
				}
				{
					p.SetState(851)
					p.Match(UnifiedParserBIT_OR)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(852)
					p.expr(10)
				}

			case 9:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, UnifiedParserRULE_expr)
				p.SetState(853)

				if !(p.Precpred(p.GetParserRuleContext(), 8)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 8)", ""))
					goto errorExit
				}
				{
					p.SetState(854)
					p.Match(UnifiedParserAND)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(855)
					p.expr(9)
				}

			case 10:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, UnifiedParserRULE_expr)
				p.SetState(856)

				if !(p.Precpred(p.GetParserRuleContext(), 7)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 7)", ""))
					goto errorExit
				}
				{
					p.SetState(857)
					p.Match(UnifiedParserOR)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(858)
					p.expr(8)
				}

			case 11:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, UnifiedParserRULE_expr)
				p.SetState(859)

				if !(p.Precpred(p.GetParserRuleContext(), 6)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 6)", ""))
					goto errorExit
				}
				{
					p.SetState(860)
					p.Match(UnifiedParserQUESTION)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(861)
					p.expr(0)
				}
				{
					p.SetState(862)
					p.Match(UnifiedParserCOLON)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(863)
					p.expr(7)
				}

			case 12:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, UnifiedParserRULE_expr)
				p.SetState(865)

				if !(p.Precpred(p.GetParserRuleContext(), 5)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 5)", ""))
					goto errorExit
				}
				{
					p.SetState(866)
					_la = p.GetTokenStream().LA(1)

					if !((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&263874200731648) != 0) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}
				{
					p.SetState(867)
					p.expr(6)
				}

			case 13:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, UnifiedParserRULE_expr)
				p.SetState(868)

				if !(p.Precpred(p.GetParserRuleContext(), 24)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 24)", ""))
					goto errorExit
				}
				{
					p.SetState(869)
					p.Match(UnifiedParserDOT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(870)
					p.Identifier()
				}

			case 14:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, UnifiedParserRULE_expr)
				p.SetState(871)

				if !(p.Precpred(p.GetParserRuleContext(), 23)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 23)", ""))
					goto errorExit
				}
				{
					p.SetState(872)
					p.Match(UnifiedParserDOT)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(873)
					p.Identifier()
				}
				{
					p.SetState(874)
					p.Match(UnifiedParserLPAREN)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(876)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&844424999886890) != 0) || ((int64((_la-68)) & ^0x3f) == 0 && ((int64(1)<<(_la-68))&16675329) != 0) {
					{
						p.SetState(875)
						p.ArgList()
					}

				}
				{
					p.SetState(878)
					p.Match(UnifiedParserRPAREN)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 15:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, UnifiedParserRULE_expr)
				p.SetState(880)

				if !(p.Precpred(p.GetParserRuleContext(), 22)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 22)", ""))
					goto errorExit
				}
				{
					p.SetState(881)
					p.Match(UnifiedParserLBRACK)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(882)
					p.expr(0)
				}
				{
					p.SetState(883)
					p.Match(UnifiedParserRBRACK)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 16:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, UnifiedParserRULE_expr)
				p.SetState(885)

				if !(p.Precpred(p.GetParserRuleContext(), 21)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 21)", ""))
					goto errorExit
				}
				{
					p.SetState(886)
					p.Match(UnifiedParserLPAREN)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				p.SetState(888)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_la = p.GetTokenStream().LA(1)

				if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&844424999886890) != 0) || ((int64((_la-68)) & ^0x3f) == 0 && ((int64(1)<<(_la-68))&16675329) != 0) {
					{
						p.SetState(887)
						p.ArgList()
					}

				}
				{
					p.SetState(890)
					p.Match(UnifiedParserRPAREN)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}

			case 17:
				localctx = NewExprContext(p, _parentctx, _parentState)
				p.PushNewRecursionContext(localctx, _startState, UnifiedParserRULE_expr)
				p.SetState(891)

				if !(p.Precpred(p.GetParserRuleContext(), 20)) {
					p.SetError(antlr.NewFailedPredicateException(p, "p.Precpred(p.GetParserRuleContext(), 20)", ""))
					goto errorExit
				}
				{
					p.SetState(892)
					_la = p.GetTokenStream().LA(1)

					if !(_la == UnifiedParserINC || _la == UnifiedParserDEC) {
						p.GetErrorHandler().RecoverInline(p)
					} else {
						p.GetErrorHandler().ReportMatch(p)
						p.Consume()
					}
				}

			case antlr.ATNInvalidAltNumber:
				goto errorExit
			}

		}
		p.SetState(897)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 100, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.UnrollRecursionContexts(_parentctx)
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ICaseExprContext is an interface to support dynamic dispatch.
type ICaseExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	CASE() antlr.TerminalNode
	Pattern() IPatternContext
	Expr() IExprContext
	ARROW() antlr.TerminalNode
	COLON() antlr.TerminalNode

	// IsCaseExprContext differentiates from other interfaces.
	IsCaseExprContext()
}

type CaseExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyCaseExprContext() *CaseExprContext {
	var p = new(CaseExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_caseExpr
	return p
}

func InitEmptyCaseExprContext(p *CaseExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_caseExpr
}

func (*CaseExprContext) IsCaseExprContext() {}

func NewCaseExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *CaseExprContext {
	var p = new(CaseExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_caseExpr

	return p
}

func (s *CaseExprContext) GetParser() antlr.Parser { return s.parser }

func (s *CaseExprContext) CASE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserCASE, 0)
}

func (s *CaseExprContext) Pattern() IPatternContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IPatternContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IPatternContext)
}

func (s *CaseExprContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *CaseExprContext) ARROW() antlr.TerminalNode {
	return s.GetToken(UnifiedParserARROW, 0)
}

func (s *CaseExprContext) COLON() antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOLON, 0)
}

func (s *CaseExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *CaseExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *CaseExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterCaseExpr(s)
	}
}

func (s *CaseExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitCaseExpr(s)
	}
}

func (s *CaseExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitCaseExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) CaseExpr() (localctx ICaseExprContext) {
	localctx = NewCaseExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 104, UnifiedParserRULE_caseExpr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(898)
		p.Match(UnifiedParserCASE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(899)
		p.pattern(0)
	}
	{
		p.SetState(900)
		_la = p.GetTokenStream().LA(1)

		if !(_la == UnifiedParserCOLON || _la == UnifiedParserARROW) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}
	{
		p.SetState(901)
		p.expr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IPrimaryContext is an interface to support dynamic dispatch.
type IPrimaryContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	Literal() ILiteralContext
	LPAREN() antlr.TerminalNode
	Expr() IExprContext
	RPAREN() antlr.TerminalNode
	Block() IBlockContext
	StructExpr() IStructExprContext
	ListExpr() IListExprContext
	MapExpr() IMapExprContext
	SetExpr() ISetExprContext
	TupleExpr() ITupleExprContext

	// IsPrimaryContext differentiates from other interfaces.
	IsPrimaryContext()
}

type PrimaryContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyPrimaryContext() *PrimaryContext {
	var p = new(PrimaryContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_primary
	return p
}

func InitEmptyPrimaryContext(p *PrimaryContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_primary
}

func (*PrimaryContext) IsPrimaryContext() {}

func NewPrimaryContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *PrimaryContext {
	var p = new(PrimaryContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_primary

	return p
}

func (s *PrimaryContext) GetParser() antlr.Parser { return s.parser }

func (s *PrimaryContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *PrimaryContext) Literal() ILiteralContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ILiteralContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ILiteralContext)
}

func (s *PrimaryContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLPAREN, 0)
}

func (s *PrimaryContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *PrimaryContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRPAREN, 0)
}

func (s *PrimaryContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *PrimaryContext) StructExpr() IStructExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStructExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStructExprContext)
}

func (s *PrimaryContext) ListExpr() IListExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IListExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IListExprContext)
}

func (s *PrimaryContext) MapExpr() IMapExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IMapExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IMapExprContext)
}

func (s *PrimaryContext) SetExpr() ISetExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ISetExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ISetExprContext)
}

func (s *PrimaryContext) TupleExpr() ITupleExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITupleExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITupleExprContext)
}

func (s *PrimaryContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *PrimaryContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *PrimaryContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterPrimary(s)
	}
}

func (s *PrimaryContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitPrimary(s)
	}
}

func (s *PrimaryContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitPrimary(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) Primary() (localctx IPrimaryContext) {
	localctx = NewPrimaryContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 106, UnifiedParserRULE_primary)
	p.SetState(915)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 101, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(903)
			p.Identifier()
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(904)
			p.Literal()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(905)
			p.Match(UnifiedParserLPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(906)
			p.expr(0)
		}
		{
			p.SetState(907)
			p.Match(UnifiedParserRPAREN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 4:
		p.EnterOuterAlt(localctx, 4)
		{
			p.SetState(909)
			p.Block()
		}

	case 5:
		p.EnterOuterAlt(localctx, 5)
		{
			p.SetState(910)
			p.StructExpr()
		}

	case 6:
		p.EnterOuterAlt(localctx, 6)
		{
			p.SetState(911)
			p.ListExpr()
		}

	case 7:
		p.EnterOuterAlt(localctx, 7)
		{
			p.SetState(912)
			p.MapExpr()
		}

	case 8:
		p.EnterOuterAlt(localctx, 8)
		{
			p.SetState(913)
			p.SetExpr()
		}

	case 9:
		p.EnterOuterAlt(localctx, 9)
		{
			p.SetState(914)
			p.TupleExpr()
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILambdaExprContext is an interface to support dynamic dispatch.
type ILambdaExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllBIT_OR() []antlr.TerminalNode
	BIT_OR(i int) antlr.TerminalNode
	Block() IBlockContext
	Expr() IExprContext
	MOVE() antlr.TerminalNode
	ParamList() IParamListContext
	ARROW() antlr.TerminalNode
	Type_() ITypeContext

	// IsLambdaExprContext differentiates from other interfaces.
	IsLambdaExprContext()
}

type LambdaExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLambdaExprContext() *LambdaExprContext {
	var p = new(LambdaExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_lambdaExpr
	return p
}

func InitEmptyLambdaExprContext(p *LambdaExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_lambdaExpr
}

func (*LambdaExprContext) IsLambdaExprContext() {}

func NewLambdaExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LambdaExprContext {
	var p = new(LambdaExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_lambdaExpr

	return p
}

func (s *LambdaExprContext) GetParser() antlr.Parser { return s.parser }

func (s *LambdaExprContext) AllBIT_OR() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserBIT_OR)
}

func (s *LambdaExprContext) BIT_OR(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserBIT_OR, i)
}

func (s *LambdaExprContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *LambdaExprContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *LambdaExprContext) MOVE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserMOVE, 0)
}

func (s *LambdaExprContext) ParamList() IParamListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IParamListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IParamListContext)
}

func (s *LambdaExprContext) ARROW() antlr.TerminalNode {
	return s.GetToken(UnifiedParserARROW, 0)
}

func (s *LambdaExprContext) Type_() ITypeContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(ITypeContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(ITypeContext)
}

func (s *LambdaExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LambdaExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LambdaExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterLambdaExpr(s)
	}
}

func (s *LambdaExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitLambdaExpr(s)
	}
}

func (s *LambdaExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitLambdaExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) LambdaExpr() (localctx ILambdaExprContext) {
	localctx = NewLambdaExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 108, UnifiedParserRULE_lambdaExpr)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	p.SetState(918)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserMOVE {
		{
			p.SetState(917)
			p.Match(UnifiedParserMOVE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(920)
		p.Match(UnifiedParserBIT_OR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(922)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserSELF || _la == UnifiedParserIdentifier {
		{
			p.SetState(921)
			p.ParamList()
		}

	}
	{
		p.SetState(924)
		p.Match(UnifiedParserBIT_OR)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(931)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 105, p.GetParserRuleContext()) {
	case 1:
		p.SetState(927)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == UnifiedParserARROW {
			{
				p.SetState(925)
				p.Match(UnifiedParserARROW)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(926)
				p.type_(0)
			}

		}
		{
			p.SetState(929)
			p.Block()
		}

	case 2:
		{
			p.SetState(930)
			p.expr(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IAsyncExprContext is an interface to support dynamic dispatch.
type IAsyncExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	ASYNC() antlr.TerminalNode
	Block() IBlockContext

	// IsAsyncExprContext differentiates from other interfaces.
	IsAsyncExprContext()
}

type AsyncExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyAsyncExprContext() *AsyncExprContext {
	var p = new(AsyncExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_asyncExpr
	return p
}

func InitEmptyAsyncExprContext(p *AsyncExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_asyncExpr
}

func (*AsyncExprContext) IsAsyncExprContext() {}

func NewAsyncExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *AsyncExprContext {
	var p = new(AsyncExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_asyncExpr

	return p
}

func (s *AsyncExprContext) GetParser() antlr.Parser { return s.parser }

func (s *AsyncExprContext) ASYNC() antlr.TerminalNode {
	return s.GetToken(UnifiedParserASYNC, 0)
}

func (s *AsyncExprContext) Block() IBlockContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IBlockContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IBlockContext)
}

func (s *AsyncExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *AsyncExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *AsyncExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterAsyncExpr(s)
	}
}

func (s *AsyncExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitAsyncExpr(s)
	}
}

func (s *AsyncExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitAsyncExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) AsyncExpr() (localctx IAsyncExprContext) {
	localctx = NewAsyncExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 110, UnifiedParserRULE_asyncExpr)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(933)
		p.Match(UnifiedParserASYNC)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(934)
		p.Block()
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IStructExprContext is an interface to support dynamic dispatch.
type IStructExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	LBRACE() antlr.TerminalNode
	FieldInitList() IFieldInitListContext
	RBRACE() antlr.TerminalNode

	// IsStructExprContext differentiates from other interfaces.
	IsStructExprContext()
}

type StructExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyStructExprContext() *StructExprContext {
	var p = new(StructExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_structExpr
	return p
}

func InitEmptyStructExprContext(p *StructExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_structExpr
}

func (*StructExprContext) IsStructExprContext() {}

func NewStructExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *StructExprContext {
	var p = new(StructExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_structExpr

	return p
}

func (s *StructExprContext) GetParser() antlr.Parser { return s.parser }

func (s *StructExprContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *StructExprContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLBRACE, 0)
}

func (s *StructExprContext) FieldInitList() IFieldInitListContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldInitListContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldInitListContext)
}

func (s *StructExprContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRBRACE, 0)
}

func (s *StructExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *StructExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *StructExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterStructExpr(s)
	}
}

func (s *StructExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitStructExpr(s)
	}
}

func (s *StructExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitStructExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) StructExpr() (localctx IStructExprContext) {
	localctx = NewStructExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 112, UnifiedParserRULE_structExpr)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(936)
		p.Identifier()
	}
	{
		p.SetState(937)
		p.Match(UnifiedParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(938)
		p.FieldInitList()
	}
	{
		p.SetState(939)
		p.Match(UnifiedParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFieldInitListContext is an interface to support dynamic dispatch.
type IFieldInitListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllFieldInit() []IFieldInitContext
	FieldInit(i int) IFieldInitContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsFieldInitListContext differentiates from other interfaces.
	IsFieldInitListContext()
}

type FieldInitListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldInitListContext() *FieldInitListContext {
	var p = new(FieldInitListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_fieldInitList
	return p
}

func InitEmptyFieldInitListContext(p *FieldInitListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_fieldInitList
}

func (*FieldInitListContext) IsFieldInitListContext() {}

func NewFieldInitListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldInitListContext {
	var p = new(FieldInitListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_fieldInitList

	return p
}

func (s *FieldInitListContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldInitListContext) AllFieldInit() []IFieldInitContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IFieldInitContext); ok {
			len++
		}
	}

	tst := make([]IFieldInitContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IFieldInitContext); ok {
			tst[i] = t.(IFieldInitContext)
			i++
		}
	}

	return tst
}

func (s *FieldInitListContext) FieldInit(i int) IFieldInitContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IFieldInitContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IFieldInitContext)
}

func (s *FieldInitListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserCOMMA)
}

func (s *FieldInitListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOMMA, i)
}

func (s *FieldInitListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldInitListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldInitListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterFieldInitList(s)
	}
}

func (s *FieldInitListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitFieldInitList(s)
	}
}

func (s *FieldInitListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitFieldInitList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) FieldInitList() (localctx IFieldInitListContext) {
	localctx = NewFieldInitListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 114, UnifiedParserRULE_fieldInitList)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(941)
		p.FieldInit()
	}
	p.SetState(946)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 106, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(942)
				p.Match(UnifiedParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(943)
				p.FieldInit()
			}

		}
		p.SetState(948)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 106, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(950)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserCOMMA {
		{
			p.SetState(949)
			p.Match(UnifiedParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IFieldInitContext is an interface to support dynamic dispatch.
type IFieldInitContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() IIdentifierContext
	COLON() antlr.TerminalNode
	Expr() IExprContext
	RANGE() antlr.TerminalNode

	// IsFieldInitContext differentiates from other interfaces.
	IsFieldInitContext()
}

type FieldInitContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyFieldInitContext() *FieldInitContext {
	var p = new(FieldInitContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_fieldInit
	return p
}

func InitEmptyFieldInitContext(p *FieldInitContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_fieldInit
}

func (*FieldInitContext) IsFieldInitContext() {}

func NewFieldInitContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *FieldInitContext {
	var p = new(FieldInitContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_fieldInit

	return p
}

func (s *FieldInitContext) GetParser() antlr.Parser { return s.parser }

func (s *FieldInitContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *FieldInitContext) COLON() antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOLON, 0)
}

func (s *FieldInitContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *FieldInitContext) RANGE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRANGE, 0)
}

func (s *FieldInitContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *FieldInitContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *FieldInitContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterFieldInit(s)
	}
}

func (s *FieldInitContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitFieldInit(s)
	}
}

func (s *FieldInitContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitFieldInit(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) FieldInit() (localctx IFieldInitContext) {
	localctx = NewFieldInitContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 116, UnifiedParserRULE_fieldInit)
	p.SetState(959)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 108, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(952)
			p.Identifier()
		}
		{
			p.SetState(953)
			p.Match(UnifiedParserCOLON)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(954)
			p.expr(0)
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(956)
			p.Identifier()
		}

	case 3:
		p.EnterOuterAlt(localctx, 3)
		{
			p.SetState(957)
			p.Match(UnifiedParserRANGE)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(958)
			p.expr(0)
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IListExprContext is an interface to support dynamic dispatch.
type IListExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LBRACK() antlr.TerminalNode
	RBRACK() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode
	FOR() antlr.TerminalNode
	Identifier() IIdentifierContext
	IN() antlr.TerminalNode
	IF() antlr.TerminalNode

	// IsListExprContext differentiates from other interfaces.
	IsListExprContext()
}

type ListExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyListExprContext() *ListExprContext {
	var p = new(ListExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_listExpr
	return p
}

func InitEmptyListExprContext(p *ListExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_listExpr
}

func (*ListExprContext) IsListExprContext() {}

func NewListExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ListExprContext {
	var p = new(ListExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_listExpr

	return p
}

func (s *ListExprContext) GetParser() antlr.Parser { return s.parser }

func (s *ListExprContext) LBRACK() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLBRACK, 0)
}

func (s *ListExprContext) RBRACK() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRBRACK, 0)
}

func (s *ListExprContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ListExprContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ListExprContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserCOMMA)
}

func (s *ListExprContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOMMA, i)
}

func (s *ListExprContext) FOR() antlr.TerminalNode {
	return s.GetToken(UnifiedParserFOR, 0)
}

func (s *ListExprContext) Identifier() IIdentifierContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IIdentifierContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IIdentifierContext)
}

func (s *ListExprContext) IN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserIN, 0)
}

func (s *ListExprContext) IF() antlr.TerminalNode {
	return s.GetToken(UnifiedParserIF, 0)
}

func (s *ListExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ListExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ListExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterListExpr(s)
	}
}

func (s *ListExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitListExpr(s)
	}
}

func (s *ListExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitListExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) ListExpr() (localctx IListExprContext) {
	localctx = NewListExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 118, UnifiedParserRULE_listExpr)
	var _la int

	var _alt int

	p.SetState(988)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}

	switch p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 113, p.GetParserRuleContext()) {
	case 1:
		p.EnterOuterAlt(localctx, 1)
		{
			p.SetState(961)
			p.Match(UnifiedParserLBRACK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		p.SetState(970)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&844424999886890) != 0) || ((int64((_la-68)) & ^0x3f) == 0 && ((int64(1)<<(_la-68))&16675329) != 0) {
			{
				p.SetState(962)
				p.expr(0)
			}
			p.SetState(967)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 109, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
			for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
				if _alt == 1 {
					{
						p.SetState(963)
						p.Match(UnifiedParserCOMMA)
						if p.HasError() {
							// Recognition error - abort rule
							goto errorExit
						}
					}
					{
						p.SetState(964)
						p.expr(0)
					}

				}
				p.SetState(969)
				p.GetErrorHandler().Sync(p)
				if p.HasError() {
					goto errorExit
				}
				_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 109, p.GetParserRuleContext())
				if p.HasError() {
					goto errorExit
				}
			}

		}
		p.SetState(973)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == UnifiedParserCOMMA {
			{
				p.SetState(972)
				p.Match(UnifiedParserCOMMA)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}

		}
		{
			p.SetState(975)
			p.Match(UnifiedParserRBRACK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case 2:
		p.EnterOuterAlt(localctx, 2)
		{
			p.SetState(976)
			p.Match(UnifiedParserLBRACK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(977)
			p.expr(0)
		}
		{
			p.SetState(978)
			p.Match(UnifiedParserFOR)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(979)
			p.Identifier()
		}
		{
			p.SetState(980)
			p.Match(UnifiedParserIN)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(981)
			p.expr(0)
		}
		p.SetState(984)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)

		if _la == UnifiedParserIF {
			{
				p.SetState(982)
				p.Match(UnifiedParserIF)
				if p.HasError() {
					// Recognition error - abort rule
					goto errorExit
				}
			}
			{
				p.SetState(983)
				p.expr(0)
			}

		}
		{
			p.SetState(986)
			p.Match(UnifiedParserRBRACK)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	case antlr.ATNInvalidAltNumber:
		goto errorExit
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IMapExprContext is an interface to support dynamic dispatch.
type IMapExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	AllKeyValue() []IKeyValueContext
	KeyValue(i int) IKeyValueContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsMapExprContext differentiates from other interfaces.
	IsMapExprContext()
}

type MapExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyMapExprContext() *MapExprContext {
	var p = new(MapExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_mapExpr
	return p
}

func InitEmptyMapExprContext(p *MapExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_mapExpr
}

func (*MapExprContext) IsMapExprContext() {}

func NewMapExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *MapExprContext {
	var p = new(MapExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_mapExpr

	return p
}

func (s *MapExprContext) GetParser() antlr.Parser { return s.parser }

func (s *MapExprContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLBRACE, 0)
}

func (s *MapExprContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRBRACE, 0)
}

func (s *MapExprContext) AllKeyValue() []IKeyValueContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IKeyValueContext); ok {
			len++
		}
	}

	tst := make([]IKeyValueContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IKeyValueContext); ok {
			tst[i] = t.(IKeyValueContext)
			i++
		}
	}

	return tst
}

func (s *MapExprContext) KeyValue(i int) IKeyValueContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IKeyValueContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IKeyValueContext)
}

func (s *MapExprContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserCOMMA)
}

func (s *MapExprContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOMMA, i)
}

func (s *MapExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *MapExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *MapExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterMapExpr(s)
	}
}

func (s *MapExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitMapExpr(s)
	}
}

func (s *MapExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitMapExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) MapExpr() (localctx IMapExprContext) {
	localctx = NewMapExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 120, UnifiedParserRULE_mapExpr)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(990)
		p.Match(UnifiedParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(999)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&844424999886890) != 0) || ((int64((_la-68)) & ^0x3f) == 0 && ((int64(1)<<(_la-68))&16675329) != 0) {
		{
			p.SetState(991)
			p.KeyValue()
		}
		p.SetState(996)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 114, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(992)
					p.Match(UnifiedParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(993)
					p.KeyValue()
				}

			}
			p.SetState(998)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 114, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

	}
	p.SetState(1002)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserCOMMA {
		{
			p.SetState(1001)
			p.Match(UnifiedParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1004)
		p.Match(UnifiedParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IKeyValueContext is an interface to support dynamic dispatch.
type IKeyValueContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	COLON() antlr.TerminalNode

	// IsKeyValueContext differentiates from other interfaces.
	IsKeyValueContext()
}

type KeyValueContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyKeyValueContext() *KeyValueContext {
	var p = new(KeyValueContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_keyValue
	return p
}

func InitEmptyKeyValueContext(p *KeyValueContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_keyValue
}

func (*KeyValueContext) IsKeyValueContext() {}

func NewKeyValueContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *KeyValueContext {
	var p = new(KeyValueContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_keyValue

	return p
}

func (s *KeyValueContext) GetParser() antlr.Parser { return s.parser }

func (s *KeyValueContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *KeyValueContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *KeyValueContext) COLON() antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOLON, 0)
}

func (s *KeyValueContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *KeyValueContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *KeyValueContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterKeyValue(s)
	}
}

func (s *KeyValueContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitKeyValue(s)
	}
}

func (s *KeyValueContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitKeyValue(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) KeyValue() (localctx IKeyValueContext) {
	localctx = NewKeyValueContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 122, UnifiedParserRULE_keyValue)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1006)
		p.expr(0)
	}
	{
		p.SetState(1007)
		p.Match(UnifiedParserCOLON)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	{
		p.SetState(1008)
		p.expr(0)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ISetExprContext is an interface to support dynamic dispatch.
type ISetExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsSetExprContext differentiates from other interfaces.
	IsSetExprContext()
}

type SetExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptySetExprContext() *SetExprContext {
	var p = new(SetExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_setExpr
	return p
}

func InitEmptySetExprContext(p *SetExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_setExpr
}

func (*SetExprContext) IsSetExprContext() {}

func NewSetExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *SetExprContext {
	var p = new(SetExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_setExpr

	return p
}

func (s *SetExprContext) GetParser() antlr.Parser { return s.parser }

func (s *SetExprContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLBRACE, 0)
}

func (s *SetExprContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRBRACE, 0)
}

func (s *SetExprContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *SetExprContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *SetExprContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserCOMMA)
}

func (s *SetExprContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOMMA, i)
}

func (s *SetExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *SetExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *SetExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterSetExpr(s)
	}
}

func (s *SetExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitSetExpr(s)
	}
}

func (s *SetExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitSetExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) SetExpr() (localctx ISetExprContext) {
	localctx = NewSetExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 124, UnifiedParserRULE_setExpr)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1010)
		p.Match(UnifiedParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1019)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&844424999886890) != 0) || ((int64((_la-68)) & ^0x3f) == 0 && ((int64(1)<<(_la-68))&16675329) != 0) {
		{
			p.SetState(1011)
			p.expr(0)
		}
		p.SetState(1016)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 117, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1012)
					p.Match(UnifiedParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1013)
					p.expr(0)
				}

			}
			p.SetState(1018)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 117, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

	}
	p.SetState(1022)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserCOMMA {
		{
			p.SetState(1021)
			p.Match(UnifiedParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1024)
		p.Match(UnifiedParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ITupleExprContext is an interface to support dynamic dispatch.
type ITupleExprContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LPAREN() antlr.TerminalNode
	RPAREN() antlr.TerminalNode
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsTupleExprContext differentiates from other interfaces.
	IsTupleExprContext()
}

type TupleExprContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyTupleExprContext() *TupleExprContext {
	var p = new(TupleExprContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_tupleExpr
	return p
}

func InitEmptyTupleExprContext(p *TupleExprContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_tupleExpr
}

func (*TupleExprContext) IsTupleExprContext() {}

func NewTupleExprContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *TupleExprContext {
	var p = new(TupleExprContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_tupleExpr

	return p
}

func (s *TupleExprContext) GetParser() antlr.Parser { return s.parser }

func (s *TupleExprContext) LPAREN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLPAREN, 0)
}

func (s *TupleExprContext) RPAREN() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRPAREN, 0)
}

func (s *TupleExprContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *TupleExprContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *TupleExprContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserCOMMA)
}

func (s *TupleExprContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOMMA, i)
}

func (s *TupleExprContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *TupleExprContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *TupleExprContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterTupleExpr(s)
	}
}

func (s *TupleExprContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitTupleExpr(s)
	}
}

func (s *TupleExprContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitTupleExpr(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) TupleExpr() (localctx ITupleExprContext) {
	localctx = NewTupleExprContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 126, UnifiedParserRULE_tupleExpr)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1026)
		p.Match(UnifiedParserLPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1035)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&844424999886890) != 0) || ((int64((_la-68)) & ^0x3f) == 0 && ((int64(1)<<(_la-68))&16675329) != 0) {
		{
			p.SetState(1027)
			p.expr(0)
		}
		p.SetState(1032)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 120, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
		for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
			if _alt == 1 {
				{
					p.SetState(1028)
					p.Match(UnifiedParserCOMMA)
					if p.HasError() {
						// Recognition error - abort rule
						goto errorExit
					}
				}
				{
					p.SetState(1029)
					p.expr(0)
				}

			}
			p.SetState(1034)
			p.GetErrorHandler().Sync(p)
			if p.HasError() {
				goto errorExit
			}
			_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 120, p.GetParserRuleContext())
			if p.HasError() {
				goto errorExit
			}
		}

	}
	p.SetState(1038)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if _la == UnifiedParserCOMMA {
		{
			p.SetState(1037)
			p.Match(UnifiedParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}

	}
	{
		p.SetState(1040)
		p.Match(UnifiedParserRPAREN)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IBlockContext is an interface to support dynamic dispatch.
type IBlockContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	LBRACE() antlr.TerminalNode
	RBRACE() antlr.TerminalNode
	AllStatement() []IStatementContext
	Statement(i int) IStatementContext
	Expr() IExprContext

	// IsBlockContext differentiates from other interfaces.
	IsBlockContext()
}

type BlockContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyBlockContext() *BlockContext {
	var p = new(BlockContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_block
	return p
}

func InitEmptyBlockContext(p *BlockContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_block
}

func (*BlockContext) IsBlockContext() {}

func NewBlockContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *BlockContext {
	var p = new(BlockContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_block

	return p
}

func (s *BlockContext) GetParser() antlr.Parser { return s.parser }

func (s *BlockContext) LBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserLBRACE, 0)
}

func (s *BlockContext) RBRACE() antlr.TerminalNode {
	return s.GetToken(UnifiedParserRBRACE, 0)
}

func (s *BlockContext) AllStatement() []IStatementContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IStatementContext); ok {
			len++
		}
	}

	tst := make([]IStatementContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IStatementContext); ok {
			tst[i] = t.(IStatementContext)
			i++
		}
	}

	return tst
}

func (s *BlockContext) Statement(i int) IStatementContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IStatementContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IStatementContext)
}

func (s *BlockContext) Expr() IExprContext {
	var t antlr.RuleContext
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			t = ctx.(antlr.RuleContext)
			break
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *BlockContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *BlockContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *BlockContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterBlock(s)
	}
}

func (s *BlockContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitBlock(s)
	}
}

func (s *BlockContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitBlock(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) Block() (localctx IBlockContext) {
	localctx = NewBlockContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 128, UnifiedParserRULE_block)
	var _la int

	var _alt int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1042)
		p.Match(UnifiedParserLBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}
	p.SetState(1046)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 123, p.GetParserRuleContext())
	if p.HasError() {
		goto errorExit
	}
	for _alt != 2 && _alt != antlr.ATNInvalidAltNumber {
		if _alt == 1 {
			{
				p.SetState(1043)
				p.Statement()
			}

		}
		p.SetState(1048)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_alt = p.GetInterpreter().AdaptivePredict(p.BaseParser, p.GetTokenStream(), 123, p.GetParserRuleContext())
		if p.HasError() {
			goto errorExit
		}
	}
	p.SetState(1050)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	if ((int64(_la) & ^0x3f) == 0 && ((int64(1)<<_la)&844424999886890) != 0) || ((int64((_la-68)) & ^0x3f) == 0 && ((int64(1)<<(_la-68))&16675329) != 0) {
		{
			p.SetState(1049)
			p.expr(0)
		}

	}
	{
		p.SetState(1052)
		p.Match(UnifiedParserRBRACE)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IArgListContext is an interface to support dynamic dispatch.
type IArgListContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	AllExpr() []IExprContext
	Expr(i int) IExprContext
	AllCOMMA() []antlr.TerminalNode
	COMMA(i int) antlr.TerminalNode

	// IsArgListContext differentiates from other interfaces.
	IsArgListContext()
}

type ArgListContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyArgListContext() *ArgListContext {
	var p = new(ArgListContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_argList
	return p
}

func InitEmptyArgListContext(p *ArgListContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_argList
}

func (*ArgListContext) IsArgListContext() {}

func NewArgListContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *ArgListContext {
	var p = new(ArgListContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_argList

	return p
}

func (s *ArgListContext) GetParser() antlr.Parser { return s.parser }

func (s *ArgListContext) AllExpr() []IExprContext {
	children := s.GetChildren()
	len := 0
	for _, ctx := range children {
		if _, ok := ctx.(IExprContext); ok {
			len++
		}
	}

	tst := make([]IExprContext, len)
	i := 0
	for _, ctx := range children {
		if t, ok := ctx.(IExprContext); ok {
			tst[i] = t.(IExprContext)
			i++
		}
	}

	return tst
}

func (s *ArgListContext) Expr(i int) IExprContext {
	var t antlr.RuleContext
	j := 0
	for _, ctx := range s.GetChildren() {
		if _, ok := ctx.(IExprContext); ok {
			if j == i {
				t = ctx.(antlr.RuleContext)
				break
			}
			j++
		}
	}

	if t == nil {
		return nil
	}

	return t.(IExprContext)
}

func (s *ArgListContext) AllCOMMA() []antlr.TerminalNode {
	return s.GetTokens(UnifiedParserCOMMA)
}

func (s *ArgListContext) COMMA(i int) antlr.TerminalNode {
	return s.GetToken(UnifiedParserCOMMA, i)
}

func (s *ArgListContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *ArgListContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *ArgListContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterArgList(s)
	}
}

func (s *ArgListContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitArgList(s)
	}
}

func (s *ArgListContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitArgList(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) ArgList() (localctx IArgListContext) {
	localctx = NewArgListContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 130, UnifiedParserRULE_argList)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1054)
		p.expr(0)
	}
	p.SetState(1059)
	p.GetErrorHandler().Sync(p)
	if p.HasError() {
		goto errorExit
	}
	_la = p.GetTokenStream().LA(1)

	for _la == UnifiedParserCOMMA {
		{
			p.SetState(1055)
			p.Match(UnifiedParserCOMMA)
			if p.HasError() {
				// Recognition error - abort rule
				goto errorExit
			}
		}
		{
			p.SetState(1056)
			p.expr(0)
		}

		p.SetState(1061)
		p.GetErrorHandler().Sync(p)
		if p.HasError() {
			goto errorExit
		}
		_la = p.GetTokenStream().LA(1)
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// ILiteralContext is an interface to support dynamic dispatch.
type ILiteralContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	IntLiteral() antlr.TerminalNode
	FloatLiteral() antlr.TerminalNode
	StringLiteral() antlr.TerminalNode
	CharLiteral() antlr.TerminalNode
	BoolLiteral() antlr.TerminalNode
	NullLiteral() antlr.TerminalNode

	// IsLiteralContext differentiates from other interfaces.
	IsLiteralContext()
}

type LiteralContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyLiteralContext() *LiteralContext {
	var p = new(LiteralContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_literal
	return p
}

func InitEmptyLiteralContext(p *LiteralContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_literal
}

func (*LiteralContext) IsLiteralContext() {}

func NewLiteralContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *LiteralContext {
	var p = new(LiteralContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_literal

	return p
}

func (s *LiteralContext) GetParser() antlr.Parser { return s.parser }

func (s *LiteralContext) IntLiteral() antlr.TerminalNode {
	return s.GetToken(UnifiedParserIntLiteral, 0)
}

func (s *LiteralContext) FloatLiteral() antlr.TerminalNode {
	return s.GetToken(UnifiedParserFloatLiteral, 0)
}

func (s *LiteralContext) StringLiteral() antlr.TerminalNode {
	return s.GetToken(UnifiedParserStringLiteral, 0)
}

func (s *LiteralContext) CharLiteral() antlr.TerminalNode {
	return s.GetToken(UnifiedParserCharLiteral, 0)
}

func (s *LiteralContext) BoolLiteral() antlr.TerminalNode {
	return s.GetToken(UnifiedParserBoolLiteral, 0)
}

func (s *LiteralContext) NullLiteral() antlr.TerminalNode {
	return s.GetToken(UnifiedParserNullLiteral, 0)
}

func (s *LiteralContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *LiteralContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *LiteralContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterLiteral(s)
	}
}

func (s *LiteralContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitLiteral(s)
	}
}

func (s *LiteralContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitLiteral(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) Literal() (localctx ILiteralContext) {
	localctx = NewLiteralContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 132, UnifiedParserRULE_literal)
	var _la int

	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1062)
		_la = p.GetTokenStream().LA(1)

		if !((int64((_la-86)) & ^0x3f) == 0 && ((int64(1)<<(_la-86))&63) != 0) {
			p.GetErrorHandler().RecoverInline(p)
		} else {
			p.GetErrorHandler().ReportMatch(p)
			p.Consume()
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

// IIdentifierContext is an interface to support dynamic dispatch.
type IIdentifierContext interface {
	antlr.ParserRuleContext

	// GetParser returns the parser.
	GetParser() antlr.Parser

	// Getter signatures
	Identifier() antlr.TerminalNode

	// IsIdentifierContext differentiates from other interfaces.
	IsIdentifierContext()
}

type IdentifierContext struct {
	antlr.BaseParserRuleContext
	parser antlr.Parser
}

func NewEmptyIdentifierContext() *IdentifierContext {
	var p = new(IdentifierContext)
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_identifier
	return p
}

func InitEmptyIdentifierContext(p *IdentifierContext) {
	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, nil, -1)
	p.RuleIndex = UnifiedParserRULE_identifier
}

func (*IdentifierContext) IsIdentifierContext() {}

func NewIdentifierContext(parser antlr.Parser, parent antlr.ParserRuleContext, invokingState int) *IdentifierContext {
	var p = new(IdentifierContext)

	antlr.InitBaseParserRuleContext(&p.BaseParserRuleContext, parent, invokingState)

	p.parser = parser
	p.RuleIndex = UnifiedParserRULE_identifier

	return p
}

func (s *IdentifierContext) GetParser() antlr.Parser { return s.parser }

func (s *IdentifierContext) Identifier() antlr.TerminalNode {
	return s.GetToken(UnifiedParserIdentifier, 0)
}

func (s *IdentifierContext) GetRuleContext() antlr.RuleContext {
	return s
}

func (s *IdentifierContext) ToStringTree(ruleNames []string, recog antlr.Recognizer) string {
	return antlr.TreesStringTree(s, ruleNames, recog)
}

func (s *IdentifierContext) EnterRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.EnterIdentifier(s)
	}
}

func (s *IdentifierContext) ExitRule(listener antlr.ParseTreeListener) {
	if listenerT, ok := listener.(UnifiedParserListener); ok {
		listenerT.ExitIdentifier(s)
	}
}

func (s *IdentifierContext) Accept(visitor antlr.ParseTreeVisitor) interface{} {
	switch t := visitor.(type) {
	case UnifiedParserVisitor:
		return t.VisitIdentifier(s)

	default:
		return t.VisitChildren(s)
	}
}

func (p *UnifiedParser) Identifier() (localctx IIdentifierContext) {
	localctx = NewIdentifierContext(p, p.GetParserRuleContext(), p.GetState())
	p.EnterRule(localctx, 134, UnifiedParserRULE_identifier)
	p.EnterOuterAlt(localctx, 1)
	{
		p.SetState(1064)
		p.Match(UnifiedParserIdentifier)
		if p.HasError() {
			// Recognition error - abort rule
			goto errorExit
		}
	}

errorExit:
	if p.HasError() {
		v := p.GetError()
		localctx.SetException(v)
		p.GetErrorHandler().ReportError(p, v)
		p.GetErrorHandler().Recover(p, v)
		p.SetError(nil)
	}
	p.ExitRule()
	return localctx
	goto errorExit // Trick to prevent compiler error if the label is not used
}

func (p *UnifiedParser) Sempred(localctx antlr.RuleContext, ruleIndex, predIndex int) bool {
	switch ruleIndex {
	case 29:
		var t *TypeContext = nil
		if localctx != nil {
			t = localctx.(*TypeContext)
		}
		return p.Type__Sempred(t, predIndex)

	case 47:
		var t *PatternContext = nil
		if localctx != nil {
			t = localctx.(*PatternContext)
		}
		return p.Pattern_Sempred(t, predIndex)

	case 51:
		var t *ExprContext = nil
		if localctx != nil {
			t = localctx.(*ExprContext)
		}
		return p.Expr_Sempred(t, predIndex)

	default:
		panic("No predicate with index: " + fmt.Sprint(ruleIndex))
	}
}

func (p *UnifiedParser) Type__Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 0:
		return p.Precpred(p.GetParserRuleContext(), 3)

	case 1:
		return p.Precpred(p.GetParserRuleContext(), 1)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *UnifiedParser) Pattern_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 2:
		return p.Precpred(p.GetParserRuleContext(), 5)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}

func (p *UnifiedParser) Expr_Sempred(localctx antlr.RuleContext, predIndex int) bool {
	switch predIndex {
	case 3:
		return p.Precpred(p.GetParserRuleContext(), 16)

	case 4:
		return p.Precpred(p.GetParserRuleContext(), 15)

	case 5:
		return p.Precpred(p.GetParserRuleContext(), 14)

	case 6:
		return p.Precpred(p.GetParserRuleContext(), 13)

	case 7:
		return p.Precpred(p.GetParserRuleContext(), 12)

	case 8:
		return p.Precpred(p.GetParserRuleContext(), 11)

	case 9:
		return p.Precpred(p.GetParserRuleContext(), 10)

	case 10:
		return p.Precpred(p.GetParserRuleContext(), 9)

	case 11:
		return p.Precpred(p.GetParserRuleContext(), 8)

	case 12:
		return p.Precpred(p.GetParserRuleContext(), 7)

	case 13:
		return p.Precpred(p.GetParserRuleContext(), 6)

	case 14:
		return p.Precpred(p.GetParserRuleContext(), 5)

	case 15:
		return p.Precpred(p.GetParserRuleContext(), 24)

	case 16:
		return p.Precpred(p.GetParserRuleContext(), 23)

	case 17:
		return p.Precpred(p.GetParserRuleContext(), 22)

	case 18:
		return p.Precpred(p.GetParserRuleContext(), 21)

	case 19:
		return p.Precpred(p.GetParserRuleContext(), 20)

	default:
		panic("No predicate with index: " + fmt.Sprint(predIndex))
	}
}
