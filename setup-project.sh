#!/bin/bash
# filepath: setup-project.sh

# Create main project directory
mkdir -p unified-compiler

# Create directory structure
mkdir -p unified-compiler/cmd/compiler
mkdir -p unified-compiler/grammar
mkdir -p unified-compiler/internal/ast
mkdir -p unified-compiler/internal/parser
mkdir -p unified-compiler/internal/semantic
mkdir -p unified-compiler/internal/codegen
mkdir -p unified-compiler/pkg/compiler
mkdir -p unified-compiler/scripts
mkdir -p unified-compiler/test/fixtures
mkdir -p unified-compiler/test/expected

# Copy the grammar file
cp Unified.g4 unified-compiler/grammar/

# Create main.go
cat > unified-compiler/cmd/compiler/main.go << 'EOF'
package main

import (
    "flag"
    "fmt"
    "os"
)

func main() {
    // Parse command-line arguments
    inputFile := flag.String("input", "", "Input source file")
    outputFile := flag.String("output", "", "Output LLVM IR file")
    flag.Parse()

    if *inputFile == "" {
        fmt.Println("Error: Input file required")
        flag.Usage()
        os.Exit(1)
    }

    fmt.Printf("Compiling %s to %s\n", *inputFile, *outputFile)
    // TODO: Implement compilation pipeline
    // 1. Parse input file using ANTLR parser
    // 2. Build AST
    // 3. Perform semantic analysis
    // 4. Generate LLVM IR
    // 5. Output to file
}
EOF

# Create AST definition
cat > unified-compiler/internal/ast/ast.go << 'EOF'
package ast

// Node is the interface implemented by all AST nodes
type Node interface {
    // Position returns the source position information for this node
    Position() Position
}

// Position represents a position in source code
type Position struct {
    Line   int
    Column int
}

// Program is the root of the AST
type Program struct {
    Items []Item
    Pos   Position
}

func (p *Program) Position() Position {
    return p.Pos
}

// Item represents a top-level declaration
type Item interface {
    Node
    isItem()
}
EOF

# Create parser wrapper
cat > unified-compiler/internal/parser/parser.go << 'EOF'
package parser

import (
    "github.com/antlr/antlr4/runtime/Go/antlr/v4"
    "path/to/your/parser/ast"
)

// Parser wraps the ANTLR parser to provide a clean interface
type Parser struct {
    // ANTLR components will be initialized here
}

// ParseFile parses the given file and returns an AST
func ParseFile(filename string) (*ast.Program, error) {
    // TODO: Implement ANTLR parsing
    return &ast.Program{}, nil
}
EOF

# Create basic visitor
cat > unified-compiler/internal/parser/visitor.go << 'EOF'
package parser

// Visitor will be generated by ANTLR and extended here
// The visitor pattern will be used to build the AST from the parse tree
EOF

# Create ANTLR generation script
cat > unified-compiler/scripts/generate.sh << 'EOF'
#!/bin/bash

# This script generates Go code from the ANTLR grammar

# Ensure ANTLR is installed
if ! command -v antlr4 &> /dev/null; then
    echo "ANTLR4 not found. Please install it first."
    echo "Visit https://www.antlr.org/ for installation instructions."
    exit 1
fi

# Generate parser
echo "Generating parser from grammar..."
cd $(dirname "$0")/../grammar
antlr4 -Dlanguage=Go -package parser -o ../internal/parser Unified.g4

echo "Done generating parser code."
EOF

# Create LLVM code generator stub
cat > unified-compiler/internal/codegen/generator.go << 'EOF'
package codegen

import (
    "path/to/your/parser/ast"
)

// Generator handles LLVM IR generation
type Generator struct {
    // LLVM context and builder will be initialized here
}

// NewGenerator creates a new LLVM IR generator
func NewGenerator() *Generator {
    return &Generator{}
}

// Generate creates LLVM IR from the AST
func (g *Generator) Generate(program *ast.Program) ([]byte, error) {
    // TODO: Implement LLVM IR generation
    return []byte{}, nil
}
EOF

# Create go.mod file
cat > unified-compiler/go.mod << 'EOF'
module unified-compiler

go 1.21

require (
    github.com/antlr/antlr4/runtime/Go/antlr/v4 v4.0.0-20230321174746-8dcc6526cfb1
    github.com/llir/llvm v0.3.6
)
EOF

# Create Makefile
cat > unified-compiler/Makefile << 'EOF'
.PHONY: all parser build test clean

all: parser build

parser:
    @echo "Generating parser..."
    @bash scripts/generate.sh

build:
    @echo "Building compiler..."
    @go build -o bin/unified-compiler ./cmd/compiler

test:
    @echo "Running tests..."
    @go test -v ./...

clean:
    @echo "Cleaning up..."
    @rm -rf bin/
    @find ./internal/parser -name "Unified*.go" -type f -delete
EOF

# Create README.md
cat > unified-compiler/README.md << 'EOF'
# Unified Compiler

A compiler for the Unified language that generates LLVM IR.

## Project Structure

- `cmd/compiler`: Command-line interface
- `grammar`: ANTLR grammar definition
- `internal/ast`: Abstract Syntax Tree definitions
- `internal/parser`: ANTLR-generated parser and visitors
- `internal/semantic`: Semantic analysis
- `internal/codegen`: LLVM IR code generation
- `pkg/compiler`: Public compiler API
- `scripts`: Build and utility scripts
- `test`: Test cases and fixtures

## Building

1. Ensure you have Go 1.19+ and ANTLR4 installed
2. Run `make parser` to generate the parser
3. Run `make build` to build the compiler

## Usage
```
./bin/unified-compiler --input program.uni --output program.ll
```


# Make generate script executable
chmod +x unified-compiler/scripts/generate.sh

echo "Project structure created successfully in ./unified-compiler/"
echo "Next steps:"
echo "1. cd unified-compiler"
echo "2. Install ANTLR4 if not already installed"
echo "3. Run 'make parser' to generate the parser"
echo "4. Run 'make build' to build the compiler"

